
03_ThreadX_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dd4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08007fb8  08007fb8  00008fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083e0  080083e0  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  080083e0  080083e0  000093e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083e8  080083e8  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083e8  080083e8  000093e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083ec  080083ec  000093ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080083f0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a14  200001d8  080085c8  0000a1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000bec  080085c8  0000abec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001646c  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004507  00000000  00000000  00020674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00024b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a23  00000000  00000000  000259d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291a2  00000000  00000000  000263fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018cdf  00000000  00000000  0004f59d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2481  00000000  00000000  0006827c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015a6fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004068  00000000  00000000  0015a740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000db  00000000  00000000  0015e7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007f9c 	.word	0x08007f9c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	08007f9c 	.word	0x08007f9c

08000220 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000220:	b672      	cpsid	i
@
@    /* Set base of available memory to end of non-initialised RAM area.  */
@    /* __RAM_segment_used_end__该全局变量应该定义为应用程序已分配内存的终点，空闲内存的起点 */
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 8000222:	481d      	ldr	r0, [pc, #116]	@ (8000298 <__tx_DBGHandler+0x6>)
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address
 8000224:	491d      	ldr	r1, [pc, #116]	@ (800029c <__tx_DBGHandler+0xa>)
    ADD     r1, r1, #4                              @
 8000226:	f101 0104 	add.w	r1, r1, #4
    STR     r1, [r0]                                @ Setup first unused memory pointer
 800022a:	6001      	str	r1, [r0, #0]
@
@    /* Setup Vector Table Offset Register.  */
@    /* 如果需要设置中断向量表的位置，则直接在链接文件中设置app的起始地址即可， */
     /* 但需要注意的是在调用tx_kernel_enter() 函数前，不能使能任意中断，因为还没有正确的设置中断向量表的偏移地址 */
     /* 最保险的做法是在main函数最开始就设置中断向量表的偏移地址 */
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800022c:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =_vectors                           @ Pickup address of vector table
 8000230:	491b      	ldr	r1, [pc, #108]	@ (80002a0 <__tx_DBGHandler+0xe>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000232:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08
@
@    /* Set system stack pointer from vector value.  */
@    /* 系统堆栈指针初始化 */
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000236:	481b      	ldr	r0, [pc, #108]	@ (80002a4 <__tx_DBGHandler+0x12>)
    LDR     r1, =_vectors                           @ Pickup address of vector table
 8000238:	4919      	ldr	r1, [pc, #100]	@ (80002a0 <__tx_DBGHandler+0xe>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 800023a:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 800023c:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@    /* DWT周期计数器启用 */
    LDR     r0, =0xE0001000                         @ Build address of DWT(Data Watchpoint and Trace) register
 800023e:	481a      	ldr	r0, [pc, #104]	@ (80002a8 <__tx_DBGHandler+0x16>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000240:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000242:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 8000246:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000248:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800024c:	4917      	ldr	r1, [pc, #92]	@ (80002ac <__tx_DBGHandler+0x1a>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 800024e:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000250:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 8000254:	6101      	str	r1, [r0, #16]
@     SysTick	0x40	系统节拍中断（1ms 定时）	较高优先级，确保准时触发
@     SVC	    0xFF	系统调用（任务创建/删除）	最低优先级，避免抢占
@     PendSV	0xFF	上下文切换（任务调度）	最低优先级，安全切换

    /* 配置 Cortex-M4 的 MemManage/BusFault/UsageFault 异常优先级（0x00:最高优先级） */
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM (System Handler Priority Register 1)
 8000256:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 800025a:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    /* 设置SVCall（Supervisor Call）：优先级 0xFF（最低优先级） */
    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv (System Handler Priority Register 2)
 800025e:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000262:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    /* 设置SysTick（系统节拍定时器）：优先级 0x40（较高优先级，如优先级4） */
    /* 设置PendSV（可挂起的服务调用）：优先级 0xFF（最低优先级） */
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM (System Handler Priority Register 3)
 8000266:	4912      	ldr	r1, [pc, #72]	@ (80002b0 <__tx_DBGHandler+0x1e>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 8000268:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF

@
@    /* Return to caller.  */
@
    BX      lr
 800026c:	4770      	bx	lr

0800026e <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 800026e:	f7ff bffe 	b.w	800026e <__tx_BadHandler>

08000272 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000272:	f7ff bffe 	b.w	8000272 <__tx_HardfaultHandler>

08000276 <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 8000276:	f7ff bffe 	b.w	8000276 <__tx_SVCallHandler>

0800027a <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 800027a:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800027c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000280:	4770      	bx	lr

08000282 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000282:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 8000284:	f000 f89c 	bl	80003c0 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000288:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 800028c:	4770      	bx	lr

0800028e <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 800028e:	f7ff bffe 	b.w	800028e <__tx_NMIHandler>

08000292 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000292:	f7ff bffe 	b.w	8000292 <__tx_DBGHandler>
 8000296:	0000      	.short	0x0000
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 8000298:	20000474 	.word	0x20000474
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address
 800029c:	200011f0 	.word	0x200011f0
    LDR     r1, =_vectors                           @ Pickup address of vector table
 80002a0:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002a4:	20000478 	.word	0x20000478
    LDR     r0, =0xE0001000                         @ Build address of DWT(Data Watchpoint and Trace) register
 80002a8:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 80002ac:	0002980f 	.word	0x0002980f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM (System Handler Priority Register 3)
 80002b0:	40ff0000 	.word	0x40ff0000
	...

080002c0 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 80002c0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002c4:	4a2a      	ldr	r2, [pc, #168]	@ (8000370 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002c6:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002c8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002cc:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002d0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002d4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
   // 触发 PendSV 中断
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002d6:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002da:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002de:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 80002e2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002e6:	f3bf 8f6f 	isb	sy

080002ea <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ea:	e7fe      	b.n	80002ea <__tx_wait_here>

080002ec <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002ec:	4821      	ldr	r0, [pc, #132]	@ (8000374 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ee:	4a22      	ldr	r2, [pc, #136]	@ (8000378 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002f0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002f4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002f6:	b191      	cbz	r1, 800031e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002f8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002fa:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002fe:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000302:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000306:	d101      	bne.n	800030c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000308:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800030c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800030c:	4c1b      	ldr	r4, [pc, #108]	@ (800037c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800030e:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000312:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000314:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000318:	b10d      	cbz	r5, 800031e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800031a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800031c:	6023      	str	r3, [r4, #0]

0800031e <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800031e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000320:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000322:	b1b1      	cbz	r1, 8000352 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000324:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000326:	b662      	cpsie	i

08000328 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000328:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800032a:	4c14      	ldr	r4, [pc, #80]	@ (800037c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800032c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800032e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000332:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000334:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000336:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800033a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800033e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000342:	d101      	bne.n	8000348 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000344:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000348 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000348:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800034c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000350:	4770      	bx	lr

08000352 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000352:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000354:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000356:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000358:	b909      	cbnz	r1, 800035e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800035a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800035c:	e7f9      	b.n	8000352 <__tx_ts_wait>

0800035e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800035e:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000362:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000366:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800036a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800036c:	e7dc      	b.n	8000328 <__tx_ts_restore>

0800036e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800036e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000370:	20000518 	.word	0x20000518
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000374:	2000047c 	.word	0x2000047c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000378:	20000480 	.word	0x20000480
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800037c:	20000a94 	.word	0x20000a94

08000380 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000380:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000382:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000386:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800038a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800038e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000390:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000394:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000396:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000398:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800039a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800039c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800039e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003a0:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003a2:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003a4:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003a6:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003aa:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003ac:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003ae:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003b2:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003b4:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80003ba:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80003bc:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80003be:	4770      	bx	lr

080003c0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003c0:	4922      	ldr	r1, [pc, #136]	@ (800044c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003c2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003c4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003c8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003ca:	4b21      	ldr	r3, [pc, #132]	@ (8000450 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003cc:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003ce:	b13a      	cbz	r2, 80003e0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003d0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003d4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003d6:	b91a      	cbnz	r2, 80003e0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000454 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003da:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003de:	6018      	str	r0, [r3, #0]

080003e0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003e0:	491d      	ldr	r1, [pc, #116]	@ (8000458 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003e2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003e4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003e6:	b122      	cbz	r2, 80003f2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003e8:	4b1c      	ldr	r3, [pc, #112]	@ (800045c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ea:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ee:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003f0:	e008      	b.n	8000404 <__tx_timer_done>

080003f2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003f2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000460 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003f8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003fa:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003fc:	d101      	bne.n	8000402 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003fe:	4b19      	ldr	r3, [pc, #100]	@ (8000464 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000400:	6818      	ldr	r0, [r3, #0]

08000402 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000402:	6008      	str	r0, [r1, #0]

08000404 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000404:	4b13      	ldr	r3, [pc, #76]	@ (8000454 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000406:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000408:	b912      	cbnz	r2, 8000410 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800040a:	4914      	ldr	r1, [pc, #80]	@ (800045c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800040c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800040e:	b1d0      	cbz	r0, 8000446 <__tx_timer_nothing_expired>

08000410 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 8000410:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000414:	4911      	ldr	r1, [pc, #68]	@ (800045c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000416:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000418:	b108      	cbz	r0, 800041e <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 800041a:	f004 fcdd 	bl	8004dd8 <_tx_timer_expiration_process>

0800041e <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800041e:	4b0d      	ldr	r3, [pc, #52]	@ (8000454 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000420:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000422:	b172      	cbz	r2, 8000442 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000424:	f004 fc4a 	bl	8004cbc <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000428:	480f      	ldr	r0, [pc, #60]	@ (8000468 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800042a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800042c:	b949      	cbnz	r1, 8000442 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800042e:	480f      	ldr	r0, [pc, #60]	@ (800046c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000430:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000432:	4a0f      	ldr	r2, [pc, #60]	@ (8000470 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000434:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000436:	480f      	ldr	r0, [pc, #60]	@ (8000474 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000438:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800043c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800043e:	d000      	beq.n	8000442 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000440:	6002      	str	r2, [r0, #0]

08000442 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000442:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000446 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000446:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800044a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800044c:	20000524 	.word	0x20000524
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000450:	20000a94 	.word	0x20000a94
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000454:	20000528 	.word	0x20000528
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000458:	200005b4 	.word	0x200005b4
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800045c:	200005b8 	.word	0x200005b8
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000460:	200005b0 	.word	0x200005b0
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000464:	200005ac 	.word	0x200005ac
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000468:	20000518 	.word	0x20000518
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800046c:	2000047c 	.word	0x2000047c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000470:	20000480 	.word	0x20000480
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000474:	e000ed04 	.word	0xe000ed04
	...

08000480 <memchr>:
 8000480:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000484:	2a10      	cmp	r2, #16
 8000486:	db2b      	blt.n	80004e0 <memchr+0x60>
 8000488:	f010 0f07 	tst.w	r0, #7
 800048c:	d008      	beq.n	80004a0 <memchr+0x20>
 800048e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000492:	3a01      	subs	r2, #1
 8000494:	428b      	cmp	r3, r1
 8000496:	d02d      	beq.n	80004f4 <memchr+0x74>
 8000498:	f010 0f07 	tst.w	r0, #7
 800049c:	b342      	cbz	r2, 80004f0 <memchr+0x70>
 800049e:	d1f6      	bne.n	800048e <memchr+0xe>
 80004a0:	b4f0      	push	{r4, r5, r6, r7}
 80004a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80004a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80004aa:	f022 0407 	bic.w	r4, r2, #7
 80004ae:	f07f 0700 	mvns.w	r7, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80004b8:	3c08      	subs	r4, #8
 80004ba:	ea85 0501 	eor.w	r5, r5, r1
 80004be:	ea86 0601 	eor.w	r6, r6, r1
 80004c2:	fa85 f547 	uadd8	r5, r5, r7
 80004c6:	faa3 f587 	sel	r5, r3, r7
 80004ca:	fa86 f647 	uadd8	r6, r6, r7
 80004ce:	faa5 f687 	sel	r6, r5, r7
 80004d2:	b98e      	cbnz	r6, 80004f8 <memchr+0x78>
 80004d4:	d1ee      	bne.n	80004b4 <memchr+0x34>
 80004d6:	bcf0      	pop	{r4, r5, r6, r7}
 80004d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80004dc:	f002 0207 	and.w	r2, r2, #7
 80004e0:	b132      	cbz	r2, 80004f0 <memchr+0x70>
 80004e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004e6:	3a01      	subs	r2, #1
 80004e8:	ea83 0301 	eor.w	r3, r3, r1
 80004ec:	b113      	cbz	r3, 80004f4 <memchr+0x74>
 80004ee:	d1f8      	bne.n	80004e2 <memchr+0x62>
 80004f0:	2000      	movs	r0, #0
 80004f2:	4770      	bx	lr
 80004f4:	3801      	subs	r0, #1
 80004f6:	4770      	bx	lr
 80004f8:	2d00      	cmp	r5, #0
 80004fa:	bf06      	itte	eq
 80004fc:	4635      	moveq	r5, r6
 80004fe:	3803      	subeq	r0, #3
 8000500:	3807      	subne	r0, #7
 8000502:	f015 0f01 	tst.w	r5, #1
 8000506:	d107      	bne.n	8000518 <memchr+0x98>
 8000508:	3001      	adds	r0, #1
 800050a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800050e:	bf02      	ittt	eq
 8000510:	3001      	addeq	r0, #1
 8000512:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000516:	3001      	addeq	r0, #1
 8000518:	bcf0      	pop	{r4, r5, r6, r7}
 800051a:	3801      	subs	r0, #1
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <strlen>:
 8000520:	4603      	mov	r3, r0
 8000522:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000526:	2a00      	cmp	r2, #0
 8000528:	d1fb      	bne.n	8000522 <strlen+0x2>
 800052a:	1a18      	subs	r0, r3, r0
 800052c:	3801      	subs	r0, #1
 800052e:	4770      	bx	lr

08000530 <__aeabi_drsub>:
 8000530:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000534:	e002      	b.n	800053c <__adddf3>
 8000536:	bf00      	nop

08000538 <__aeabi_dsub>:
 8000538:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800053c <__adddf3>:
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000542:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	bf1f      	itttt	ne
 8000552:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000556:	ea55 0c02 	orrsne.w	ip, r5, r2
 800055a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800055e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000562:	f000 80e2 	beq.w	800072a <__adddf3+0x1ee>
 8000566:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800056a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800056e:	bfb8      	it	lt
 8000570:	426d      	neglt	r5, r5
 8000572:	dd0c      	ble.n	800058e <__adddf3+0x52>
 8000574:	442c      	add	r4, r5
 8000576:	ea80 0202 	eor.w	r2, r0, r2
 800057a:	ea81 0303 	eor.w	r3, r1, r3
 800057e:	ea82 0000 	eor.w	r0, r2, r0
 8000582:	ea83 0101 	eor.w	r1, r3, r1
 8000586:	ea80 0202 	eor.w	r2, r0, r2
 800058a:	ea81 0303 	eor.w	r3, r1, r3
 800058e:	2d36      	cmp	r5, #54	@ 0x36
 8000590:	bf88      	it	hi
 8000592:	bd30      	pophi	{r4, r5, pc}
 8000594:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000598:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800059c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80005a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005a4:	d002      	beq.n	80005ac <__adddf3+0x70>
 80005a6:	4240      	negs	r0, r0
 80005a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80005b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005b8:	d002      	beq.n	80005c0 <__adddf3+0x84>
 80005ba:	4252      	negs	r2, r2
 80005bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005c0:	ea94 0f05 	teq	r4, r5
 80005c4:	f000 80a7 	beq.w	8000716 <__adddf3+0x1da>
 80005c8:	f1a4 0401 	sub.w	r4, r4, #1
 80005cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80005d0:	db0d      	blt.n	80005ee <__adddf3+0xb2>
 80005d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005d6:	fa22 f205 	lsr.w	r2, r2, r5
 80005da:	1880      	adds	r0, r0, r2
 80005dc:	f141 0100 	adc.w	r1, r1, #0
 80005e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80005e4:	1880      	adds	r0, r0, r2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	4159      	adcs	r1, r3
 80005ec:	e00e      	b.n	800060c <__adddf3+0xd0>
 80005ee:	f1a5 0520 	sub.w	r5, r5, #32
 80005f2:	f10e 0e20 	add.w	lr, lr, #32
 80005f6:	2a01      	cmp	r2, #1
 80005f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005fc:	bf28      	it	cs
 80005fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000602:	fa43 f305 	asr.w	r3, r3, r5
 8000606:	18c0      	adds	r0, r0, r3
 8000608:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800060c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000610:	d507      	bpl.n	8000622 <__adddf3+0xe6>
 8000612:	f04f 0e00 	mov.w	lr, #0
 8000616:	f1dc 0c00 	rsbs	ip, ip, #0
 800061a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800061e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000622:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000626:	d31b      	bcc.n	8000660 <__adddf3+0x124>
 8000628:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800062c:	d30c      	bcc.n	8000648 <__adddf3+0x10c>
 800062e:	0849      	lsrs	r1, r1, #1
 8000630:	ea5f 0030 	movs.w	r0, r0, rrx
 8000634:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000638:	f104 0401 	add.w	r4, r4, #1
 800063c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000640:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000644:	f080 809a 	bcs.w	800077c <__adddf3+0x240>
 8000648:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	ea41 0105 	orr.w	r1, r1, r5
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000664:	4140      	adcs	r0, r0
 8000666:	eb41 0101 	adc.w	r1, r1, r1
 800066a:	3c01      	subs	r4, #1
 800066c:	bf28      	it	cs
 800066e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000672:	d2e9      	bcs.n	8000648 <__adddf3+0x10c>
 8000674:	f091 0f00 	teq	r1, #0
 8000678:	bf04      	itt	eq
 800067a:	4601      	moveq	r1, r0
 800067c:	2000      	moveq	r0, #0
 800067e:	fab1 f381 	clz	r3, r1
 8000682:	bf08      	it	eq
 8000684:	3320      	addeq	r3, #32
 8000686:	f1a3 030b 	sub.w	r3, r3, #11
 800068a:	f1b3 0220 	subs.w	r2, r3, #32
 800068e:	da0c      	bge.n	80006aa <__adddf3+0x16e>
 8000690:	320c      	adds	r2, #12
 8000692:	dd08      	ble.n	80006a6 <__adddf3+0x16a>
 8000694:	f102 0c14 	add.w	ip, r2, #20
 8000698:	f1c2 020c 	rsb	r2, r2, #12
 800069c:	fa01 f00c 	lsl.w	r0, r1, ip
 80006a0:	fa21 f102 	lsr.w	r1, r1, r2
 80006a4:	e00c      	b.n	80006c0 <__adddf3+0x184>
 80006a6:	f102 0214 	add.w	r2, r2, #20
 80006aa:	bfd8      	it	le
 80006ac:	f1c2 0c20 	rsble	ip, r2, #32
 80006b0:	fa01 f102 	lsl.w	r1, r1, r2
 80006b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006b8:	bfdc      	itt	le
 80006ba:	ea41 010c 	orrle.w	r1, r1, ip
 80006be:	4090      	lslle	r0, r2
 80006c0:	1ae4      	subs	r4, r4, r3
 80006c2:	bfa2      	ittt	ge
 80006c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006c8:	4329      	orrge	r1, r5
 80006ca:	bd30      	popge	{r4, r5, pc}
 80006cc:	ea6f 0404 	mvn.w	r4, r4
 80006d0:	3c1f      	subs	r4, #31
 80006d2:	da1c      	bge.n	800070e <__adddf3+0x1d2>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc0e      	bgt.n	80006f6 <__adddf3+0x1ba>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0220 	rsb	r2, r4, #32
 80006e0:	fa20 f004 	lsr.w	r0, r0, r4
 80006e4:	fa01 f302 	lsl.w	r3, r1, r2
 80006e8:	ea40 0003 	orr.w	r0, r0, r3
 80006ec:	fa21 f304 	lsr.w	r3, r1, r4
 80006f0:	ea45 0103 	orr.w	r1, r5, r3
 80006f4:	bd30      	pop	{r4, r5, pc}
 80006f6:	f1c4 040c 	rsb	r4, r4, #12
 80006fa:	f1c4 0220 	rsb	r2, r4, #32
 80006fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000702:	fa01 f304 	lsl.w	r3, r1, r4
 8000706:	ea40 0003 	orr.w	r0, r0, r3
 800070a:	4629      	mov	r1, r5
 800070c:	bd30      	pop	{r4, r5, pc}
 800070e:	fa21 f004 	lsr.w	r0, r1, r4
 8000712:	4629      	mov	r1, r5
 8000714:	bd30      	pop	{r4, r5, pc}
 8000716:	f094 0f00 	teq	r4, #0
 800071a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800071e:	bf06      	itte	eq
 8000720:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000724:	3401      	addeq	r4, #1
 8000726:	3d01      	subne	r5, #1
 8000728:	e74e      	b.n	80005c8 <__adddf3+0x8c>
 800072a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800072e:	bf18      	it	ne
 8000730:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000734:	d029      	beq.n	800078a <__adddf3+0x24e>
 8000736:	ea94 0f05 	teq	r4, r5
 800073a:	bf08      	it	eq
 800073c:	ea90 0f02 	teqeq	r0, r2
 8000740:	d005      	beq.n	800074e <__adddf3+0x212>
 8000742:	ea54 0c00 	orrs.w	ip, r4, r0
 8000746:	bf04      	itt	eq
 8000748:	4619      	moveq	r1, r3
 800074a:	4610      	moveq	r0, r2
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea91 0f03 	teq	r1, r3
 8000752:	bf1e      	ittt	ne
 8000754:	2100      	movne	r1, #0
 8000756:	2000      	movne	r0, #0
 8000758:	bd30      	popne	{r4, r5, pc}
 800075a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800075e:	d105      	bne.n	800076c <__adddf3+0x230>
 8000760:	0040      	lsls	r0, r0, #1
 8000762:	4149      	adcs	r1, r1
 8000764:	bf28      	it	cs
 8000766:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800076a:	bd30      	pop	{r4, r5, pc}
 800076c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000770:	bf3c      	itt	cc
 8000772:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000776:	bd30      	popcc	{r4, r5, pc}
 8000778:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800077c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd30      	pop	{r4, r5, pc}
 800078a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800078e:	bf1a      	itte	ne
 8000790:	4619      	movne	r1, r3
 8000792:	4610      	movne	r0, r2
 8000794:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000798:	bf1c      	itt	ne
 800079a:	460b      	movne	r3, r1
 800079c:	4602      	movne	r2, r0
 800079e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007a2:	bf06      	itte	eq
 80007a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007a8:	ea91 0f03 	teqeq	r1, r3
 80007ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80007b0:	bd30      	pop	{r4, r5, pc}
 80007b2:	bf00      	nop

080007b4 <__aeabi_ui2d>:
 80007b4:	f090 0f00 	teq	r0, #0
 80007b8:	bf04      	itt	eq
 80007ba:	2100      	moveq	r1, #0
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007c8:	f04f 0500 	mov.w	r5, #0
 80007cc:	f04f 0100 	mov.w	r1, #0
 80007d0:	e750      	b.n	8000674 <__adddf3+0x138>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2d>:
 80007d4:	f090 0f00 	teq	r0, #0
 80007d8:	bf04      	itt	eq
 80007da:	2100      	moveq	r1, #0
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007ec:	bf48      	it	mi
 80007ee:	4240      	negmi	r0, r0
 80007f0:	f04f 0100 	mov.w	r1, #0
 80007f4:	e73e      	b.n	8000674 <__adddf3+0x138>
 80007f6:	bf00      	nop

080007f8 <__aeabi_f2d>:
 80007f8:	0042      	lsls	r2, r0, #1
 80007fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000802:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000806:	bf1f      	itttt	ne
 8000808:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800080c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000810:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000814:	4770      	bxne	lr
 8000816:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800081a:	bf08      	it	eq
 800081c:	4770      	bxeq	lr
 800081e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000822:	bf04      	itt	eq
 8000824:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000828:	4770      	bxeq	lr
 800082a:	b530      	push	{r4, r5, lr}
 800082c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000830:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000834:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	e71c      	b.n	8000674 <__adddf3+0x138>
 800083a:	bf00      	nop

0800083c <__aeabi_ul2d>:
 800083c:	ea50 0201 	orrs.w	r2, r0, r1
 8000840:	bf08      	it	eq
 8000842:	4770      	bxeq	lr
 8000844:	b530      	push	{r4, r5, lr}
 8000846:	f04f 0500 	mov.w	r5, #0
 800084a:	e00a      	b.n	8000862 <__aeabi_l2d+0x16>

0800084c <__aeabi_l2d>:
 800084c:	ea50 0201 	orrs.w	r2, r0, r1
 8000850:	bf08      	it	eq
 8000852:	4770      	bxeq	lr
 8000854:	b530      	push	{r4, r5, lr}
 8000856:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800085a:	d502      	bpl.n	8000862 <__aeabi_l2d+0x16>
 800085c:	4240      	negs	r0, r0
 800085e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000862:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000866:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800086a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800086e:	f43f aed8 	beq.w	8000622 <__adddf3+0xe6>
 8000872:	f04f 0203 	mov.w	r2, #3
 8000876:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800087a:	bf18      	it	ne
 800087c:	3203      	addne	r2, #3
 800087e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000882:	bf18      	it	ne
 8000884:	3203      	addne	r2, #3
 8000886:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800088a:	f1c2 0320 	rsb	r3, r2, #32
 800088e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000892:	fa20 f002 	lsr.w	r0, r0, r2
 8000896:	fa01 fe03 	lsl.w	lr, r1, r3
 800089a:	ea40 000e 	orr.w	r0, r0, lr
 800089e:	fa21 f102 	lsr.w	r1, r1, r2
 80008a2:	4414      	add	r4, r2
 80008a4:	e6bd      	b.n	8000622 <__adddf3+0xe6>
 80008a6:	bf00      	nop

080008a8 <__aeabi_dmul>:
 80008a8:	b570      	push	{r4, r5, r6, lr}
 80008aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b6:	bf1d      	ittte	ne
 80008b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008bc:	ea94 0f0c 	teqne	r4, ip
 80008c0:	ea95 0f0c 	teqne	r5, ip
 80008c4:	f000 f8de 	bleq	8000a84 <__aeabi_dmul+0x1dc>
 80008c8:	442c      	add	r4, r5
 80008ca:	ea81 0603 	eor.w	r6, r1, r3
 80008ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80008d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80008d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80008da:	bf18      	it	ne
 80008dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80008e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80008e8:	d038      	beq.n	800095c <__aeabi_dmul+0xb4>
 80008ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80008ee:	f04f 0500 	mov.w	r5, #0
 80008f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80008f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80008fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80008fe:	f04f 0600 	mov.w	r6, #0
 8000902:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000906:	f09c 0f00 	teq	ip, #0
 800090a:	bf18      	it	ne
 800090c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000910:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000914:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000918:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800091c:	d204      	bcs.n	8000928 <__aeabi_dmul+0x80>
 800091e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000922:	416d      	adcs	r5, r5
 8000924:	eb46 0606 	adc.w	r6, r6, r6
 8000928:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800092c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000930:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000934:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000938:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800093c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000940:	bf88      	it	hi
 8000942:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000946:	d81e      	bhi.n	8000986 <__aeabi_dmul+0xde>
 8000948:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800094c:	bf08      	it	eq
 800094e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000952:	f150 0000 	adcs.w	r0, r0, #0
 8000956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000960:	ea46 0101 	orr.w	r1, r6, r1
 8000964:	ea40 0002 	orr.w	r0, r0, r2
 8000968:	ea81 0103 	eor.w	r1, r1, r3
 800096c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000970:	bfc2      	ittt	gt
 8000972:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000976:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800097a:	bd70      	popgt	{r4, r5, r6, pc}
 800097c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000980:	f04f 0e00 	mov.w	lr, #0
 8000984:	3c01      	subs	r4, #1
 8000986:	f300 80ab 	bgt.w	8000ae0 <__aeabi_dmul+0x238>
 800098a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800098e:	bfde      	ittt	le
 8000990:	2000      	movle	r0, #0
 8000992:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000996:	bd70      	pople	{r4, r5, r6, pc}
 8000998:	f1c4 0400 	rsb	r4, r4, #0
 800099c:	3c20      	subs	r4, #32
 800099e:	da35      	bge.n	8000a0c <__aeabi_dmul+0x164>
 80009a0:	340c      	adds	r4, #12
 80009a2:	dc1b      	bgt.n	80009dc <__aeabi_dmul+0x134>
 80009a4:	f104 0414 	add.w	r4, r4, #20
 80009a8:	f1c4 0520 	rsb	r5, r4, #32
 80009ac:	fa00 f305 	lsl.w	r3, r0, r5
 80009b0:	fa20 f004 	lsr.w	r0, r0, r4
 80009b4:	fa01 f205 	lsl.w	r2, r1, r5
 80009b8:	ea40 0002 	orr.w	r0, r0, r2
 80009bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80009c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80009c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009c8:	fa21 f604 	lsr.w	r6, r1, r4
 80009cc:	eb42 0106 	adc.w	r1, r2, r6
 80009d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009d4:	bf08      	it	eq
 80009d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009da:	bd70      	pop	{r4, r5, r6, pc}
 80009dc:	f1c4 040c 	rsb	r4, r4, #12
 80009e0:	f1c4 0520 	rsb	r5, r4, #32
 80009e4:	fa00 f304 	lsl.w	r3, r0, r4
 80009e8:	fa20 f005 	lsr.w	r0, r0, r5
 80009ec:	fa01 f204 	lsl.w	r2, r1, r4
 80009f0:	ea40 0002 	orr.w	r0, r0, r2
 80009f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80009f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009fc:	f141 0100 	adc.w	r1, r1, #0
 8000a00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a04:	bf08      	it	eq
 8000a06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a0a:	bd70      	pop	{r4, r5, r6, pc}
 8000a0c:	f1c4 0520 	rsb	r5, r4, #32
 8000a10:	fa00 f205 	lsl.w	r2, r0, r5
 8000a14:	ea4e 0e02 	orr.w	lr, lr, r2
 8000a18:	fa20 f304 	lsr.w	r3, r0, r4
 8000a1c:	fa01 f205 	lsl.w	r2, r1, r5
 8000a20:	ea43 0302 	orr.w	r3, r3, r2
 8000a24:	fa21 f004 	lsr.w	r0, r1, r4
 8000a28:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000a2c:	fa21 f204 	lsr.w	r2, r1, r4
 8000a30:	ea20 0002 	bic.w	r0, r0, r2
 8000a34:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000a38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a3c:	bf08      	it	eq
 8000a3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a42:	bd70      	pop	{r4, r5, r6, pc}
 8000a44:	f094 0f00 	teq	r4, #0
 8000a48:	d10f      	bne.n	8000a6a <__aeabi_dmul+0x1c2>
 8000a4a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000a4e:	0040      	lsls	r0, r0, #1
 8000a50:	eb41 0101 	adc.w	r1, r1, r1
 8000a54:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a58:	bf08      	it	eq
 8000a5a:	3c01      	subeq	r4, #1
 8000a5c:	d0f7      	beq.n	8000a4e <__aeabi_dmul+0x1a6>
 8000a5e:	ea41 0106 	orr.w	r1, r1, r6
 8000a62:	f095 0f00 	teq	r5, #0
 8000a66:	bf18      	it	ne
 8000a68:	4770      	bxne	lr
 8000a6a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000a6e:	0052      	lsls	r2, r2, #1
 8000a70:	eb43 0303 	adc.w	r3, r3, r3
 8000a74:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000a78:	bf08      	it	eq
 8000a7a:	3d01      	subeq	r5, #1
 8000a7c:	d0f7      	beq.n	8000a6e <__aeabi_dmul+0x1c6>
 8000a7e:	ea43 0306 	orr.w	r3, r3, r6
 8000a82:	4770      	bx	lr
 8000a84:	ea94 0f0c 	teq	r4, ip
 8000a88:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a8c:	bf18      	it	ne
 8000a8e:	ea95 0f0c 	teqne	r5, ip
 8000a92:	d00c      	beq.n	8000aae <__aeabi_dmul+0x206>
 8000a94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a98:	bf18      	it	ne
 8000a9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a9e:	d1d1      	bne.n	8000a44 <__aeabi_dmul+0x19c>
 8000aa0:	ea81 0103 	eor.w	r1, r1, r3
 8000aa4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000aa8:	f04f 0000 	mov.w	r0, #0
 8000aac:	bd70      	pop	{r4, r5, r6, pc}
 8000aae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab2:	bf06      	itte	eq
 8000ab4:	4610      	moveq	r0, r2
 8000ab6:	4619      	moveq	r1, r3
 8000ab8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000abc:	d019      	beq.n	8000af2 <__aeabi_dmul+0x24a>
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	d102      	bne.n	8000aca <__aeabi_dmul+0x222>
 8000ac4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000ac8:	d113      	bne.n	8000af2 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	d105      	bne.n	8000adc <__aeabi_dmul+0x234>
 8000ad0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000ad4:	bf1c      	itt	ne
 8000ad6:	4610      	movne	r0, r2
 8000ad8:	4619      	movne	r1, r3
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dmul+0x24a>
 8000adc:	ea81 0103 	eor.w	r1, r1, r3
 8000ae0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000ae4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000ae8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	bd70      	pop	{r4, r5, r6, pc}
 8000af2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000af6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000afa:	bd70      	pop	{r4, r5, r6, pc}

08000afc <__aeabi_ddiv>:
 8000afc:	b570      	push	{r4, r5, r6, lr}
 8000afe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b02:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000b06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000b0a:	bf1d      	ittte	ne
 8000b0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000b10:	ea94 0f0c 	teqne	r4, ip
 8000b14:	ea95 0f0c 	teqne	r5, ip
 8000b18:	f000 f8a7 	bleq	8000c6a <__aeabi_ddiv+0x16e>
 8000b1c:	eba4 0405 	sub.w	r4, r4, r5
 8000b20:	ea81 0e03 	eor.w	lr, r1, r3
 8000b24:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b28:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b2c:	f000 8088 	beq.w	8000c40 <__aeabi_ddiv+0x144>
 8000b30:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000b34:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000b38:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000b3c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000b40:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000b44:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000b48:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b4c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b50:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000b54:	429d      	cmp	r5, r3
 8000b56:	bf08      	it	eq
 8000b58:	4296      	cmpeq	r6, r2
 8000b5a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000b5e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000b62:	d202      	bcs.n	8000b6a <__aeabi_ddiv+0x6e>
 8000b64:	085b      	lsrs	r3, r3, #1
 8000b66:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b6a:	1ab6      	subs	r6, r6, r2
 8000b6c:	eb65 0503 	sbc.w	r5, r5, r3
 8000b70:	085b      	lsrs	r3, r3, #1
 8000b72:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b76:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000b7a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000b7e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b82:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b86:	bf22      	ittt	cs
 8000b88:	1ab6      	subcs	r6, r6, r2
 8000b8a:	4675      	movcs	r5, lr
 8000b8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b90:	085b      	lsrs	r3, r3, #1
 8000b92:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b96:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b9e:	bf22      	ittt	cs
 8000ba0:	1ab6      	subcs	r6, r6, r2
 8000ba2:	4675      	movcs	r5, lr
 8000ba4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ba8:	085b      	lsrs	r3, r3, #1
 8000baa:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bae:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bb2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bb6:	bf22      	ittt	cs
 8000bb8:	1ab6      	subcs	r6, r6, r2
 8000bba:	4675      	movcs	r5, lr
 8000bbc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bc0:	085b      	lsrs	r3, r3, #1
 8000bc2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bc6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bca:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bce:	bf22      	ittt	cs
 8000bd0:	1ab6      	subcs	r6, r6, r2
 8000bd2:	4675      	movcs	r5, lr
 8000bd4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bd8:	ea55 0e06 	orrs.w	lr, r5, r6
 8000bdc:	d018      	beq.n	8000c10 <__aeabi_ddiv+0x114>
 8000bde:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000be2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000be6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000bea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000bee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000bf2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000bf6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000bfa:	d1c0      	bne.n	8000b7e <__aeabi_ddiv+0x82>
 8000bfc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000c00:	d10b      	bne.n	8000c1a <__aeabi_ddiv+0x11e>
 8000c02:	ea41 0100 	orr.w	r1, r1, r0
 8000c06:	f04f 0000 	mov.w	r0, #0
 8000c0a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000c0e:	e7b6      	b.n	8000b7e <__aeabi_ddiv+0x82>
 8000c10:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000c14:	bf04      	itt	eq
 8000c16:	4301      	orreq	r1, r0
 8000c18:	2000      	moveq	r0, #0
 8000c1a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000c1e:	bf88      	it	hi
 8000c20:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000c24:	f63f aeaf 	bhi.w	8000986 <__aeabi_dmul+0xde>
 8000c28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000c2c:	bf04      	itt	eq
 8000c2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000c32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000c36:	f150 0000 	adcs.w	r0, r0, #0
 8000c3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c3e:	bd70      	pop	{r4, r5, r6, pc}
 8000c40:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000c44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000c48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c4c:	bfc2      	ittt	gt
 8000c4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c56:	bd70      	popgt	{r4, r5, r6, pc}
 8000c58:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5c:	f04f 0e00 	mov.w	lr, #0
 8000c60:	3c01      	subs	r4, #1
 8000c62:	e690      	b.n	8000986 <__aeabi_dmul+0xde>
 8000c64:	ea45 0e06 	orr.w	lr, r5, r6
 8000c68:	e68d      	b.n	8000986 <__aeabi_dmul+0xde>
 8000c6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c6e:	ea94 0f0c 	teq	r4, ip
 8000c72:	bf08      	it	eq
 8000c74:	ea95 0f0c 	teqeq	r5, ip
 8000c78:	f43f af3b 	beq.w	8000af2 <__aeabi_dmul+0x24a>
 8000c7c:	ea94 0f0c 	teq	r4, ip
 8000c80:	d10a      	bne.n	8000c98 <__aeabi_ddiv+0x19c>
 8000c82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c86:	f47f af34 	bne.w	8000af2 <__aeabi_dmul+0x24a>
 8000c8a:	ea95 0f0c 	teq	r5, ip
 8000c8e:	f47f af25 	bne.w	8000adc <__aeabi_dmul+0x234>
 8000c92:	4610      	mov	r0, r2
 8000c94:	4619      	mov	r1, r3
 8000c96:	e72c      	b.n	8000af2 <__aeabi_dmul+0x24a>
 8000c98:	ea95 0f0c 	teq	r5, ip
 8000c9c:	d106      	bne.n	8000cac <__aeabi_ddiv+0x1b0>
 8000c9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ca2:	f43f aefd 	beq.w	8000aa0 <__aeabi_dmul+0x1f8>
 8000ca6:	4610      	mov	r0, r2
 8000ca8:	4619      	mov	r1, r3
 8000caa:	e722      	b.n	8000af2 <__aeabi_dmul+0x24a>
 8000cac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000cb0:	bf18      	it	ne
 8000cb2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000cb6:	f47f aec5 	bne.w	8000a44 <__aeabi_dmul+0x19c>
 8000cba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000cbe:	f47f af0d 	bne.w	8000adc <__aeabi_dmul+0x234>
 8000cc2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000cc6:	f47f aeeb 	bne.w	8000aa0 <__aeabi_dmul+0x1f8>
 8000cca:	e712      	b.n	8000af2 <__aeabi_dmul+0x24a>

08000ccc <__gedf2>:
 8000ccc:	f04f 3cff 	mov.w	ip, #4294967295
 8000cd0:	e006      	b.n	8000ce0 <__cmpdf2+0x4>
 8000cd2:	bf00      	nop

08000cd4 <__ledf2>:
 8000cd4:	f04f 0c01 	mov.w	ip, #1
 8000cd8:	e002      	b.n	8000ce0 <__cmpdf2+0x4>
 8000cda:	bf00      	nop

08000cdc <__cmpdf2>:
 8000cdc:	f04f 0c01 	mov.w	ip, #1
 8000ce0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ce4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ce8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000cf6:	d01b      	beq.n	8000d30 <__cmpdf2+0x54>
 8000cf8:	b001      	add	sp, #4
 8000cfa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000cfe:	bf0c      	ite	eq
 8000d00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000d04:	ea91 0f03 	teqne	r1, r3
 8000d08:	bf02      	ittt	eq
 8000d0a:	ea90 0f02 	teqeq	r0, r2
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	4770      	bxeq	lr
 8000d12:	f110 0f00 	cmn.w	r0, #0
 8000d16:	ea91 0f03 	teq	r1, r3
 8000d1a:	bf58      	it	pl
 8000d1c:	4299      	cmppl	r1, r3
 8000d1e:	bf08      	it	eq
 8000d20:	4290      	cmpeq	r0, r2
 8000d22:	bf2c      	ite	cs
 8000d24:	17d8      	asrcs	r0, r3, #31
 8000d26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000d2a:	f040 0001 	orr.w	r0, r0, #1
 8000d2e:	4770      	bx	lr
 8000d30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d38:	d102      	bne.n	8000d40 <__cmpdf2+0x64>
 8000d3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d3e:	d107      	bne.n	8000d50 <__cmpdf2+0x74>
 8000d40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d48:	d1d6      	bne.n	8000cf8 <__cmpdf2+0x1c>
 8000d4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d4e:	d0d3      	beq.n	8000cf8 <__cmpdf2+0x1c>
 8000d50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <__aeabi_cdrcmple>:
 8000d58:	4684      	mov	ip, r0
 8000d5a:	4610      	mov	r0, r2
 8000d5c:	4662      	mov	r2, ip
 8000d5e:	468c      	mov	ip, r1
 8000d60:	4619      	mov	r1, r3
 8000d62:	4663      	mov	r3, ip
 8000d64:	e000      	b.n	8000d68 <__aeabi_cdcmpeq>
 8000d66:	bf00      	nop

08000d68 <__aeabi_cdcmpeq>:
 8000d68:	b501      	push	{r0, lr}
 8000d6a:	f7ff ffb7 	bl	8000cdc <__cmpdf2>
 8000d6e:	2800      	cmp	r0, #0
 8000d70:	bf48      	it	mi
 8000d72:	f110 0f00 	cmnmi.w	r0, #0
 8000d76:	bd01      	pop	{r0, pc}

08000d78 <__aeabi_dcmpeq>:
 8000d78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d7c:	f7ff fff4 	bl	8000d68 <__aeabi_cdcmpeq>
 8000d80:	bf0c      	ite	eq
 8000d82:	2001      	moveq	r0, #1
 8000d84:	2000      	movne	r0, #0
 8000d86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8a:	bf00      	nop

08000d8c <__aeabi_dcmplt>:
 8000d8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d90:	f7ff ffea 	bl	8000d68 <__aeabi_cdcmpeq>
 8000d94:	bf34      	ite	cc
 8000d96:	2001      	movcc	r0, #1
 8000d98:	2000      	movcs	r0, #0
 8000d9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d9e:	bf00      	nop

08000da0 <__aeabi_dcmple>:
 8000da0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000da4:	f7ff ffe0 	bl	8000d68 <__aeabi_cdcmpeq>
 8000da8:	bf94      	ite	ls
 8000daa:	2001      	movls	r0, #1
 8000dac:	2000      	movhi	r0, #0
 8000dae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000db2:	bf00      	nop

08000db4 <__aeabi_dcmpge>:
 8000db4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000db8:	f7ff ffce 	bl	8000d58 <__aeabi_cdrcmple>
 8000dbc:	bf94      	ite	ls
 8000dbe:	2001      	movls	r0, #1
 8000dc0:	2000      	movhi	r0, #0
 8000dc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_dcmpgt>:
 8000dc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dcc:	f7ff ffc4 	bl	8000d58 <__aeabi_cdrcmple>
 8000dd0:	bf34      	ite	cc
 8000dd2:	2001      	movcc	r0, #1
 8000dd4:	2000      	movcs	r0, #0
 8000dd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dda:	bf00      	nop

08000ddc <__aeabi_dcmpun>:
 8000ddc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000de0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000de4:	d102      	bne.n	8000dec <__aeabi_dcmpun+0x10>
 8000de6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000dea:	d10a      	bne.n	8000e02 <__aeabi_dcmpun+0x26>
 8000dec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000df0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000df4:	d102      	bne.n	8000dfc <__aeabi_dcmpun+0x20>
 8000df6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000dfa:	d102      	bne.n	8000e02 <__aeabi_dcmpun+0x26>
 8000dfc:	f04f 0000 	mov.w	r0, #0
 8000e00:	4770      	bx	lr
 8000e02:	f04f 0001 	mov.w	r0, #1
 8000e06:	4770      	bx	lr

08000e08 <__aeabi_d2iz>:
 8000e08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000e10:	d215      	bcs.n	8000e3e <__aeabi_d2iz+0x36>
 8000e12:	d511      	bpl.n	8000e38 <__aeabi_d2iz+0x30>
 8000e14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000e18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e1c:	d912      	bls.n	8000e44 <__aeabi_d2iz+0x3c>
 8000e1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000e2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000e32:	bf18      	it	ne
 8000e34:	4240      	negne	r0, r0
 8000e36:	4770      	bx	lr
 8000e38:	f04f 0000 	mov.w	r0, #0
 8000e3c:	4770      	bx	lr
 8000e3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e42:	d105      	bne.n	8000e50 <__aeabi_d2iz+0x48>
 8000e44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000e48:	bf08      	it	eq
 8000e4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000e4e:	4770      	bx	lr
 8000e50:	f04f 0000 	mov.w	r0, #0
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <__aeabi_uldivmod>:
 8000e58:	b953      	cbnz	r3, 8000e70 <__aeabi_uldivmod+0x18>
 8000e5a:	b94a      	cbnz	r2, 8000e70 <__aeabi_uldivmod+0x18>
 8000e5c:	2900      	cmp	r1, #0
 8000e5e:	bf08      	it	eq
 8000e60:	2800      	cmpeq	r0, #0
 8000e62:	bf1c      	itt	ne
 8000e64:	f04f 31ff 	movne.w	r1, #4294967295
 8000e68:	f04f 30ff 	movne.w	r0, #4294967295
 8000e6c:	f000 b96a 	b.w	8001144 <__aeabi_idiv0>
 8000e70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e78:	f000 f806 	bl	8000e88 <__udivmoddi4>
 8000e7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e84:	b004      	add	sp, #16
 8000e86:	4770      	bx	lr

08000e88 <__udivmoddi4>:
 8000e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e8c:	9d08      	ldr	r5, [sp, #32]
 8000e8e:	460c      	mov	r4, r1
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d14e      	bne.n	8000f32 <__udivmoddi4+0xaa>
 8000e94:	4694      	mov	ip, r2
 8000e96:	458c      	cmp	ip, r1
 8000e98:	4686      	mov	lr, r0
 8000e9a:	fab2 f282 	clz	r2, r2
 8000e9e:	d962      	bls.n	8000f66 <__udivmoddi4+0xde>
 8000ea0:	b14a      	cbz	r2, 8000eb6 <__udivmoddi4+0x2e>
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	4091      	lsls	r1, r2
 8000ea8:	fa20 f303 	lsr.w	r3, r0, r3
 8000eac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb0:	4319      	orrs	r1, r3
 8000eb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eba:	fa1f f68c 	uxth.w	r6, ip
 8000ebe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ec2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ec6:	fb07 1114 	mls	r1, r7, r4, r1
 8000eca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ece:	fb04 f106 	mul.w	r1, r4, r6
 8000ed2:	4299      	cmp	r1, r3
 8000ed4:	d90a      	bls.n	8000eec <__udivmoddi4+0x64>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ede:	f080 8112 	bcs.w	8001106 <__udivmoddi4+0x27e>
 8000ee2:	4299      	cmp	r1, r3
 8000ee4:	f240 810f 	bls.w	8001106 <__udivmoddi4+0x27e>
 8000ee8:	3c02      	subs	r4, #2
 8000eea:	4463      	add	r3, ip
 8000eec:	1a59      	subs	r1, r3, r1
 8000eee:	fa1f f38e 	uxth.w	r3, lr
 8000ef2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef6:	fb07 1110 	mls	r1, r7, r0, r1
 8000efa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efe:	fb00 f606 	mul.w	r6, r0, r6
 8000f02:	429e      	cmp	r6, r3
 8000f04:	d90a      	bls.n	8000f1c <__udivmoddi4+0x94>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f0e:	f080 80fc 	bcs.w	800110a <__udivmoddi4+0x282>
 8000f12:	429e      	cmp	r6, r3
 8000f14:	f240 80f9 	bls.w	800110a <__udivmoddi4+0x282>
 8000f18:	4463      	add	r3, ip
 8000f1a:	3802      	subs	r0, #2
 8000f1c:	1b9b      	subs	r3, r3, r6
 8000f1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000f22:	2100      	movs	r1, #0
 8000f24:	b11d      	cbz	r5, 8000f2e <__udivmoddi4+0xa6>
 8000f26:	40d3      	lsrs	r3, r2
 8000f28:	2200      	movs	r2, #0
 8000f2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d905      	bls.n	8000f42 <__udivmoddi4+0xba>
 8000f36:	b10d      	cbz	r5, 8000f3c <__udivmoddi4+0xb4>
 8000f38:	e9c5 0100 	strd	r0, r1, [r5]
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4608      	mov	r0, r1
 8000f40:	e7f5      	b.n	8000f2e <__udivmoddi4+0xa6>
 8000f42:	fab3 f183 	clz	r1, r3
 8000f46:	2900      	cmp	r1, #0
 8000f48:	d146      	bne.n	8000fd8 <__udivmoddi4+0x150>
 8000f4a:	42a3      	cmp	r3, r4
 8000f4c:	d302      	bcc.n	8000f54 <__udivmoddi4+0xcc>
 8000f4e:	4290      	cmp	r0, r2
 8000f50:	f0c0 80f0 	bcc.w	8001134 <__udivmoddi4+0x2ac>
 8000f54:	1a86      	subs	r6, r0, r2
 8000f56:	eb64 0303 	sbc.w	r3, r4, r3
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d0e6      	beq.n	8000f2e <__udivmoddi4+0xa6>
 8000f60:	e9c5 6300 	strd	r6, r3, [r5]
 8000f64:	e7e3      	b.n	8000f2e <__udivmoddi4+0xa6>
 8000f66:	2a00      	cmp	r2, #0
 8000f68:	f040 8090 	bne.w	800108c <__udivmoddi4+0x204>
 8000f6c:	eba1 040c 	sub.w	r4, r1, ip
 8000f70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	2101      	movs	r1, #1
 8000f7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f82:	fb08 4416 	mls	r4, r8, r6, r4
 8000f86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f8a:	fb07 f006 	mul.w	r0, r7, r6
 8000f8e:	4298      	cmp	r0, r3
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x11c>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f9a:	d202      	bcs.n	8000fa2 <__udivmoddi4+0x11a>
 8000f9c:	4298      	cmp	r0, r3
 8000f9e:	f200 80cd 	bhi.w	800113c <__udivmoddi4+0x2b4>
 8000fa2:	4626      	mov	r6, r4
 8000fa4:	1a1c      	subs	r4, r3, r0
 8000fa6:	fa1f f38e 	uxth.w	r3, lr
 8000faa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000fae:	fb08 4410 	mls	r4, r8, r0, r4
 8000fb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000fb6:	fb00 f707 	mul.w	r7, r0, r7
 8000fba:	429f      	cmp	r7, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x148>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fc6:	d202      	bcs.n	8000fce <__udivmoddi4+0x146>
 8000fc8:	429f      	cmp	r7, r3
 8000fca:	f200 80b0 	bhi.w	800112e <__udivmoddi4+0x2a6>
 8000fce:	4620      	mov	r0, r4
 8000fd0:	1bdb      	subs	r3, r3, r7
 8000fd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000fd6:	e7a5      	b.n	8000f24 <__udivmoddi4+0x9c>
 8000fd8:	f1c1 0620 	rsb	r6, r1, #32
 8000fdc:	408b      	lsls	r3, r1
 8000fde:	fa22 f706 	lsr.w	r7, r2, r6
 8000fe2:	431f      	orrs	r7, r3
 8000fe4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000fe8:	fa04 f301 	lsl.w	r3, r4, r1
 8000fec:	ea43 030c 	orr.w	r3, r3, ip
 8000ff0:	40f4      	lsrs	r4, r6
 8000ff2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ff6:	0c38      	lsrs	r0, r7, #16
 8000ff8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ffc:	fbb4 fef0 	udiv	lr, r4, r0
 8001000:	fa1f fc87 	uxth.w	ip, r7
 8001004:	fb00 441e 	mls	r4, r0, lr, r4
 8001008:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800100c:	fb0e f90c 	mul.w	r9, lr, ip
 8001010:	45a1      	cmp	r9, r4
 8001012:	fa02 f201 	lsl.w	r2, r2, r1
 8001016:	d90a      	bls.n	800102e <__udivmoddi4+0x1a6>
 8001018:	193c      	adds	r4, r7, r4
 800101a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800101e:	f080 8084 	bcs.w	800112a <__udivmoddi4+0x2a2>
 8001022:	45a1      	cmp	r9, r4
 8001024:	f240 8081 	bls.w	800112a <__udivmoddi4+0x2a2>
 8001028:	f1ae 0e02 	sub.w	lr, lr, #2
 800102c:	443c      	add	r4, r7
 800102e:	eba4 0409 	sub.w	r4, r4, r9
 8001032:	fa1f f983 	uxth.w	r9, r3
 8001036:	fbb4 f3f0 	udiv	r3, r4, r0
 800103a:	fb00 4413 	mls	r4, r0, r3, r4
 800103e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001042:	fb03 fc0c 	mul.w	ip, r3, ip
 8001046:	45a4      	cmp	ip, r4
 8001048:	d907      	bls.n	800105a <__udivmoddi4+0x1d2>
 800104a:	193c      	adds	r4, r7, r4
 800104c:	f103 30ff 	add.w	r0, r3, #4294967295
 8001050:	d267      	bcs.n	8001122 <__udivmoddi4+0x29a>
 8001052:	45a4      	cmp	ip, r4
 8001054:	d965      	bls.n	8001122 <__udivmoddi4+0x29a>
 8001056:	3b02      	subs	r3, #2
 8001058:	443c      	add	r4, r7
 800105a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800105e:	fba0 9302 	umull	r9, r3, r0, r2
 8001062:	eba4 040c 	sub.w	r4, r4, ip
 8001066:	429c      	cmp	r4, r3
 8001068:	46ce      	mov	lr, r9
 800106a:	469c      	mov	ip, r3
 800106c:	d351      	bcc.n	8001112 <__udivmoddi4+0x28a>
 800106e:	d04e      	beq.n	800110e <__udivmoddi4+0x286>
 8001070:	b155      	cbz	r5, 8001088 <__udivmoddi4+0x200>
 8001072:	ebb8 030e 	subs.w	r3, r8, lr
 8001076:	eb64 040c 	sbc.w	r4, r4, ip
 800107a:	fa04 f606 	lsl.w	r6, r4, r6
 800107e:	40cb      	lsrs	r3, r1
 8001080:	431e      	orrs	r6, r3
 8001082:	40cc      	lsrs	r4, r1
 8001084:	e9c5 6400 	strd	r6, r4, [r5]
 8001088:	2100      	movs	r1, #0
 800108a:	e750      	b.n	8000f2e <__udivmoddi4+0xa6>
 800108c:	f1c2 0320 	rsb	r3, r2, #32
 8001090:	fa20 f103 	lsr.w	r1, r0, r3
 8001094:	fa0c fc02 	lsl.w	ip, ip, r2
 8001098:	fa24 f303 	lsr.w	r3, r4, r3
 800109c:	4094      	lsls	r4, r2
 800109e:	430c      	orrs	r4, r1
 80010a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80010a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80010a8:	fa1f f78c 	uxth.w	r7, ip
 80010ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80010b0:	fb08 3110 	mls	r1, r8, r0, r3
 80010b4:	0c23      	lsrs	r3, r4, #16
 80010b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010ba:	fb00 f107 	mul.w	r1, r0, r7
 80010be:	4299      	cmp	r1, r3
 80010c0:	d908      	bls.n	80010d4 <__udivmoddi4+0x24c>
 80010c2:	eb1c 0303 	adds.w	r3, ip, r3
 80010c6:	f100 36ff 	add.w	r6, r0, #4294967295
 80010ca:	d22c      	bcs.n	8001126 <__udivmoddi4+0x29e>
 80010cc:	4299      	cmp	r1, r3
 80010ce:	d92a      	bls.n	8001126 <__udivmoddi4+0x29e>
 80010d0:	3802      	subs	r0, #2
 80010d2:	4463      	add	r3, ip
 80010d4:	1a5b      	subs	r3, r3, r1
 80010d6:	b2a4      	uxth	r4, r4
 80010d8:	fbb3 f1f8 	udiv	r1, r3, r8
 80010dc:	fb08 3311 	mls	r3, r8, r1, r3
 80010e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010e4:	fb01 f307 	mul.w	r3, r1, r7
 80010e8:	42a3      	cmp	r3, r4
 80010ea:	d908      	bls.n	80010fe <__udivmoddi4+0x276>
 80010ec:	eb1c 0404 	adds.w	r4, ip, r4
 80010f0:	f101 36ff 	add.w	r6, r1, #4294967295
 80010f4:	d213      	bcs.n	800111e <__udivmoddi4+0x296>
 80010f6:	42a3      	cmp	r3, r4
 80010f8:	d911      	bls.n	800111e <__udivmoddi4+0x296>
 80010fa:	3902      	subs	r1, #2
 80010fc:	4464      	add	r4, ip
 80010fe:	1ae4      	subs	r4, r4, r3
 8001100:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001104:	e739      	b.n	8000f7a <__udivmoddi4+0xf2>
 8001106:	4604      	mov	r4, r0
 8001108:	e6f0      	b.n	8000eec <__udivmoddi4+0x64>
 800110a:	4608      	mov	r0, r1
 800110c:	e706      	b.n	8000f1c <__udivmoddi4+0x94>
 800110e:	45c8      	cmp	r8, r9
 8001110:	d2ae      	bcs.n	8001070 <__udivmoddi4+0x1e8>
 8001112:	ebb9 0e02 	subs.w	lr, r9, r2
 8001116:	eb63 0c07 	sbc.w	ip, r3, r7
 800111a:	3801      	subs	r0, #1
 800111c:	e7a8      	b.n	8001070 <__udivmoddi4+0x1e8>
 800111e:	4631      	mov	r1, r6
 8001120:	e7ed      	b.n	80010fe <__udivmoddi4+0x276>
 8001122:	4603      	mov	r3, r0
 8001124:	e799      	b.n	800105a <__udivmoddi4+0x1d2>
 8001126:	4630      	mov	r0, r6
 8001128:	e7d4      	b.n	80010d4 <__udivmoddi4+0x24c>
 800112a:	46d6      	mov	lr, sl
 800112c:	e77f      	b.n	800102e <__udivmoddi4+0x1a6>
 800112e:	4463      	add	r3, ip
 8001130:	3802      	subs	r0, #2
 8001132:	e74d      	b.n	8000fd0 <__udivmoddi4+0x148>
 8001134:	4606      	mov	r6, r0
 8001136:	4623      	mov	r3, r4
 8001138:	4608      	mov	r0, r1
 800113a:	e70f      	b.n	8000f5c <__udivmoddi4+0xd4>
 800113c:	3e02      	subs	r6, #2
 800113e:	4463      	add	r3, ip
 8001140:	e730      	b.n	8000fa4 <__udivmoddi4+0x11c>
 8001142:	bf00      	nop

08001144 <__aeabi_idiv0>:
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop

08001148 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800115e:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <MX_GPIO_Init+0x78>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001162:	4a17      	ldr	r2, [pc, #92]	@ (80011c0 <MX_GPIO_Init+0x78>)
 8001164:	f043 0320 	orr.w	r3, r3, #32
 8001168:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <MX_GPIO_Init+0x78>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <MX_GPIO_Init+0x78>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117a:	4a11      	ldr	r2, [pc, #68]	@ (80011c0 <MX_GPIO_Init+0x78>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001182:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <MX_GPIO_Init+0x78>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	2120      	movs	r1, #32
 8001192:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001196:	f000 fde3 	bl	8001d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800119a:	2320      	movs	r3, #32
 800119c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	4619      	mov	r1, r3
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b4:	f000 fc52 	bl	8001a5c <HAL_GPIO_Init>

}
 80011b8:	bf00      	nop
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40021000 	.word	0x40021000

080011c4 <thread_0_entry>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void thread_0_entry(ULONG thread_input)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	ULONG start_ticks, end_ticks, elapsed_ticks;

    while(1)
    {
    	/* 记录任务开始时间 */
    	start_ticks = DWT->CYCCNT;
 80011cc:	4b13      	ldr	r3, [pc, #76]	@ (800121c <thread_0_entry+0x58>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	617b      	str	r3, [r7, #20]
    	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);  // 翻转LED状态
 80011d2:	2120      	movs	r1, #32
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d8:	f000 fdda 	bl	8001d90 <HAL_GPIO_TogglePin>
        /* 记录任务结束时间 */
        end_ticks = DWT->CYCCNT;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <thread_0_entry+0x58>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	613b      	str	r3, [r7, #16]
        /* 计算耗时（单位：周期数） */
        elapsed_ticks = end_ticks - start_ticks;
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	60fb      	str	r3, [r7, #12]

        float elapsed_us = (float)elapsed_ticks / 170.00f;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011f4:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001220 <thread_0_entry+0x5c>
 80011f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011fc:	edc7 7a02 	vstr	s15, [r7, #8]

        /* 输出或记录执行时间 */
        printf("Task execution time: %.2f us\n", elapsed_us);
 8001200:	68b8      	ldr	r0, [r7, #8]
 8001202:	f7ff faf9 	bl	80007f8 <__aeabi_f2d>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4806      	ldr	r0, [pc, #24]	@ (8001224 <thread_0_entry+0x60>)
 800120c:	f004 ff4e 	bl	80060ac <iprintf>
        tx_thread_sleep(300);
 8001210:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001214:	f003 f9f4 	bl	8004600 <_tx_thread_sleep>
    {
 8001218:	bf00      	nop
 800121a:	e7d7      	b.n	80011cc <thread_0_entry+0x8>
 800121c:	e0001000 	.word	0xe0001000
 8001220:	432a0000 	.word	0x432a0000
 8001224:	08007fb8 	.word	0x08007fb8

08001228 <thread_1_entry>:
    }
}

void thread_1_entry(ULONG thread_input)
{
 8001228:	b5b0      	push	{r4, r5, r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	const char msg[] = "Hello from ThreadX!\r\n";
 8001230:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <thread_1_entry+0x38>)
 8001232:	f107 0408 	add.w	r4, r7, #8
 8001236:	461d      	mov	r5, r3
 8001238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800123c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001240:	6020      	str	r0, [r4, #0]
 8001242:	3404      	adds	r4, #4
 8001244:	8021      	strh	r1, [r4, #0]

    while(1)
    {
    	printf("%s", msg);
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	@ (8001264 <thread_1_entry+0x3c>)
 800124e:	f004 ff2d 	bl	80060ac <iprintf>

        tx_thread_sleep(1000);
 8001252:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001256:	f003 f9d3 	bl	8004600 <_tx_thread_sleep>
    	printf("%s", msg);
 800125a:	bf00      	nop
 800125c:	e7f3      	b.n	8001246 <thread_1_entry+0x1e>
 800125e:	bf00      	nop
 8001260:	08007fdc 	.word	0x08007fdc
 8001264:	08007fd8 	.word	0x08007fd8

08001268 <tx_application_define>:
    }
}

void tx_application_define(void *first_unused_memory)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	@ 0x30
 800126c:	af08      	add	r7, sp, #32
 800126e:	6078      	str	r0, [r7, #4]
    CHAR *pointer = TX_NULL;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]

    /* Create a byte memory pool from which to allocate the thread stacks.  */
    tx_byte_pool_create(&byte_pool_0, "byte pool 0", first_unused_memory, DEMO_BYTE_POOL_SIZE);
 8001274:	2334      	movs	r3, #52	@ 0x34
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	4921      	ldr	r1, [pc, #132]	@ (8001304 <tx_application_define+0x9c>)
 8001280:	4821      	ldr	r0, [pc, #132]	@ (8001308 <tx_application_define+0xa0>)
 8001282:	f004 f853 	bl	800532c <_txe_byte_pool_create>

    /* Allocate the stack for thread 0.  */
    tx_byte_allocate(&byte_pool_0, (VOID **) &pointer, DEMO_STACK_SIZE, TX_NO_WAIT);
 8001286:	f107 010c 	add.w	r1, r7, #12
 800128a:	2300      	movs	r3, #0
 800128c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001290:	481d      	ldr	r0, [pc, #116]	@ (8001308 <tx_application_define+0xa0>)
 8001292:	f003 ffd7 	bl	8005244 <_txe_byte_allocate>
    /* Create the main thread.  */
    tx_thread_create(&thread_0, "thread 0", thread_0_entry, 0,
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	22c0      	movs	r2, #192	@ 0xc0
 800129a:	9206      	str	r2, [sp, #24]
 800129c:	2201      	movs	r2, #1
 800129e:	9205      	str	r2, [sp, #20]
 80012a0:	2200      	movs	r2, #0
 80012a2:	9204      	str	r2, [sp, #16]
 80012a4:	2201      	movs	r2, #1
 80012a6:	9203      	str	r2, [sp, #12]
 80012a8:	2201      	movs	r2, #1
 80012aa:	9202      	str	r2, [sp, #8]
 80012ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012b0:	9201      	str	r2, [sp, #4]
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2300      	movs	r3, #0
 80012b6:	4a15      	ldr	r2, [pc, #84]	@ (800130c <tx_application_define+0xa4>)
 80012b8:	4915      	ldr	r1, [pc, #84]	@ (8001310 <tx_application_define+0xa8>)
 80012ba:	4816      	ldr	r0, [pc, #88]	@ (8001314 <tx_application_define+0xac>)
 80012bc:	f004 f8d6 	bl	800546c <_txe_thread_create>
                    pointer, DEMO_STACK_SIZE,
                    1, 1, TX_NO_TIME_SLICE, TX_AUTO_START);

    /* Allocate the stack for thread 1.  */
    tx_byte_allocate(&byte_pool_0, (VOID **) &pointer, DEMO_STACK_SIZE, TX_NO_WAIT);
 80012c0:	f107 010c 	add.w	r1, r7, #12
 80012c4:	2300      	movs	r3, #0
 80012c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012ca:	480f      	ldr	r0, [pc, #60]	@ (8001308 <tx_application_define+0xa0>)
 80012cc:	f003 ffba 	bl	8005244 <_txe_byte_allocate>
    /* Create threads 1  */
    tx_thread_create(&thread_1, "thread 1", thread_1_entry, 0,
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	22c0      	movs	r2, #192	@ 0xc0
 80012d4:	9206      	str	r2, [sp, #24]
 80012d6:	2201      	movs	r2, #1
 80012d8:	9205      	str	r2, [sp, #20]
 80012da:	2200      	movs	r2, #0
 80012dc:	9204      	str	r2, [sp, #16]
 80012de:	2202      	movs	r2, #2
 80012e0:	9203      	str	r2, [sp, #12]
 80012e2:	2202      	movs	r2, #2
 80012e4:	9202      	str	r2, [sp, #8]
 80012e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012ea:	9201      	str	r2, [sp, #4]
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2300      	movs	r3, #0
 80012f0:	4a09      	ldr	r2, [pc, #36]	@ (8001318 <tx_application_define+0xb0>)
 80012f2:	490a      	ldr	r1, [pc, #40]	@ (800131c <tx_application_define+0xb4>)
 80012f4:	480a      	ldr	r0, [pc, #40]	@ (8001320 <tx_application_define+0xb8>)
 80012f6:	f004 f8b9 	bl	800546c <_txe_thread_create>
                    pointer, DEMO_STACK_SIZE,
                    2, 2, TX_NO_TIME_SLICE, TX_AUTO_START);
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	08007ff4 	.word	0x08007ff4
 8001308:	200001f4 	.word	0x200001f4
 800130c:	080011c5 	.word	0x080011c5
 8001310:	08008000 	.word	0x08008000
 8001314:	20000228 	.word	0x20000228
 8001318:	08001229 	.word	0x08001229
 800131c:	0800800c 	.word	0x0800800c
 8001320:	200002e8 	.word	0x200002e8

08001324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001328:	f000 fa55 	bl	80017d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132c:	f000 f808 	bl	8001340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001330:	f7ff ff0a 	bl	8001148 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001334:	f000 f972 	bl	800161c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  tx_kernel_enter();
 8001338:	f002 ff9a 	bl	8004270 <_tx_initialize_kernel_enter>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <main+0x18>

08001340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b094      	sub	sp, #80	@ 0x50
 8001344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001346:	f107 0318 	add.w	r3, r7, #24
 800134a:	2238      	movs	r2, #56	@ 0x38
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f004 ff01 	bl	8006156 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001362:	2000      	movs	r0, #0
 8001364:	f000 fd2e 	bl	8001dc4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001368:	2301      	movs	r3, #1
 800136a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800136c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001370:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001372:	2302      	movs	r3, #2
 8001374:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001376:	2303      	movs	r3, #3
 8001378:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800137a:	2306      	movs	r3, #6
 800137c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800137e:	2355      	movs	r3, #85	@ 0x55
 8001380:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001382:	2302      	movs	r3, #2
 8001384:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001386:	2302      	movs	r3, #2
 8001388:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800138a:	2302      	movs	r3, #2
 800138c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138e:	f107 0318 	add.w	r3, r7, #24
 8001392:	4618      	mov	r0, r3
 8001394:	f000 fdca 	bl	8001f2c <HAL_RCC_OscConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800139e:	f000 f818 	bl	80013d2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a2:	230f      	movs	r3, #15
 80013a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a6:	2303      	movs	r3, #3
 80013a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2104      	movs	r1, #4
 80013ba:	4618      	mov	r0, r3
 80013bc:	f001 f8c8 	bl	8002550 <HAL_RCC_ClockConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80013c6:	f000 f804 	bl	80013d2 <Error_Handler>
  }
}
 80013ca:	bf00      	nop
 80013cc:	3750      	adds	r7, #80	@ 0x50
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d6:	b672      	cpsid	i
}
 80013d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013da:	bf00      	nop
 80013dc:	e7fd      	b.n	80013da <Error_Handler+0x8>
	...

080013e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <HAL_MspInit+0x44>)
 80013e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001424 <HAL_MspInit+0x44>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80013f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <HAL_MspInit+0x44>)
 80013f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <HAL_MspInit+0x44>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001402:	4a08      	ldr	r2, [pc, #32]	@ (8001424 <HAL_MspInit+0x44>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001408:	6593      	str	r3, [r2, #88]	@ 0x58
 800140a:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <HAL_MspInit+0x44>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001416:	f000 fd79 	bl	8001f0c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000

08001428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <NMI_Handler+0x4>

08001430 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <HardFault_Handler+0x4>

08001438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <MemManage_Handler+0x4>

08001440 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <BusFault_Handler+0x4>

08001448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <UsageFault_Handler+0x4>

08001450 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return 1;
 8001470:	2301      	movs	r3, #1
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <_kill>:

int _kill(int pid, int sig)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001486:	f004 feb9 	bl	80061fc <__errno>
 800148a:	4603      	mov	r3, r0
 800148c:	2216      	movs	r2, #22
 800148e:	601a      	str	r2, [r3, #0]
  return -1;
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <_exit>:

void _exit (int status)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ffe7 	bl	800147c <_kill>
  while (1) {}    /* Make sure we hang here */
 80014ae:	bf00      	nop
 80014b0:	e7fd      	b.n	80014ae <_exit+0x12>

080014b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	e00a      	b.n	80014da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014c4:	f3af 8000 	nop.w
 80014c8:	4601      	mov	r1, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	60ba      	str	r2, [r7, #8]
 80014d0:	b2ca      	uxtb	r2, r1
 80014d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	3301      	adds	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	429a      	cmp	r2, r3
 80014e0:	dbf0      	blt.n	80014c4 <_read+0x12>
  }

  return len;
 80014e2:	687b      	ldr	r3, [r7, #4]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	e009      	b.n	8001512 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	60ba      	str	r2, [r7, #8]
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f92a 	bl	8001760 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3301      	adds	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	429a      	cmp	r2, r3
 8001518:	dbf1      	blt.n	80014fe <_write+0x12>
  }
  return len;
 800151a:	687b      	ldr	r3, [r7, #4]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <_close>:

int _close(int file)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800154c:	605a      	str	r2, [r3, #4]
  return 0;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <_isatty>:

int _isatty(int file)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001564:	2301      	movs	r3, #1
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001572:	b480      	push	{r7}
 8001574:	b085      	sub	sp, #20
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001594:	4a14      	ldr	r2, [pc, #80]	@ (80015e8 <_sbrk+0x5c>)
 8001596:	4b15      	ldr	r3, [pc, #84]	@ (80015ec <_sbrk+0x60>)
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a0:	4b13      	ldr	r3, [pc, #76]	@ (80015f0 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a8:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <_sbrk+0x64>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	@ (80015f4 <_sbrk+0x68>)
 80015ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ae:	4b10      	ldr	r3, [pc, #64]	@ (80015f0 <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d207      	bcs.n	80015cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015bc:	f004 fe1e 	bl	80061fc <__errno>
 80015c0:	4603      	mov	r3, r0
 80015c2:	220c      	movs	r2, #12
 80015c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	e009      	b.n	80015e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015cc:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d2:	4b07      	ldr	r3, [pc, #28]	@ (80015f0 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	4a05      	ldr	r2, [pc, #20]	@ (80015f0 <_sbrk+0x64>)
 80015dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20020000 	.word	0x20020000
 80015ec:	00000400 	.word	0x00000400
 80015f0:	200003a8 	.word	0x200003a8
 80015f4:	20000bf0 	.word	0x20000bf0

080015f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015fc:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <SystemInit+0x20>)
 80015fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001602:	4a05      	ldr	r2, [pc, #20]	@ (8001618 <SystemInit+0x20>)
 8001604:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001608:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001620:	4b21      	ldr	r3, [pc, #132]	@ (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 8001622:	4a22      	ldr	r2, [pc, #136]	@ (80016ac <MX_LPUART1_UART_Init+0x90>)
 8001624:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001626:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 8001628:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800162c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b1c      	ldr	r3, [pc, #112]	@ (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800163a:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800164c:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 800164e:	2200      	movs	r2, #0
 8001650:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 8001654:	2200      	movs	r2, #0
 8001656:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001658:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 800165a:	2200      	movs	r2, #0
 800165c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800165e:	4812      	ldr	r0, [pc, #72]	@ (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 8001660:	f001 fbe0 	bl	8002e24 <HAL_UART_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800166a:	f7ff feb2 	bl	80013d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800166e:	2100      	movs	r1, #0
 8001670:	480d      	ldr	r0, [pc, #52]	@ (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 8001672:	f002 fa09 	bl	8003a88 <HAL_UARTEx_SetTxFifoThreshold>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800167c:	f7ff fea9 	bl	80013d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001680:	2100      	movs	r1, #0
 8001682:	4809      	ldr	r0, [pc, #36]	@ (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 8001684:	f002 fa3e 	bl	8003b04 <HAL_UARTEx_SetRxFifoThreshold>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800168e:	f7ff fea0 	bl	80013d2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001692:	4805      	ldr	r0, [pc, #20]	@ (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 8001694:	f002 f9bf 	bl	8003a16 <HAL_UARTEx_DisableFifoMode>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800169e:	f7ff fe98 	bl	80013d2 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200003ac 	.word	0x200003ac
 80016ac:	40008000 	.word	0x40008000

080016b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b09e      	sub	sp, #120	@ 0x78
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c8:	f107 0310 	add.w	r3, r7, #16
 80016cc:	2254      	movs	r2, #84	@ 0x54
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f004 fd40 	bl	8006156 <memset>
  if(uartHandle->Instance==LPUART1)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a1f      	ldr	r2, [pc, #124]	@ (8001758 <HAL_UART_MspInit+0xa8>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d136      	bne.n	800174e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80016e0:	2320      	movs	r3, #32
 80016e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	4618      	mov	r0, r3
 80016ee:	f001 f94b 	bl	8002988 <HAL_RCCEx_PeriphCLKConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016f8:	f7ff fe6b 	bl	80013d2 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80016fc:	4b17      	ldr	r3, [pc, #92]	@ (800175c <HAL_UART_MspInit+0xac>)
 80016fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001700:	4a16      	ldr	r2, [pc, #88]	@ (800175c <HAL_UART_MspInit+0xac>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001708:	4b14      	ldr	r3, [pc, #80]	@ (800175c <HAL_UART_MspInit+0xac>)
 800170a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001714:	4b11      	ldr	r3, [pc, #68]	@ (800175c <HAL_UART_MspInit+0xac>)
 8001716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001718:	4a10      	ldr	r2, [pc, #64]	@ (800175c <HAL_UART_MspInit+0xac>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001720:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <HAL_UART_MspInit+0xac>)
 8001722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800172c:	230c      	movs	r3, #12
 800172e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800173c:	230c      	movs	r3, #12
 800173e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001744:	4619      	mov	r1, r3
 8001746:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800174a:	f000 f987 	bl	8001a5c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800174e:	bf00      	nop
 8001750:	3778      	adds	r7, #120	@ 0x78
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40008000 	.word	0x40008000
 800175c:	40021000 	.word	0x40021000

08001760 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)&ch, 1, 0xFFFF);
 8001768:	1d39      	adds	r1, r7, #4
 800176a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800176e:	2201      	movs	r2, #1
 8001770:	4803      	ldr	r0, [pc, #12]	@ (8001780 <__io_putchar+0x20>)
 8001772:	f001 fba7 	bl	8002ec4 <HAL_UART_Transmit>

	return ch;
 8001776:	687b      	ldr	r3, [r7, #4]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200003ac 	.word	0x200003ac

08001784 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001784:	480d      	ldr	r0, [pc, #52]	@ (80017bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001786:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001788:	f7ff ff36 	bl	80015f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800178c:	480c      	ldr	r0, [pc, #48]	@ (80017c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800178e:	490d      	ldr	r1, [pc, #52]	@ (80017c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001790:	4a0d      	ldr	r2, [pc, #52]	@ (80017c8 <LoopForever+0xe>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001794:	e002      	b.n	800179c <LoopCopyDataInit>

08001796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179a:	3304      	adds	r3, #4

0800179c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800179c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a0:	d3f9      	bcc.n	8001796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a2:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80017a4:	4c0a      	ldr	r4, [pc, #40]	@ (80017d0 <LoopForever+0x16>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a8:	e001      	b.n	80017ae <LoopFillZerobss>

080017aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ac:	3204      	adds	r2, #4

080017ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b0:	d3fb      	bcc.n	80017aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017b2:	f004 fd29 	bl	8006208 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017b6:	f7ff fdb5 	bl	8001324 <main>

080017ba <LoopForever>:

LoopForever:
    b LoopForever
 80017ba:	e7fe      	b.n	80017ba <LoopForever>
  ldr   r0, =_estack
 80017bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80017c8:	080083f0 	.word	0x080083f0
  ldr r2, =_sbss
 80017cc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80017d0:	20000bec 	.word	0x20000bec

080017d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC1_2_IRQHandler>

080017d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e0:	2003      	movs	r0, #3
 80017e2:	f000 f909 	bl	80019f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017e6:	200f      	movs	r0, #15
 80017e8:	f000 f80e 	bl	8001808 <HAL_InitTick>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d002      	beq.n	80017f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	71fb      	strb	r3, [r7, #7]
 80017f6:	e001      	b.n	80017fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017f8:	f7ff fdf2 	bl	80013e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017fc:	79fb      	ldrb	r3, [r7, #7]

}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001810:	2300      	movs	r3, #0
 8001812:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001814:	4b16      	ldr	r3, [pc, #88]	@ (8001870 <HAL_InitTick+0x68>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d022      	beq.n	8001862 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800181c:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <HAL_InitTick+0x6c>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b13      	ldr	r3, [pc, #76]	@ (8001870 <HAL_InitTick+0x68>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001828:	fbb1 f3f3 	udiv	r3, r1, r3
 800182c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001830:	4618      	mov	r0, r3
 8001832:	f000 f906 	bl	8001a42 <HAL_SYSTICK_Config>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d10f      	bne.n	800185c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b0f      	cmp	r3, #15
 8001840:	d809      	bhi.n	8001856 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001842:	2200      	movs	r2, #0
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	f04f 30ff 	mov.w	r0, #4294967295
 800184a:	f000 f8e0 	bl	8001a0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800184e:	4a0a      	ldr	r2, [pc, #40]	@ (8001878 <HAL_InitTick+0x70>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	e007      	b.n	8001866 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
 800185a:	e004      	b.n	8001866 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
 8001860:	e001      	b.n	8001866 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001866:	7bfb      	ldrb	r3, [r7, #15]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000008 	.word	0x20000008
 8001874:	20000000 	.word	0x20000000
 8001878:	20000004 	.word	0x20000004

0800187c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return uwTick;
 8001880:	4b03      	ldr	r3, [pc, #12]	@ (8001890 <HAL_GetTick+0x14>)
 8001882:	681b      	ldr	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000440 	.word	0x20000440

08001894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a4:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018b0:	4013      	ands	r3, r2
 80018b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c6:	4a04      	ldr	r2, [pc, #16]	@ (80018d8 <__NVIC_SetPriorityGrouping+0x44>)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	60d3      	str	r3, [r2, #12]
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e0:	4b04      	ldr	r3, [pc, #16]	@ (80018f4 <__NVIC_GetPriorityGrouping+0x18>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	0a1b      	lsrs	r3, r3, #8
 80018e6:	f003 0307 	and.w	r3, r3, #7
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	db0a      	blt.n	8001922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	490c      	ldr	r1, [pc, #48]	@ (8001944 <__NVIC_SetPriority+0x4c>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	0112      	lsls	r2, r2, #4
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	440b      	add	r3, r1
 800191c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001920:	e00a      	b.n	8001938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4908      	ldr	r1, [pc, #32]	@ (8001948 <__NVIC_SetPriority+0x50>)
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	3b04      	subs	r3, #4
 8001930:	0112      	lsls	r2, r2, #4
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	440b      	add	r3, r1
 8001936:	761a      	strb	r2, [r3, #24]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000e100 	.word	0xe000e100
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	@ 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f1c3 0307 	rsb	r3, r3, #7
 8001966:	2b04      	cmp	r3, #4
 8001968:	bf28      	it	cs
 800196a:	2304      	movcs	r3, #4
 800196c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3304      	adds	r3, #4
 8001972:	2b06      	cmp	r3, #6
 8001974:	d902      	bls.n	800197c <NVIC_EncodePriority+0x30>
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3b03      	subs	r3, #3
 800197a:	e000      	b.n	800197e <NVIC_EncodePriority+0x32>
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	f04f 32ff 	mov.w	r2, #4294967295
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43da      	mvns	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	401a      	ands	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001994:	f04f 31ff 	mov.w	r1, #4294967295
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	43d9      	mvns	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	4313      	orrs	r3, r2
         );
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3724      	adds	r7, #36	@ 0x24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019c4:	d301      	bcc.n	80019ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00f      	b.n	80019ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ca:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <SysTick_Config+0x40>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d2:	210f      	movs	r1, #15
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f7ff ff8e 	bl	80018f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019dc:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <SysTick_Config+0x40>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e2:	4b04      	ldr	r3, [pc, #16]	@ (80019f4 <SysTick_Config+0x40>)
 80019e4:	2207      	movs	r2, #7
 80019e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	e000e010 	.word	0xe000e010

080019f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ff47 	bl	8001894 <__NVIC_SetPriorityGrouping>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b086      	sub	sp, #24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a1c:	f7ff ff5e 	bl	80018dc <__NVIC_GetPriorityGrouping>
 8001a20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	6978      	ldr	r0, [r7, #20]
 8001a28:	f7ff ff90 	bl	800194c <NVIC_EncodePriority>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff5f 	bl	80018f8 <__NVIC_SetPriority>
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffb2 	bl	80019b4 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a6a:	e15a      	b.n	8001d22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2101      	movs	r1, #1
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 814c 	beq.w	8001d1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d005      	beq.n	8001a9c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d130      	bne.n	8001afe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	091b      	lsrs	r3, r3, #4
 8001ae8:	f003 0201 	and.w	r2, r3, #1
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d017      	beq.n	8001b3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	2203      	movs	r2, #3
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d123      	bne.n	8001b8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	08da      	lsrs	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3208      	adds	r2, #8
 8001b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	691a      	ldr	r2, [r3, #16]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	08da      	lsrs	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3208      	adds	r2, #8
 8001b88:	6939      	ldr	r1, [r7, #16]
 8001b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	2203      	movs	r2, #3
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0203 	and.w	r2, r3, #3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 80a6 	beq.w	8001d1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd0:	4b5b      	ldr	r3, [pc, #364]	@ (8001d40 <HAL_GPIO_Init+0x2e4>)
 8001bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd4:	4a5a      	ldr	r2, [pc, #360]	@ (8001d40 <HAL_GPIO_Init+0x2e4>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bdc:	4b58      	ldr	r3, [pc, #352]	@ (8001d40 <HAL_GPIO_Init+0x2e4>)
 8001bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001be8:	4a56      	ldr	r2, [pc, #344]	@ (8001d44 <HAL_GPIO_Init+0x2e8>)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	3302      	adds	r3, #2
 8001bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c12:	d01f      	beq.n	8001c54 <HAL_GPIO_Init+0x1f8>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a4c      	ldr	r2, [pc, #304]	@ (8001d48 <HAL_GPIO_Init+0x2ec>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d019      	beq.n	8001c50 <HAL_GPIO_Init+0x1f4>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a4b      	ldr	r2, [pc, #300]	@ (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d013      	beq.n	8001c4c <HAL_GPIO_Init+0x1f0>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a4a      	ldr	r2, [pc, #296]	@ (8001d50 <HAL_GPIO_Init+0x2f4>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d00d      	beq.n	8001c48 <HAL_GPIO_Init+0x1ec>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a49      	ldr	r2, [pc, #292]	@ (8001d54 <HAL_GPIO_Init+0x2f8>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d007      	beq.n	8001c44 <HAL_GPIO_Init+0x1e8>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a48      	ldr	r2, [pc, #288]	@ (8001d58 <HAL_GPIO_Init+0x2fc>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d101      	bne.n	8001c40 <HAL_GPIO_Init+0x1e4>
 8001c3c:	2305      	movs	r3, #5
 8001c3e:	e00a      	b.n	8001c56 <HAL_GPIO_Init+0x1fa>
 8001c40:	2306      	movs	r3, #6
 8001c42:	e008      	b.n	8001c56 <HAL_GPIO_Init+0x1fa>
 8001c44:	2304      	movs	r3, #4
 8001c46:	e006      	b.n	8001c56 <HAL_GPIO_Init+0x1fa>
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e004      	b.n	8001c56 <HAL_GPIO_Init+0x1fa>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e002      	b.n	8001c56 <HAL_GPIO_Init+0x1fa>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <HAL_GPIO_Init+0x1fa>
 8001c54:	2300      	movs	r3, #0
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	f002 0203 	and.w	r2, r2, #3
 8001c5c:	0092      	lsls	r2, r2, #2
 8001c5e:	4093      	lsls	r3, r2
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c66:	4937      	ldr	r1, [pc, #220]	@ (8001d44 <HAL_GPIO_Init+0x2e8>)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c74:	4b39      	ldr	r3, [pc, #228]	@ (8001d5c <HAL_GPIO_Init+0x300>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c98:	4a30      	ldr	r2, [pc, #192]	@ (8001d5c <HAL_GPIO_Init+0x300>)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001d5c <HAL_GPIO_Init+0x300>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cc2:	4a26      	ldr	r2, [pc, #152]	@ (8001d5c <HAL_GPIO_Init+0x300>)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001cc8:	4b24      	ldr	r3, [pc, #144]	@ (8001d5c <HAL_GPIO_Init+0x300>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cec:	4a1b      	ldr	r2, [pc, #108]	@ (8001d5c <HAL_GPIO_Init+0x300>)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d5c <HAL_GPIO_Init+0x300>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d16:	4a11      	ldr	r2, [pc, #68]	@ (8001d5c <HAL_GPIO_Init+0x300>)
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f47f ae9d 	bne.w	8001a6c <HAL_GPIO_Init+0x10>
  }
}
 8001d32:	bf00      	nop
 8001d34:	bf00      	nop
 8001d36:	371c      	adds	r7, #28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40010000 	.word	0x40010000
 8001d48:	48000400 	.word	0x48000400
 8001d4c:	48000800 	.word	0x48000800
 8001d50:	48000c00 	.word	0x48000c00
 8001d54:	48001000 	.word	0x48001000
 8001d58:	48001400 	.word	0x48001400
 8001d5c:	40010400 	.word	0x40010400

08001d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d70:	787b      	ldrb	r3, [r7, #1]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d76:	887a      	ldrh	r2, [r7, #2]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d7c:	e002      	b.n	8001d84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d7e:	887a      	ldrh	r2, [r7, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001da2:	887a      	ldrh	r2, [r7, #2]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4013      	ands	r3, r2
 8001da8:	041a      	lsls	r2, r3, #16
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	43d9      	mvns	r1, r3
 8001dae:	887b      	ldrh	r3, [r7, #2]
 8001db0:	400b      	ands	r3, r1
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	619a      	str	r2, [r3, #24]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d141      	bne.n	8001e56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dd2:	4b4b      	ldr	r3, [pc, #300]	@ (8001f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001dda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dde:	d131      	bne.n	8001e44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001de0:	4b47      	ldr	r3, [pc, #284]	@ (8001f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001de6:	4a46      	ldr	r2, [pc, #280]	@ (8001f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001df0:	4b43      	ldr	r3, [pc, #268]	@ (8001f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001df8:	4a41      	ldr	r2, [pc, #260]	@ (8001f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e00:	4b40      	ldr	r3, [pc, #256]	@ (8001f04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2232      	movs	r2, #50	@ 0x32
 8001e06:	fb02 f303 	mul.w	r3, r2, r3
 8001e0a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e10:	0c9b      	lsrs	r3, r3, #18
 8001e12:	3301      	adds	r3, #1
 8001e14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e16:	e002      	b.n	8001e1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e1e:	4b38      	ldr	r3, [pc, #224]	@ (8001f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e2a:	d102      	bne.n	8001e32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f2      	bne.n	8001e18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e32:	4b33      	ldr	r3, [pc, #204]	@ (8001f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e3e:	d158      	bne.n	8001ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e057      	b.n	8001ef4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e44:	4b2e      	ldr	r3, [pc, #184]	@ (8001f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e4a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e54:	e04d      	b.n	8001ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e5c:	d141      	bne.n	8001ee2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e5e:	4b28      	ldr	r3, [pc, #160]	@ (8001f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e6a:	d131      	bne.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e6c:	4b24      	ldr	r3, [pc, #144]	@ (8001f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e72:	4a23      	ldr	r2, [pc, #140]	@ (8001f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e7c:	4b20      	ldr	r3, [pc, #128]	@ (8001f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e84:	4a1e      	ldr	r2, [pc, #120]	@ (8001f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2232      	movs	r2, #50	@ 0x32
 8001e92:	fb02 f303 	mul.w	r3, r2, r3
 8001e96:	4a1c      	ldr	r2, [pc, #112]	@ (8001f08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e98:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9c:	0c9b      	lsrs	r3, r3, #18
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ea2:	e002      	b.n	8001eaa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eaa:	4b15      	ldr	r3, [pc, #84]	@ (8001f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eb6:	d102      	bne.n	8001ebe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f2      	bne.n	8001ea4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ebe:	4b10      	ldr	r3, [pc, #64]	@ (8001f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eca:	d112      	bne.n	8001ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e011      	b.n	8001ef4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001edc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ee0:	e007      	b.n	8001ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ee2:	4b07      	ldr	r3, [pc, #28]	@ (8001f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001eea:	4a05      	ldr	r2, [pc, #20]	@ (8001f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ef0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	40007000 	.word	0x40007000
 8001f04:	20000000 	.word	0x20000000
 8001f08:	431bde83 	.word	0x431bde83

08001f0c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001f10:	4b05      	ldr	r3, [pc, #20]	@ (8001f28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	4a04      	ldr	r2, [pc, #16]	@ (8001f28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f1a:	6093      	str	r3, [r2, #8]
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40007000 	.word	0x40007000

08001f2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e2fe      	b.n	800253c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d075      	beq.n	8002036 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f4a:	4b97      	ldr	r3, [pc, #604]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f54:	4b94      	ldr	r3, [pc, #592]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	2b0c      	cmp	r3, #12
 8001f62:	d102      	bne.n	8001f6a <HAL_RCC_OscConfig+0x3e>
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d002      	beq.n	8001f70 <HAL_RCC_OscConfig+0x44>
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d10b      	bne.n	8001f88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f70:	4b8d      	ldr	r3, [pc, #564]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d05b      	beq.n	8002034 <HAL_RCC_OscConfig+0x108>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d157      	bne.n	8002034 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e2d9      	b.n	800253c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f90:	d106      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x74>
 8001f92:	4b85      	ldr	r3, [pc, #532]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a84      	ldr	r2, [pc, #528]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 8001f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e01d      	b.n	8001fdc <HAL_RCC_OscConfig+0xb0>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x98>
 8001faa:	4b7f      	ldr	r3, [pc, #508]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a7e      	ldr	r2, [pc, #504]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 8001fb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	4b7c      	ldr	r3, [pc, #496]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a7b      	ldr	r2, [pc, #492]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 8001fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	e00b      	b.n	8001fdc <HAL_RCC_OscConfig+0xb0>
 8001fc4:	4b78      	ldr	r3, [pc, #480]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a77      	ldr	r2, [pc, #476]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 8001fca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	4b75      	ldr	r3, [pc, #468]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a74      	ldr	r2, [pc, #464]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 8001fd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d013      	beq.n	800200c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7ff fc4a 	bl	800187c <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fec:	f7ff fc46 	bl	800187c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b64      	cmp	r3, #100	@ 0x64
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e29e      	b.n	800253c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ffe:	4b6a      	ldr	r3, [pc, #424]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0xc0>
 800200a:	e014      	b.n	8002036 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7ff fc36 	bl	800187c <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002014:	f7ff fc32 	bl	800187c <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b64      	cmp	r3, #100	@ 0x64
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e28a      	b.n	800253c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002026:	4b60      	ldr	r3, [pc, #384]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0xe8>
 8002032:	e000      	b.n	8002036 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d075      	beq.n	800212e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002042:	4b59      	ldr	r3, [pc, #356]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800204c:	4b56      	ldr	r3, [pc, #344]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	2b0c      	cmp	r3, #12
 800205a:	d102      	bne.n	8002062 <HAL_RCC_OscConfig+0x136>
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d002      	beq.n	8002068 <HAL_RCC_OscConfig+0x13c>
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b04      	cmp	r3, #4
 8002066:	d11f      	bne.n	80020a8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002068:	4b4f      	ldr	r3, [pc, #316]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_RCC_OscConfig+0x154>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e25d      	b.n	800253c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002080:	4b49      	ldr	r3, [pc, #292]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	061b      	lsls	r3, r3, #24
 800208e:	4946      	ldr	r1, [pc, #280]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 8002090:	4313      	orrs	r3, r2
 8002092:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002094:	4b45      	ldr	r3, [pc, #276]	@ (80021ac <HAL_RCC_OscConfig+0x280>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fbb5 	bl	8001808 <HAL_InitTick>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d043      	beq.n	800212c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e249      	b.n	800253c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d023      	beq.n	80020f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020b0:	4b3d      	ldr	r3, [pc, #244]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a3c      	ldr	r2, [pc, #240]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 80020b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7ff fbde 	bl	800187c <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c4:	f7ff fbda 	bl	800187c <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e232      	b.n	800253c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020d6:	4b34      	ldr	r3, [pc, #208]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e2:	4b31      	ldr	r3, [pc, #196]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	061b      	lsls	r3, r3, #24
 80020f0:	492d      	ldr	r1, [pc, #180]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	604b      	str	r3, [r1, #4]
 80020f6:	e01a      	b.n	800212e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020f8:	4b2b      	ldr	r3, [pc, #172]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a2a      	ldr	r2, [pc, #168]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 80020fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7ff fbba 	bl	800187c <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210c:	f7ff fbb6 	bl	800187c <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e20e      	b.n	800253c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800211e:	4b22      	ldr	r3, [pc, #136]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x1e0>
 800212a:	e000      	b.n	800212e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800212c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d041      	beq.n	80021be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d01c      	beq.n	800217c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002142:	4b19      	ldr	r3, [pc, #100]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 8002144:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002148:	4a17      	ldr	r2, [pc, #92]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002152:	f7ff fb93 	bl	800187c <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215a:	f7ff fb8f 	bl	800187c <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e1e7      	b.n	800253c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800216c:	4b0e      	ldr	r3, [pc, #56]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 800216e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0ef      	beq.n	800215a <HAL_RCC_OscConfig+0x22e>
 800217a:	e020      	b.n	80021be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800217c:	4b0a      	ldr	r3, [pc, #40]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 800217e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002182:	4a09      	ldr	r2, [pc, #36]	@ (80021a8 <HAL_RCC_OscConfig+0x27c>)
 8002184:	f023 0301 	bic.w	r3, r3, #1
 8002188:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218c:	f7ff fb76 	bl	800187c <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002192:	e00d      	b.n	80021b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002194:	f7ff fb72 	bl	800187c <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d906      	bls.n	80021b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e1ca      	b.n	800253c <HAL_RCC_OscConfig+0x610>
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021b0:	4b8c      	ldr	r3, [pc, #560]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 80021b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1ea      	bne.n	8002194 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 80a6 	beq.w	8002318 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021cc:	2300      	movs	r3, #0
 80021ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021d0:	4b84      	ldr	r3, [pc, #528]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 80021d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_OscConfig+0x2b4>
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <HAL_RCC_OscConfig+0x2b6>
 80021e0:	2300      	movs	r3, #0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00d      	beq.n	8002202 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e6:	4b7f      	ldr	r3, [pc, #508]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 80021e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ea:	4a7e      	ldr	r2, [pc, #504]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 80021ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80021f2:	4b7c      	ldr	r3, [pc, #496]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 80021f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021fe:	2301      	movs	r3, #1
 8002200:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002202:	4b79      	ldr	r3, [pc, #484]	@ (80023e8 <HAL_RCC_OscConfig+0x4bc>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800220a:	2b00      	cmp	r3, #0
 800220c:	d118      	bne.n	8002240 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800220e:	4b76      	ldr	r3, [pc, #472]	@ (80023e8 <HAL_RCC_OscConfig+0x4bc>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a75      	ldr	r2, [pc, #468]	@ (80023e8 <HAL_RCC_OscConfig+0x4bc>)
 8002214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800221a:	f7ff fb2f 	bl	800187c <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002222:	f7ff fb2b 	bl	800187c <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e183      	b.n	800253c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002234:	4b6c      	ldr	r3, [pc, #432]	@ (80023e8 <HAL_RCC_OscConfig+0x4bc>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d108      	bne.n	800225a <HAL_RCC_OscConfig+0x32e>
 8002248:	4b66      	ldr	r3, [pc, #408]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800224e:	4a65      	ldr	r2, [pc, #404]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002258:	e024      	b.n	80022a4 <HAL_RCC_OscConfig+0x378>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b05      	cmp	r3, #5
 8002260:	d110      	bne.n	8002284 <HAL_RCC_OscConfig+0x358>
 8002262:	4b60      	ldr	r3, [pc, #384]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 8002264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002268:	4a5e      	ldr	r2, [pc, #376]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002272:	4b5c      	ldr	r3, [pc, #368]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 8002274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002278:	4a5a      	ldr	r2, [pc, #360]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002282:	e00f      	b.n	80022a4 <HAL_RCC_OscConfig+0x378>
 8002284:	4b57      	ldr	r3, [pc, #348]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800228a:	4a56      	ldr	r2, [pc, #344]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002294:	4b53      	ldr	r3, [pc, #332]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 8002296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800229a:	4a52      	ldr	r2, [pc, #328]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 800229c:	f023 0304 	bic.w	r3, r3, #4
 80022a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d016      	beq.n	80022da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ac:	f7ff fae6 	bl	800187c <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022b2:	e00a      	b.n	80022ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b4:	f7ff fae2 	bl	800187c <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e138      	b.n	800253c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ca:	4b46      	ldr	r3, [pc, #280]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 80022cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0ed      	beq.n	80022b4 <HAL_RCC_OscConfig+0x388>
 80022d8:	e015      	b.n	8002306 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022da:	f7ff facf 	bl	800187c <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e2:	f7ff facb 	bl	800187c <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e121      	b.n	800253c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022f8:	4b3a      	ldr	r3, [pc, #232]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 80022fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1ed      	bne.n	80022e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002306:	7ffb      	ldrb	r3, [r7, #31]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d105      	bne.n	8002318 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800230c:	4b35      	ldr	r3, [pc, #212]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 800230e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002310:	4a34      	ldr	r2, [pc, #208]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 8002312:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002316:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	2b00      	cmp	r3, #0
 8002322:	d03c      	beq.n	800239e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d01c      	beq.n	8002366 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800232c:	4b2d      	ldr	r3, [pc, #180]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 800232e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002332:	4a2c      	ldr	r2, [pc, #176]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233c:	f7ff fa9e 	bl	800187c <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002344:	f7ff fa9a 	bl	800187c <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e0f2      	b.n	800253c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002356:	4b23      	ldr	r3, [pc, #140]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 8002358:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0ef      	beq.n	8002344 <HAL_RCC_OscConfig+0x418>
 8002364:	e01b      	b.n	800239e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002366:	4b1f      	ldr	r3, [pc, #124]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 8002368:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800236c:	4a1d      	ldr	r2, [pc, #116]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 800236e:	f023 0301 	bic.w	r3, r3, #1
 8002372:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002376:	f7ff fa81 	bl	800187c <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800237e:	f7ff fa7d 	bl	800187c <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e0d5      	b.n	800253c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002390:	4b14      	ldr	r3, [pc, #80]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 8002392:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1ef      	bne.n	800237e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 80c9 	beq.w	800253a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023a8:	4b0e      	ldr	r3, [pc, #56]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 030c 	and.w	r3, r3, #12
 80023b0:	2b0c      	cmp	r3, #12
 80023b2:	f000 8083 	beq.w	80024bc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d15e      	bne.n	800247c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023be:	4b09      	ldr	r3, [pc, #36]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a08      	ldr	r2, [pc, #32]	@ (80023e4 <HAL_RCC_OscConfig+0x4b8>)
 80023c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ca:	f7ff fa57 	bl	800187c <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d0:	e00c      	b.n	80023ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d2:	f7ff fa53 	bl	800187c <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d905      	bls.n	80023ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e0ab      	b.n	800253c <HAL_RCC_OscConfig+0x610>
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ec:	4b55      	ldr	r3, [pc, #340]	@ (8002544 <HAL_RCC_OscConfig+0x618>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1ec      	bne.n	80023d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f8:	4b52      	ldr	r3, [pc, #328]	@ (8002544 <HAL_RCC_OscConfig+0x618>)
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	4b52      	ldr	r3, [pc, #328]	@ (8002548 <HAL_RCC_OscConfig+0x61c>)
 80023fe:	4013      	ands	r3, r2
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6a11      	ldr	r1, [r2, #32]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002408:	3a01      	subs	r2, #1
 800240a:	0112      	lsls	r2, r2, #4
 800240c:	4311      	orrs	r1, r2
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002412:	0212      	lsls	r2, r2, #8
 8002414:	4311      	orrs	r1, r2
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800241a:	0852      	lsrs	r2, r2, #1
 800241c:	3a01      	subs	r2, #1
 800241e:	0552      	lsls	r2, r2, #21
 8002420:	4311      	orrs	r1, r2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002426:	0852      	lsrs	r2, r2, #1
 8002428:	3a01      	subs	r2, #1
 800242a:	0652      	lsls	r2, r2, #25
 800242c:	4311      	orrs	r1, r2
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002432:	06d2      	lsls	r2, r2, #27
 8002434:	430a      	orrs	r2, r1
 8002436:	4943      	ldr	r1, [pc, #268]	@ (8002544 <HAL_RCC_OscConfig+0x618>)
 8002438:	4313      	orrs	r3, r2
 800243a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800243c:	4b41      	ldr	r3, [pc, #260]	@ (8002544 <HAL_RCC_OscConfig+0x618>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a40      	ldr	r2, [pc, #256]	@ (8002544 <HAL_RCC_OscConfig+0x618>)
 8002442:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002446:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002448:	4b3e      	ldr	r3, [pc, #248]	@ (8002544 <HAL_RCC_OscConfig+0x618>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4a3d      	ldr	r2, [pc, #244]	@ (8002544 <HAL_RCC_OscConfig+0x618>)
 800244e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002452:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7ff fa12 	bl	800187c <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245c:	f7ff fa0e 	bl	800187c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e066      	b.n	800253c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800246e:	4b35      	ldr	r3, [pc, #212]	@ (8002544 <HAL_RCC_OscConfig+0x618>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0x530>
 800247a:	e05e      	b.n	800253a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247c:	4b31      	ldr	r3, [pc, #196]	@ (8002544 <HAL_RCC_OscConfig+0x618>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a30      	ldr	r2, [pc, #192]	@ (8002544 <HAL_RCC_OscConfig+0x618>)
 8002482:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002488:	f7ff f9f8 	bl	800187c <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002490:	f7ff f9f4 	bl	800187c <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e04c      	b.n	800253c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a2:	4b28      	ldr	r3, [pc, #160]	@ (8002544 <HAL_RCC_OscConfig+0x618>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80024ae:	4b25      	ldr	r3, [pc, #148]	@ (8002544 <HAL_RCC_OscConfig+0x618>)
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	4924      	ldr	r1, [pc, #144]	@ (8002544 <HAL_RCC_OscConfig+0x618>)
 80024b4:	4b25      	ldr	r3, [pc, #148]	@ (800254c <HAL_RCC_OscConfig+0x620>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	60cb      	str	r3, [r1, #12]
 80024ba:	e03e      	b.n	800253a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e039      	b.n	800253c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80024c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002544 <HAL_RCC_OscConfig+0x618>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f003 0203 	and.w	r2, r3, #3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d12c      	bne.n	8002536 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e6:	3b01      	subs	r3, #1
 80024e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d123      	bne.n	8002536 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d11b      	bne.n	8002536 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002508:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800250a:	429a      	cmp	r2, r3
 800250c:	d113      	bne.n	8002536 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002518:	085b      	lsrs	r3, r3, #1
 800251a:	3b01      	subs	r3, #1
 800251c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800251e:	429a      	cmp	r2, r3
 8002520:	d109      	bne.n	8002536 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800252c:	085b      	lsrs	r3, r3, #1
 800252e:	3b01      	subs	r3, #1
 8002530:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d001      	beq.n	800253a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3720      	adds	r7, #32
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40021000 	.word	0x40021000
 8002548:	019f800c 	.word	0x019f800c
 800254c:	feeefffc 	.word	0xfeeefffc

08002550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e11e      	b.n	80027a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002568:	4b91      	ldr	r3, [pc, #580]	@ (80027b0 <HAL_RCC_ClockConfig+0x260>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 030f 	and.w	r3, r3, #15
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d910      	bls.n	8002598 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002576:	4b8e      	ldr	r3, [pc, #568]	@ (80027b0 <HAL_RCC_ClockConfig+0x260>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 020f 	bic.w	r2, r3, #15
 800257e:	498c      	ldr	r1, [pc, #560]	@ (80027b0 <HAL_RCC_ClockConfig+0x260>)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	4b8a      	ldr	r3, [pc, #552]	@ (80027b0 <HAL_RCC_ClockConfig+0x260>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e106      	b.n	80027a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d073      	beq.n	800268c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d129      	bne.n	8002600 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ac:	4b81      	ldr	r3, [pc, #516]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0f4      	b.n	80027a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80025bc:	f000 f99e 	bl	80028fc <RCC_GetSysClockFreqFromPLLSource>
 80025c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4a7c      	ldr	r2, [pc, #496]	@ (80027b8 <HAL_RCC_ClockConfig+0x268>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d93f      	bls.n	800264a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025ca:	4b7a      	ldr	r3, [pc, #488]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d033      	beq.n	800264a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d12f      	bne.n	800264a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025ea:	4b72      	ldr	r3, [pc, #456]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025f2:	4a70      	ldr	r2, [pc, #448]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 80025f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80025fa:	2380      	movs	r3, #128	@ 0x80
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	e024      	b.n	800264a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d107      	bne.n	8002618 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002608:	4b6a      	ldr	r3, [pc, #424]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d109      	bne.n	8002628 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0c6      	b.n	80027a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002618:	4b66      	ldr	r3, [pc, #408]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0be      	b.n	80027a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002628:	f000 f8ce 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 800262c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4a61      	ldr	r2, [pc, #388]	@ (80027b8 <HAL_RCC_ClockConfig+0x268>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d909      	bls.n	800264a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002636:	4b5f      	ldr	r3, [pc, #380]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800263e:	4a5d      	ldr	r2, [pc, #372]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 8002640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002644:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002646:	2380      	movs	r3, #128	@ 0x80
 8002648:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800264a:	4b5a      	ldr	r3, [pc, #360]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f023 0203 	bic.w	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	4957      	ldr	r1, [pc, #348]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 8002658:	4313      	orrs	r3, r2
 800265a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800265c:	f7ff f90e 	bl	800187c <HAL_GetTick>
 8002660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	e00a      	b.n	800267a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002664:	f7ff f90a 	bl	800187c <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002672:	4293      	cmp	r3, r2
 8002674:	d901      	bls.n	800267a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e095      	b.n	80027a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267a:	4b4e      	ldr	r3, [pc, #312]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 020c 	and.w	r2, r3, #12
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	429a      	cmp	r2, r3
 800268a:	d1eb      	bne.n	8002664 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d023      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a4:	4b43      	ldr	r3, [pc, #268]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	4a42      	ldr	r2, [pc, #264]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 80026aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d007      	beq.n	80026cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80026bc:	4b3d      	ldr	r3, [pc, #244]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80026c4:	4a3b      	ldr	r2, [pc, #236]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 80026c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026cc:	4b39      	ldr	r3, [pc, #228]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	4936      	ldr	r1, [pc, #216]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	608b      	str	r3, [r1, #8]
 80026de:	e008      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2b80      	cmp	r3, #128	@ 0x80
 80026e4:	d105      	bne.n	80026f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80026e6:	4b33      	ldr	r3, [pc, #204]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	4a32      	ldr	r2, [pc, #200]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 80026ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026f2:	4b2f      	ldr	r3, [pc, #188]	@ (80027b0 <HAL_RCC_ClockConfig+0x260>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d21d      	bcs.n	800273c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002700:	4b2b      	ldr	r3, [pc, #172]	@ (80027b0 <HAL_RCC_ClockConfig+0x260>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f023 020f 	bic.w	r2, r3, #15
 8002708:	4929      	ldr	r1, [pc, #164]	@ (80027b0 <HAL_RCC_ClockConfig+0x260>)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	4313      	orrs	r3, r2
 800270e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002710:	f7ff f8b4 	bl	800187c <HAL_GetTick>
 8002714:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002716:	e00a      	b.n	800272e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002718:	f7ff f8b0 	bl	800187c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e03b      	b.n	80027a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b20      	ldr	r3, [pc, #128]	@ (80027b0 <HAL_RCC_ClockConfig+0x260>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d1ed      	bne.n	8002718 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002748:	4b1a      	ldr	r3, [pc, #104]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4917      	ldr	r1, [pc, #92]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 8002756:	4313      	orrs	r3, r2
 8002758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b00      	cmp	r3, #0
 8002764:	d009      	beq.n	800277a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002766:	4b13      	ldr	r3, [pc, #76]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	490f      	ldr	r1, [pc, #60]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800277a:	f000 f825 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 800277e:	4602      	mov	r2, r0
 8002780:	4b0c      	ldr	r3, [pc, #48]	@ (80027b4 <HAL_RCC_ClockConfig+0x264>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	490c      	ldr	r1, [pc, #48]	@ (80027bc <HAL_RCC_ClockConfig+0x26c>)
 800278c:	5ccb      	ldrb	r3, [r1, r3]
 800278e:	f003 031f 	and.w	r3, r3, #31
 8002792:	fa22 f303 	lsr.w	r3, r2, r3
 8002796:	4a0a      	ldr	r2, [pc, #40]	@ (80027c0 <HAL_RCC_ClockConfig+0x270>)
 8002798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800279a:	4b0a      	ldr	r3, [pc, #40]	@ (80027c4 <HAL_RCC_ClockConfig+0x274>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff f832 	bl	8001808 <HAL_InitTick>
 80027a4:	4603      	mov	r3, r0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40022000 	.word	0x40022000
 80027b4:	40021000 	.word	0x40021000
 80027b8:	04c4b400 	.word	0x04c4b400
 80027bc:	0800802c 	.word	0x0800802c
 80027c0:	20000000 	.word	0x20000000
 80027c4:	20000004 	.word	0x20000004

080027c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002880 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d102      	bne.n	80027e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027da:	4b2a      	ldr	r3, [pc, #168]	@ (8002884 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	e047      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027e0:	4b27      	ldr	r3, [pc, #156]	@ (8002880 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 030c 	and.w	r3, r3, #12
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d102      	bne.n	80027f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027ec:	4b26      	ldr	r3, [pc, #152]	@ (8002888 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	e03e      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80027f2:	4b23      	ldr	r3, [pc, #140]	@ (8002880 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d136      	bne.n	800286c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027fe:	4b20      	ldr	r3, [pc, #128]	@ (8002880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002808:	4b1d      	ldr	r3, [pc, #116]	@ (8002880 <HAL_RCC_GetSysClockFreq+0xb8>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	3301      	adds	r3, #1
 8002814:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b03      	cmp	r3, #3
 800281a:	d10c      	bne.n	8002836 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800281c:	4a1a      	ldr	r2, [pc, #104]	@ (8002888 <HAL_RCC_GetSysClockFreq+0xc0>)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	fbb2 f3f3 	udiv	r3, r2, r3
 8002824:	4a16      	ldr	r2, [pc, #88]	@ (8002880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002826:	68d2      	ldr	r2, [r2, #12]
 8002828:	0a12      	lsrs	r2, r2, #8
 800282a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800282e:	fb02 f303 	mul.w	r3, r2, r3
 8002832:	617b      	str	r3, [r7, #20]
      break;
 8002834:	e00c      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002836:	4a13      	ldr	r2, [pc, #76]	@ (8002884 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	fbb2 f3f3 	udiv	r3, r2, r3
 800283e:	4a10      	ldr	r2, [pc, #64]	@ (8002880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002840:	68d2      	ldr	r2, [r2, #12]
 8002842:	0a12      	lsrs	r2, r2, #8
 8002844:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002848:	fb02 f303 	mul.w	r3, r2, r3
 800284c:	617b      	str	r3, [r7, #20]
      break;
 800284e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002850:	4b0b      	ldr	r3, [pc, #44]	@ (8002880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	0e5b      	lsrs	r3, r3, #25
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	3301      	adds	r3, #1
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	fbb2 f3f3 	udiv	r3, r2, r3
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	e001      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002870:	693b      	ldr	r3, [r7, #16]
}
 8002872:	4618      	mov	r0, r3
 8002874:	371c      	adds	r7, #28
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	00f42400 	.word	0x00f42400
 8002888:	016e3600 	.word	0x016e3600

0800288c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002890:	4b03      	ldr	r3, [pc, #12]	@ (80028a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002892:	681b      	ldr	r3, [r3, #0]
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	20000000 	.word	0x20000000

080028a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028a8:	f7ff fff0 	bl	800288c <HAL_RCC_GetHCLKFreq>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	0a1b      	lsrs	r3, r3, #8
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	4904      	ldr	r1, [pc, #16]	@ (80028cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80028ba:	5ccb      	ldrb	r3, [r1, r3]
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000
 80028cc:	0800803c 	.word	0x0800803c

080028d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028d4:	f7ff ffda 	bl	800288c <HAL_RCC_GetHCLKFreq>
 80028d8:	4602      	mov	r2, r0
 80028da:	4b06      	ldr	r3, [pc, #24]	@ (80028f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	0adb      	lsrs	r3, r3, #11
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	4904      	ldr	r1, [pc, #16]	@ (80028f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028e6:	5ccb      	ldrb	r3, [r1, r3]
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000
 80028f8:	0800803c 	.word	0x0800803c

080028fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002902:	4b1e      	ldr	r3, [pc, #120]	@ (800297c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800290c:	4b1b      	ldr	r3, [pc, #108]	@ (800297c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	3301      	adds	r3, #1
 8002918:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	2b03      	cmp	r3, #3
 800291e:	d10c      	bne.n	800293a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002920:	4a17      	ldr	r2, [pc, #92]	@ (8002980 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	fbb2 f3f3 	udiv	r3, r2, r3
 8002928:	4a14      	ldr	r2, [pc, #80]	@ (800297c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800292a:	68d2      	ldr	r2, [r2, #12]
 800292c:	0a12      	lsrs	r2, r2, #8
 800292e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002932:	fb02 f303 	mul.w	r3, r2, r3
 8002936:	617b      	str	r3, [r7, #20]
    break;
 8002938:	e00c      	b.n	8002954 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800293a:	4a12      	ldr	r2, [pc, #72]	@ (8002984 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002942:	4a0e      	ldr	r2, [pc, #56]	@ (800297c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002944:	68d2      	ldr	r2, [r2, #12]
 8002946:	0a12      	lsrs	r2, r2, #8
 8002948:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800294c:	fb02 f303 	mul.w	r3, r2, r3
 8002950:	617b      	str	r3, [r7, #20]
    break;
 8002952:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002954:	4b09      	ldr	r3, [pc, #36]	@ (800297c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	0e5b      	lsrs	r3, r3, #25
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	3301      	adds	r3, #1
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	fbb2 f3f3 	udiv	r3, r2, r3
 800296c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800296e:	687b      	ldr	r3, [r7, #4]
}
 8002970:	4618      	mov	r0, r3
 8002972:	371c      	adds	r7, #28
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	40021000 	.word	0x40021000
 8002980:	016e3600 	.word	0x016e3600
 8002984:	00f42400 	.word	0x00f42400

08002988 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002990:	2300      	movs	r3, #0
 8002992:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002994:	2300      	movs	r3, #0
 8002996:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 8098 	beq.w	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a6:	2300      	movs	r3, #0
 80029a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029aa:	4b43      	ldr	r3, [pc, #268]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10d      	bne.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b6:	4b40      	ldr	r3, [pc, #256]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ba:	4a3f      	ldr	r2, [pc, #252]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80029c2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ce:	2301      	movs	r3, #1
 80029d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029d2:	4b3a      	ldr	r3, [pc, #232]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a39      	ldr	r2, [pc, #228]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029de:	f7fe ff4d 	bl	800187c <HAL_GetTick>
 80029e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029e4:	e009      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e6:	f7fe ff49 	bl	800187c <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d902      	bls.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	74fb      	strb	r3, [r7, #19]
        break;
 80029f8:	e005      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029fa:	4b30      	ldr	r3, [pc, #192]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0ef      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002a06:	7cfb      	ldrb	r3, [r7, #19]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d159      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a16:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d01e      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d019      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a28:	4b23      	ldr	r3, [pc, #140]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a34:	4b20      	ldr	r3, [pc, #128]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a3a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a44:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a54:	4a18      	ldr	r2, [pc, #96]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d016      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a66:	f7fe ff09 	bl	800187c <HAL_GetTick>
 8002a6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a6c:	e00b      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6e:	f7fe ff05 	bl	800187c <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d902      	bls.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	74fb      	strb	r3, [r7, #19]
            break;
 8002a84:	e006      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a86:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0ec      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002a94:	7cfb      	ldrb	r3, [r7, #19]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10b      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a9a:	4b07      	ldr	r3, [pc, #28]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aa8:	4903      	ldr	r1, [pc, #12]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ab2:	7cfb      	ldrb	r3, [r7, #19]
 8002ab4:	74bb      	strb	r3, [r7, #18]
 8002ab6:	e005      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac0:	7cfb      	ldrb	r3, [r7, #19]
 8002ac2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ac4:	7c7b      	ldrb	r3, [r7, #17]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d105      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aca:	4ba7      	ldr	r3, [pc, #668]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ace:	4aa6      	ldr	r2, [pc, #664]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ad4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00a      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ae2:	4ba1      	ldr	r3, [pc, #644]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae8:	f023 0203 	bic.w	r2, r3, #3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	499d      	ldr	r1, [pc, #628]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b04:	4b98      	ldr	r3, [pc, #608]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b0a:	f023 020c 	bic.w	r2, r3, #12
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	4995      	ldr	r1, [pc, #596]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b26:	4b90      	ldr	r3, [pc, #576]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b2c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	498c      	ldr	r1, [pc, #560]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00a      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b48:	4b87      	ldr	r3, [pc, #540]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	4984      	ldr	r1, [pc, #528]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b6a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	497b      	ldr	r1, [pc, #492]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b8c:	4b76      	ldr	r3, [pc, #472]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b92:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	4973      	ldr	r1, [pc, #460]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bae:	4b6e      	ldr	r3, [pc, #440]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	496a      	ldr	r1, [pc, #424]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bd0:	4b65      	ldr	r3, [pc, #404]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4962      	ldr	r1, [pc, #392]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bf2:	4b5d      	ldr	r3, [pc, #372]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c00:	4959      	ldr	r1, [pc, #356]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c14:	4b54      	ldr	r3, [pc, #336]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c1a:	f023 0203 	bic.w	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c22:	4951      	ldr	r1, [pc, #324]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c36:	4b4c      	ldr	r3, [pc, #304]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c44:	4948      	ldr	r1, [pc, #288]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d015      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c58:	4b43      	ldr	r3, [pc, #268]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c66:	4940      	ldr	r1, [pc, #256]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c76:	d105      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c78:	4b3b      	ldr	r3, [pc, #236]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4a3a      	ldr	r2, [pc, #232]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c82:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d015      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c90:	4b35      	ldr	r3, [pc, #212]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c9e:	4932      	ldr	r1, [pc, #200]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002caa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cae:	d105      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	4a2c      	ldr	r2, [pc, #176]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cba:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d015      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002cc8:	4b27      	ldr	r3, [pc, #156]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd6:	4924      	ldr	r1, [pc, #144]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ce6:	d105      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a1e      	ldr	r2, [pc, #120]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cf2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d015      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d00:	4b19      	ldr	r3, [pc, #100]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d0e:	4916      	ldr	r1, [pc, #88]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d1e:	d105      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d20:	4b11      	ldr	r3, [pc, #68]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4a10      	ldr	r2, [pc, #64]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d2a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d019      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d38:	4b0b      	ldr	r3, [pc, #44]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	4908      	ldr	r1, [pc, #32]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d56:	d109      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d58:	4b03      	ldr	r3, [pc, #12]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	4a02      	ldr	r2, [pc, #8]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d62:	60d3      	str	r3, [r2, #12]
 8002d64:	e002      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002d66:	bf00      	nop
 8002d68:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d015      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d78:	4b29      	ldr	r3, [pc, #164]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d86:	4926      	ldr	r1, [pc, #152]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d96:	d105      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d98:	4b21      	ldr	r3, [pc, #132]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	4a20      	ldr	r2, [pc, #128]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002da2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d015      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002db0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dbe:	4918      	ldr	r1, [pc, #96]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dce:	d105      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002dd0:	4b13      	ldr	r3, [pc, #76]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4a12      	ldr	r2, [pc, #72]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002dd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dda:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d015      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002de8:	4b0d      	ldr	r3, [pc, #52]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002dea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002dee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df6:	490a      	ldr	r1, [pc, #40]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e06:	d105      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e08:	4b05      	ldr	r3, [pc, #20]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	4a04      	ldr	r2, [pc, #16]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e12:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002e14:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40021000 	.word	0x40021000

08002e24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e042      	b.n	8002ebc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d106      	bne.n	8002e4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7fe fc31 	bl	80016b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2224      	movs	r2, #36	@ 0x24
 8002e52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0201 	bic.w	r2, r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fbb2 	bl	80035d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f8b3 	bl	8002fe0 <UART_SetConfig>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e01b      	b.n	8002ebc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ea2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 fc31 	bl	800371c <UART_CheckIdleState>
 8002eba:	4603      	mov	r3, r0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	@ 0x28
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	d17b      	bne.n	8002fd6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <HAL_UART_Transmit+0x26>
 8002ee4:	88fb      	ldrh	r3, [r7, #6]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e074      	b.n	8002fd8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2221      	movs	r2, #33	@ 0x21
 8002efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002efe:	f7fe fcbd 	bl	800187c <HAL_GetTick>
 8002f02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	88fa      	ldrh	r2, [r7, #6]
 8002f08:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	88fa      	ldrh	r2, [r7, #6]
 8002f10:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f1c:	d108      	bne.n	8002f30 <HAL_UART_Transmit+0x6c>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d104      	bne.n	8002f30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	e003      	b.n	8002f38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f38:	e030      	b.n	8002f9c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2200      	movs	r2, #0
 8002f42:	2180      	movs	r1, #128	@ 0x80
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 fc93 	bl	8003870 <UART_WaitOnFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e03d      	b.n	8002fd8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10b      	bne.n	8002f7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f70:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	3302      	adds	r3, #2
 8002f76:	61bb      	str	r3, [r7, #24]
 8002f78:	e007      	b.n	8002f8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	781a      	ldrb	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	3301      	adds	r3, #1
 8002f88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1c8      	bne.n	8002f3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2140      	movs	r1, #64	@ 0x40
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 fc5c 	bl	8003870 <UART_WaitOnFlagUntilTimeout>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e006      	b.n	8002fd8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	e000      	b.n	8002fd8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002fd6:	2302      	movs	r3, #2
  }
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3720      	adds	r7, #32
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe4:	b08c      	sub	sp, #48	@ 0x30
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	4313      	orrs	r3, r2
 8003006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4baa      	ldr	r3, [pc, #680]	@ (80032b8 <UART_SetConfig+0x2d8>)
 8003010:	4013      	ands	r3, r2
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003018:	430b      	orrs	r3, r1
 800301a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a9f      	ldr	r2, [pc, #636]	@ (80032bc <UART_SetConfig+0x2dc>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d004      	beq.n	800304c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003048:	4313      	orrs	r3, r2
 800304a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003056:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003060:	430b      	orrs	r3, r1
 8003062:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306a:	f023 010f 	bic.w	r1, r3, #15
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a90      	ldr	r2, [pc, #576]	@ (80032c0 <UART_SetConfig+0x2e0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d125      	bne.n	80030d0 <UART_SetConfig+0xf0>
 8003084:	4b8f      	ldr	r3, [pc, #572]	@ (80032c4 <UART_SetConfig+0x2e4>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b03      	cmp	r3, #3
 8003090:	d81a      	bhi.n	80030c8 <UART_SetConfig+0xe8>
 8003092:	a201      	add	r2, pc, #4	@ (adr r2, 8003098 <UART_SetConfig+0xb8>)
 8003094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003098:	080030a9 	.word	0x080030a9
 800309c:	080030b9 	.word	0x080030b9
 80030a0:	080030b1 	.word	0x080030b1
 80030a4:	080030c1 	.word	0x080030c1
 80030a8:	2301      	movs	r3, #1
 80030aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030ae:	e116      	b.n	80032de <UART_SetConfig+0x2fe>
 80030b0:	2302      	movs	r3, #2
 80030b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030b6:	e112      	b.n	80032de <UART_SetConfig+0x2fe>
 80030b8:	2304      	movs	r3, #4
 80030ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030be:	e10e      	b.n	80032de <UART_SetConfig+0x2fe>
 80030c0:	2308      	movs	r3, #8
 80030c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030c6:	e10a      	b.n	80032de <UART_SetConfig+0x2fe>
 80030c8:	2310      	movs	r3, #16
 80030ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030ce:	e106      	b.n	80032de <UART_SetConfig+0x2fe>
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a7c      	ldr	r2, [pc, #496]	@ (80032c8 <UART_SetConfig+0x2e8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d138      	bne.n	800314c <UART_SetConfig+0x16c>
 80030da:	4b7a      	ldr	r3, [pc, #488]	@ (80032c4 <UART_SetConfig+0x2e4>)
 80030dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e0:	f003 030c 	and.w	r3, r3, #12
 80030e4:	2b0c      	cmp	r3, #12
 80030e6:	d82d      	bhi.n	8003144 <UART_SetConfig+0x164>
 80030e8:	a201      	add	r2, pc, #4	@ (adr r2, 80030f0 <UART_SetConfig+0x110>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003125 	.word	0x08003125
 80030f4:	08003145 	.word	0x08003145
 80030f8:	08003145 	.word	0x08003145
 80030fc:	08003145 	.word	0x08003145
 8003100:	08003135 	.word	0x08003135
 8003104:	08003145 	.word	0x08003145
 8003108:	08003145 	.word	0x08003145
 800310c:	08003145 	.word	0x08003145
 8003110:	0800312d 	.word	0x0800312d
 8003114:	08003145 	.word	0x08003145
 8003118:	08003145 	.word	0x08003145
 800311c:	08003145 	.word	0x08003145
 8003120:	0800313d 	.word	0x0800313d
 8003124:	2300      	movs	r3, #0
 8003126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800312a:	e0d8      	b.n	80032de <UART_SetConfig+0x2fe>
 800312c:	2302      	movs	r3, #2
 800312e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003132:	e0d4      	b.n	80032de <UART_SetConfig+0x2fe>
 8003134:	2304      	movs	r3, #4
 8003136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800313a:	e0d0      	b.n	80032de <UART_SetConfig+0x2fe>
 800313c:	2308      	movs	r3, #8
 800313e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003142:	e0cc      	b.n	80032de <UART_SetConfig+0x2fe>
 8003144:	2310      	movs	r3, #16
 8003146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800314a:	e0c8      	b.n	80032de <UART_SetConfig+0x2fe>
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a5e      	ldr	r2, [pc, #376]	@ (80032cc <UART_SetConfig+0x2ec>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d125      	bne.n	80031a2 <UART_SetConfig+0x1c2>
 8003156:	4b5b      	ldr	r3, [pc, #364]	@ (80032c4 <UART_SetConfig+0x2e4>)
 8003158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800315c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003160:	2b30      	cmp	r3, #48	@ 0x30
 8003162:	d016      	beq.n	8003192 <UART_SetConfig+0x1b2>
 8003164:	2b30      	cmp	r3, #48	@ 0x30
 8003166:	d818      	bhi.n	800319a <UART_SetConfig+0x1ba>
 8003168:	2b20      	cmp	r3, #32
 800316a:	d00a      	beq.n	8003182 <UART_SetConfig+0x1a2>
 800316c:	2b20      	cmp	r3, #32
 800316e:	d814      	bhi.n	800319a <UART_SetConfig+0x1ba>
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <UART_SetConfig+0x19a>
 8003174:	2b10      	cmp	r3, #16
 8003176:	d008      	beq.n	800318a <UART_SetConfig+0x1aa>
 8003178:	e00f      	b.n	800319a <UART_SetConfig+0x1ba>
 800317a:	2300      	movs	r3, #0
 800317c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003180:	e0ad      	b.n	80032de <UART_SetConfig+0x2fe>
 8003182:	2302      	movs	r3, #2
 8003184:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003188:	e0a9      	b.n	80032de <UART_SetConfig+0x2fe>
 800318a:	2304      	movs	r3, #4
 800318c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003190:	e0a5      	b.n	80032de <UART_SetConfig+0x2fe>
 8003192:	2308      	movs	r3, #8
 8003194:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003198:	e0a1      	b.n	80032de <UART_SetConfig+0x2fe>
 800319a:	2310      	movs	r3, #16
 800319c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031a0:	e09d      	b.n	80032de <UART_SetConfig+0x2fe>
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a4a      	ldr	r2, [pc, #296]	@ (80032d0 <UART_SetConfig+0x2f0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d125      	bne.n	80031f8 <UART_SetConfig+0x218>
 80031ac:	4b45      	ldr	r3, [pc, #276]	@ (80032c4 <UART_SetConfig+0x2e4>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80031b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80031b8:	d016      	beq.n	80031e8 <UART_SetConfig+0x208>
 80031ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80031bc:	d818      	bhi.n	80031f0 <UART_SetConfig+0x210>
 80031be:	2b80      	cmp	r3, #128	@ 0x80
 80031c0:	d00a      	beq.n	80031d8 <UART_SetConfig+0x1f8>
 80031c2:	2b80      	cmp	r3, #128	@ 0x80
 80031c4:	d814      	bhi.n	80031f0 <UART_SetConfig+0x210>
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <UART_SetConfig+0x1f0>
 80031ca:	2b40      	cmp	r3, #64	@ 0x40
 80031cc:	d008      	beq.n	80031e0 <UART_SetConfig+0x200>
 80031ce:	e00f      	b.n	80031f0 <UART_SetConfig+0x210>
 80031d0:	2300      	movs	r3, #0
 80031d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031d6:	e082      	b.n	80032de <UART_SetConfig+0x2fe>
 80031d8:	2302      	movs	r3, #2
 80031da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031de:	e07e      	b.n	80032de <UART_SetConfig+0x2fe>
 80031e0:	2304      	movs	r3, #4
 80031e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031e6:	e07a      	b.n	80032de <UART_SetConfig+0x2fe>
 80031e8:	2308      	movs	r3, #8
 80031ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ee:	e076      	b.n	80032de <UART_SetConfig+0x2fe>
 80031f0:	2310      	movs	r3, #16
 80031f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031f6:	e072      	b.n	80032de <UART_SetConfig+0x2fe>
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a35      	ldr	r2, [pc, #212]	@ (80032d4 <UART_SetConfig+0x2f4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d12a      	bne.n	8003258 <UART_SetConfig+0x278>
 8003202:	4b30      	ldr	r3, [pc, #192]	@ (80032c4 <UART_SetConfig+0x2e4>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003208:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800320c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003210:	d01a      	beq.n	8003248 <UART_SetConfig+0x268>
 8003212:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003216:	d81b      	bhi.n	8003250 <UART_SetConfig+0x270>
 8003218:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800321c:	d00c      	beq.n	8003238 <UART_SetConfig+0x258>
 800321e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003222:	d815      	bhi.n	8003250 <UART_SetConfig+0x270>
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <UART_SetConfig+0x250>
 8003228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800322c:	d008      	beq.n	8003240 <UART_SetConfig+0x260>
 800322e:	e00f      	b.n	8003250 <UART_SetConfig+0x270>
 8003230:	2300      	movs	r3, #0
 8003232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003236:	e052      	b.n	80032de <UART_SetConfig+0x2fe>
 8003238:	2302      	movs	r3, #2
 800323a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800323e:	e04e      	b.n	80032de <UART_SetConfig+0x2fe>
 8003240:	2304      	movs	r3, #4
 8003242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003246:	e04a      	b.n	80032de <UART_SetConfig+0x2fe>
 8003248:	2308      	movs	r3, #8
 800324a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800324e:	e046      	b.n	80032de <UART_SetConfig+0x2fe>
 8003250:	2310      	movs	r3, #16
 8003252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003256:	e042      	b.n	80032de <UART_SetConfig+0x2fe>
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a17      	ldr	r2, [pc, #92]	@ (80032bc <UART_SetConfig+0x2dc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d13a      	bne.n	80032d8 <UART_SetConfig+0x2f8>
 8003262:	4b18      	ldr	r3, [pc, #96]	@ (80032c4 <UART_SetConfig+0x2e4>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003268:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800326c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003270:	d01a      	beq.n	80032a8 <UART_SetConfig+0x2c8>
 8003272:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003276:	d81b      	bhi.n	80032b0 <UART_SetConfig+0x2d0>
 8003278:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800327c:	d00c      	beq.n	8003298 <UART_SetConfig+0x2b8>
 800327e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003282:	d815      	bhi.n	80032b0 <UART_SetConfig+0x2d0>
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <UART_SetConfig+0x2b0>
 8003288:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800328c:	d008      	beq.n	80032a0 <UART_SetConfig+0x2c0>
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x2d0>
 8003290:	2300      	movs	r3, #0
 8003292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003296:	e022      	b.n	80032de <UART_SetConfig+0x2fe>
 8003298:	2302      	movs	r3, #2
 800329a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800329e:	e01e      	b.n	80032de <UART_SetConfig+0x2fe>
 80032a0:	2304      	movs	r3, #4
 80032a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032a6:	e01a      	b.n	80032de <UART_SetConfig+0x2fe>
 80032a8:	2308      	movs	r3, #8
 80032aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032ae:	e016      	b.n	80032de <UART_SetConfig+0x2fe>
 80032b0:	2310      	movs	r3, #16
 80032b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032b6:	e012      	b.n	80032de <UART_SetConfig+0x2fe>
 80032b8:	cfff69f3 	.word	0xcfff69f3
 80032bc:	40008000 	.word	0x40008000
 80032c0:	40013800 	.word	0x40013800
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40004400 	.word	0x40004400
 80032cc:	40004800 	.word	0x40004800
 80032d0:	40004c00 	.word	0x40004c00
 80032d4:	40005000 	.word	0x40005000
 80032d8:	2310      	movs	r3, #16
 80032da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4aae      	ldr	r2, [pc, #696]	@ (800359c <UART_SetConfig+0x5bc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	f040 8097 	bne.w	8003418 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d823      	bhi.n	800333a <UART_SetConfig+0x35a>
 80032f2:	a201      	add	r2, pc, #4	@ (adr r2, 80032f8 <UART_SetConfig+0x318>)
 80032f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f8:	0800331d 	.word	0x0800331d
 80032fc:	0800333b 	.word	0x0800333b
 8003300:	08003325 	.word	0x08003325
 8003304:	0800333b 	.word	0x0800333b
 8003308:	0800332b 	.word	0x0800332b
 800330c:	0800333b 	.word	0x0800333b
 8003310:	0800333b 	.word	0x0800333b
 8003314:	0800333b 	.word	0x0800333b
 8003318:	08003333 	.word	0x08003333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800331c:	f7ff fac2 	bl	80028a4 <HAL_RCC_GetPCLK1Freq>
 8003320:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003322:	e010      	b.n	8003346 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003324:	4b9e      	ldr	r3, [pc, #632]	@ (80035a0 <UART_SetConfig+0x5c0>)
 8003326:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003328:	e00d      	b.n	8003346 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800332a:	f7ff fa4d 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 800332e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003330:	e009      	b.n	8003346 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003336:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003338:	e005      	b.n	8003346 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003344:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 8130 	beq.w	80035ae <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003352:	4a94      	ldr	r2, [pc, #592]	@ (80035a4 <UART_SetConfig+0x5c4>)
 8003354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003358:	461a      	mov	r2, r3
 800335a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003360:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	4413      	add	r3, r2
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	429a      	cmp	r2, r3
 8003370:	d305      	bcc.n	800337e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	429a      	cmp	r2, r3
 800337c:	d903      	bls.n	8003386 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003384:	e113      	b.n	80035ae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	2200      	movs	r2, #0
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	60fa      	str	r2, [r7, #12]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003392:	4a84      	ldr	r2, [pc, #528]	@ (80035a4 <UART_SetConfig+0x5c4>)
 8003394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003398:	b29b      	uxth	r3, r3
 800339a:	2200      	movs	r2, #0
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033a8:	f7fd fd56 	bl	8000e58 <__aeabi_uldivmod>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4610      	mov	r0, r2
 80033b2:	4619      	mov	r1, r3
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	020b      	lsls	r3, r1, #8
 80033be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80033c2:	0202      	lsls	r2, r0, #8
 80033c4:	6979      	ldr	r1, [r7, #20]
 80033c6:	6849      	ldr	r1, [r1, #4]
 80033c8:	0849      	lsrs	r1, r1, #1
 80033ca:	2000      	movs	r0, #0
 80033cc:	460c      	mov	r4, r1
 80033ce:	4605      	mov	r5, r0
 80033d0:	eb12 0804 	adds.w	r8, r2, r4
 80033d4:	eb43 0905 	adc.w	r9, r3, r5
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	469a      	mov	sl, r3
 80033e0:	4693      	mov	fp, r2
 80033e2:	4652      	mov	r2, sl
 80033e4:	465b      	mov	r3, fp
 80033e6:	4640      	mov	r0, r8
 80033e8:	4649      	mov	r1, r9
 80033ea:	f7fd fd35 	bl	8000e58 <__aeabi_uldivmod>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4613      	mov	r3, r2
 80033f4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033fc:	d308      	bcc.n	8003410 <UART_SetConfig+0x430>
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003404:	d204      	bcs.n	8003410 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6a3a      	ldr	r2, [r7, #32]
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	e0ce      	b.n	80035ae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003416:	e0ca      	b.n	80035ae <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003420:	d166      	bne.n	80034f0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003422:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003426:	2b08      	cmp	r3, #8
 8003428:	d827      	bhi.n	800347a <UART_SetConfig+0x49a>
 800342a:	a201      	add	r2, pc, #4	@ (adr r2, 8003430 <UART_SetConfig+0x450>)
 800342c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003430:	08003455 	.word	0x08003455
 8003434:	0800345d 	.word	0x0800345d
 8003438:	08003465 	.word	0x08003465
 800343c:	0800347b 	.word	0x0800347b
 8003440:	0800346b 	.word	0x0800346b
 8003444:	0800347b 	.word	0x0800347b
 8003448:	0800347b 	.word	0x0800347b
 800344c:	0800347b 	.word	0x0800347b
 8003450:	08003473 	.word	0x08003473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003454:	f7ff fa26 	bl	80028a4 <HAL_RCC_GetPCLK1Freq>
 8003458:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800345a:	e014      	b.n	8003486 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800345c:	f7ff fa38 	bl	80028d0 <HAL_RCC_GetPCLK2Freq>
 8003460:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003462:	e010      	b.n	8003486 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003464:	4b4e      	ldr	r3, [pc, #312]	@ (80035a0 <UART_SetConfig+0x5c0>)
 8003466:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003468:	e00d      	b.n	8003486 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800346a:	f7ff f9ad 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 800346e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003470:	e009      	b.n	8003486 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003472:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003476:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003478:	e005      	b.n	8003486 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003484:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 8090 	beq.w	80035ae <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003492:	4a44      	ldr	r2, [pc, #272]	@ (80035a4 <UART_SetConfig+0x5c4>)
 8003494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003498:	461a      	mov	r2, r3
 800349a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349c:	fbb3 f3f2 	udiv	r3, r3, r2
 80034a0:	005a      	lsls	r2, r3, #1
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	085b      	lsrs	r3, r3, #1
 80034a8:	441a      	add	r2, r3
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	2b0f      	cmp	r3, #15
 80034b8:	d916      	bls.n	80034e8 <UART_SetConfig+0x508>
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c0:	d212      	bcs.n	80034e8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	f023 030f 	bic.w	r3, r3, #15
 80034ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	085b      	lsrs	r3, r3, #1
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	8bfb      	ldrh	r3, [r7, #30]
 80034da:	4313      	orrs	r3, r2
 80034dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	8bfa      	ldrh	r2, [r7, #30]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	e062      	b.n	80035ae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80034ee:	e05e      	b.n	80035ae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d828      	bhi.n	800354a <UART_SetConfig+0x56a>
 80034f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003500 <UART_SetConfig+0x520>)
 80034fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fe:	bf00      	nop
 8003500:	08003525 	.word	0x08003525
 8003504:	0800352d 	.word	0x0800352d
 8003508:	08003535 	.word	0x08003535
 800350c:	0800354b 	.word	0x0800354b
 8003510:	0800353b 	.word	0x0800353b
 8003514:	0800354b 	.word	0x0800354b
 8003518:	0800354b 	.word	0x0800354b
 800351c:	0800354b 	.word	0x0800354b
 8003520:	08003543 	.word	0x08003543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003524:	f7ff f9be 	bl	80028a4 <HAL_RCC_GetPCLK1Freq>
 8003528:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800352a:	e014      	b.n	8003556 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800352c:	f7ff f9d0 	bl	80028d0 <HAL_RCC_GetPCLK2Freq>
 8003530:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003532:	e010      	b.n	8003556 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003534:	4b1a      	ldr	r3, [pc, #104]	@ (80035a0 <UART_SetConfig+0x5c0>)
 8003536:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003538:	e00d      	b.n	8003556 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800353a:	f7ff f945 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 800353e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003540:	e009      	b.n	8003556 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003546:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003548:	e005      	b.n	8003556 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003554:	bf00      	nop
    }

    if (pclk != 0U)
 8003556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003558:	2b00      	cmp	r3, #0
 800355a:	d028      	beq.n	80035ae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003560:	4a10      	ldr	r2, [pc, #64]	@ (80035a4 <UART_SetConfig+0x5c4>)
 8003562:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003566:	461a      	mov	r2, r3
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	fbb3 f2f2 	udiv	r2, r3, r2
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	085b      	lsrs	r3, r3, #1
 8003574:	441a      	add	r2, r3
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	fbb2 f3f3 	udiv	r3, r2, r3
 800357e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	2b0f      	cmp	r3, #15
 8003584:	d910      	bls.n	80035a8 <UART_SetConfig+0x5c8>
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800358c:	d20c      	bcs.n	80035a8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	b29a      	uxth	r2, r3
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60da      	str	r2, [r3, #12]
 8003598:	e009      	b.n	80035ae <UART_SetConfig+0x5ce>
 800359a:	bf00      	nop
 800359c:	40008000 	.word	0x40008000
 80035a0:	00f42400 	.word	0x00f42400
 80035a4:	08008044 	.word	0x08008044
      }
      else
      {
        ret = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2200      	movs	r2, #0
 80035c2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2200      	movs	r2, #0
 80035c8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80035ca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3730      	adds	r7, #48	@ 0x30
 80035d2:	46bd      	mov	sp, r7
 80035d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080035d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d01a      	beq.n	80036ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036d6:	d10a      	bne.n	80036ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	605a      	str	r2, [r3, #4]
  }
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b098      	sub	sp, #96	@ 0x60
 8003720:	af02      	add	r7, sp, #8
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800372c:	f7fe f8a6 	bl	800187c <HAL_GetTick>
 8003730:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b08      	cmp	r3, #8
 800373e:	d12f      	bne.n	80037a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003740:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003748:	2200      	movs	r2, #0
 800374a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f88e 	bl	8003870 <UART_WaitOnFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d022      	beq.n	80037a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003762:	e853 3f00 	ldrex	r3, [r3]
 8003766:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800376a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800376e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003778:	647b      	str	r3, [r7, #68]	@ 0x44
 800377a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800377e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003780:	e841 2300 	strex	r3, r2, [r1]
 8003784:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1e6      	bne.n	800375a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e063      	b.n	8003868 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d149      	bne.n	8003842 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b6:	2200      	movs	r2, #0
 80037b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f857 	bl	8003870 <UART_WaitOnFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d03c      	beq.n	8003842 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d0:	e853 3f00 	ldrex	r3, [r3]
 80037d4:	623b      	str	r3, [r7, #32]
   return(result);
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80037e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037ee:	e841 2300 	strex	r3, r2, [r1]
 80037f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e6      	bne.n	80037c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	3308      	adds	r3, #8
 8003800:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	e853 3f00 	ldrex	r3, [r3]
 8003808:	60fb      	str	r3, [r7, #12]
   return(result);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f023 0301 	bic.w	r3, r3, #1
 8003810:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3308      	adds	r3, #8
 8003818:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800381a:	61fa      	str	r2, [r7, #28]
 800381c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381e:	69b9      	ldr	r1, [r7, #24]
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	e841 2300 	strex	r3, r2, [r1]
 8003826:	617b      	str	r3, [r7, #20]
   return(result);
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1e5      	bne.n	80037fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e012      	b.n	8003868 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2220      	movs	r2, #32
 8003846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2220      	movs	r2, #32
 800384e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3758      	adds	r7, #88	@ 0x58
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	4613      	mov	r3, r2
 800387e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003880:	e04f      	b.n	8003922 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003888:	d04b      	beq.n	8003922 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388a:	f7fd fff7 	bl	800187c <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e04e      	b.n	8003942 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d037      	beq.n	8003922 <UART_WaitOnFlagUntilTimeout+0xb2>
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b80      	cmp	r3, #128	@ 0x80
 80038b6:	d034      	beq.n	8003922 <UART_WaitOnFlagUntilTimeout+0xb2>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b40      	cmp	r3, #64	@ 0x40
 80038bc:	d031      	beq.n	8003922 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d110      	bne.n	80038ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2208      	movs	r2, #8
 80038d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f838 	bl	800394a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2208      	movs	r2, #8
 80038de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e029      	b.n	8003942 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038fc:	d111      	bne.n	8003922 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003906:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 f81e 	bl	800394a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2220      	movs	r2, #32
 8003912:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e00f      	b.n	8003942 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	69da      	ldr	r2, [r3, #28]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4013      	ands	r3, r2
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	429a      	cmp	r2, r3
 8003930:	bf0c      	ite	eq
 8003932:	2301      	moveq	r3, #1
 8003934:	2300      	movne	r3, #0
 8003936:	b2db      	uxtb	r3, r3
 8003938:	461a      	mov	r2, r3
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	429a      	cmp	r2, r3
 800393e:	d0a0      	beq.n	8003882 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800394a:	b480      	push	{r7}
 800394c:	b095      	sub	sp, #84	@ 0x54
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800395a:	e853 3f00 	ldrex	r3, [r3]
 800395e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003962:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003966:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	461a      	mov	r2, r3
 800396e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003970:	643b      	str	r3, [r7, #64]	@ 0x40
 8003972:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003974:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003976:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003978:	e841 2300 	strex	r3, r2, [r1]
 800397c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800397e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1e6      	bne.n	8003952 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3308      	adds	r3, #8
 800398a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	e853 3f00 	ldrex	r3, [r3]
 8003992:	61fb      	str	r3, [r7, #28]
   return(result);
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800399a:	f023 0301 	bic.w	r3, r3, #1
 800399e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3308      	adds	r3, #8
 80039a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039b0:	e841 2300 	strex	r3, r2, [r1]
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e3      	bne.n	8003984 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d118      	bne.n	80039f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	e853 3f00 	ldrex	r3, [r3]
 80039d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f023 0310 	bic.w	r3, r3, #16
 80039d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039e2:	61bb      	str	r3, [r7, #24]
 80039e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e6:	6979      	ldr	r1, [r7, #20]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	613b      	str	r3, [r7, #16]
   return(result);
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1e6      	bne.n	80039c4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003a0a:	bf00      	nop
 8003a0c:	3754      	adds	r7, #84	@ 0x54
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b085      	sub	sp, #20
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_UARTEx_DisableFifoMode+0x16>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e027      	b.n	8003a7c <HAL_UARTEx_DisableFifoMode+0x66>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2224      	movs	r2, #36	@ 0x24
 8003a38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0201 	bic.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003a5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e02d      	b.n	8003afc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2224      	movs	r2, #36	@ 0x24
 8003aac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f84f 	bl	8003b80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e02d      	b.n	8003b78 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2224      	movs	r2, #36	@ 0x24
 8003b28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0201 	bic.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f811 	bl	8003b80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d108      	bne.n	8003ba2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ba0:	e031      	b.n	8003c06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ba2:	2308      	movs	r3, #8
 8003ba4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003ba6:	2308      	movs	r3, #8
 8003ba8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	0e5b      	lsrs	r3, r3, #25
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	0f5b      	lsrs	r3, r3, #29
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003bca:	7bbb      	ldrb	r3, [r7, #14]
 8003bcc:	7b3a      	ldrb	r2, [r7, #12]
 8003bce:	4911      	ldr	r1, [pc, #68]	@ (8003c14 <UARTEx_SetNbDataToProcess+0x94>)
 8003bd0:	5c8a      	ldrb	r2, [r1, r2]
 8003bd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003bd6:	7b3a      	ldrb	r2, [r7, #12]
 8003bd8:	490f      	ldr	r1, [pc, #60]	@ (8003c18 <UARTEx_SetNbDataToProcess+0x98>)
 8003bda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003bdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	7b7a      	ldrb	r2, [r7, #13]
 8003bec:	4909      	ldr	r1, [pc, #36]	@ (8003c14 <UARTEx_SetNbDataToProcess+0x94>)
 8003bee:	5c8a      	ldrb	r2, [r1, r2]
 8003bf0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003bf4:	7b7a      	ldrb	r2, [r7, #13]
 8003bf6:	4908      	ldr	r1, [pc, #32]	@ (8003c18 <UARTEx_SetNbDataToProcess+0x98>)
 8003bf8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003bfa:	fb93 f3f2 	sdiv	r3, r3, r2
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003c06:	bf00      	nop
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	0800805c 	.word	0x0800805c
 8003c18:	08008064 	.word	0x08008064

08003c1c <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b096      	sub	sp, #88	@ 0x58
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3303      	adds	r3, #3
 8003c2e:	f023 0303 	bic.w	r3, r3, #3
 8003c32:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003c34:	f3ef 8310 	mrs	r3, PRIMASK
 8003c38:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
    return(posture);
 8003c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8003c3c:	633b      	str	r3, [r7, #48]	@ 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8003c3e:	b672      	cpsid	i
#endif
    return(int_posture);
 8003c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8003c42:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8003c44:	4b55      	ldr	r3, [pc, #340]	@ (8003d9c <_tx_byte_allocate+0x180>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	64bb      	str	r3, [r7, #72]	@ 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c52:	621a      	str	r2, [r3, #32]
 8003c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c56:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5a:	f383 8810 	msr	PRIMASK, r3
}
 8003c5e:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 f9b2 	bl	8003fcc <_tx_byte_pool_search>
 8003c68:	6478      	str	r0, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8003c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8003c72:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8003c74:	b672      	cpsid	i
    return(int_posture);
 8003c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8003c78:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8003c7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8003c80:	2301      	movs	r3, #1
 8003c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c84:	e006      	b.n	8003c94 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d101      	bne.n	8003c94 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8003c90:	2301      	movs	r3, #1
 8003c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8003c94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0d9      	beq.n	8003c4e <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c9e:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8003ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <_tx_byte_allocate+0x9c>
 8003ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ca8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	f383 8810 	msr	PRIMASK, r3
}
 8003cb0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cb6:	e06c      	b.n	8003d92 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d061      	beq.n	8003d82 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8003cbe:	4b38      	ldr	r3, [pc, #224]	@ (8003da0 <_tx_byte_allocate+0x184>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8003cc6:	2310      	movs	r3, #16
 8003cc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ccc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	f383 8810 	msr	PRIMASK, r3
}
 8003cd4:	e05d      	b.n	8003d92 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8003cd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cd8:	4a32      	ldr	r2, [pc, #200]	@ (8003da4 <_tx_byte_allocate+0x188>)
 8003cda:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8003cdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8003ce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8003ce8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8003cee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cf0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cf8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d00:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8003d0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d109      	bne.n	8003d26 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d16:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8003d18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d1c:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8003d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d22:	675a      	str	r2, [r3, #116]	@ 0x74
 8003d24:	e011      	b.n	8003d4a <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8003d2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d2e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d30:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8003d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d36:	63bb      	str	r3, [r7, #56]	@ 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8003d38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d3c:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d42:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8003d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d48:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8003d4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d4c:	2209      	movs	r2, #9
 8003d4e:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8003d50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d52:	2201      	movs	r2, #1
 8003d54:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8003d56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8003d5c:	4b10      	ldr	r3, [pc, #64]	@ (8003da0 <_tx_byte_allocate+0x184>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3301      	adds	r3, #1
 8003d62:	4a0f      	ldr	r2, [pc, #60]	@ (8003da0 <_tx_byte_allocate+0x184>)
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d68:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	f383 8810 	msr	PRIMASK, r3
}
 8003d70:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8003d72:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003d74:	f000 fe12 	bl	800499c <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8003d78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d80:	e007      	b.n	8003d92 <_tx_byte_allocate+0x176>
 8003d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d84:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f383 8810 	msr	PRIMASK, r3
}
 8003d8c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8003d8e:	2310      	movs	r3, #16
 8003d90:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8003d92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3758      	adds	r7, #88	@ 0x58
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	2000047c 	.word	0x2000047c
 8003da0:	20000518 	.word	0x20000518
 8003da4:	08003da9 	.word	0x08003da9

08003da8 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08e      	sub	sp, #56	@ 0x38
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003db2:	f3ef 8310 	mrs	r3, PRIMASK
 8003db6:	623b      	str	r3, [r7, #32]
    return(posture);
 8003db8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8003dba:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003dbc:	b672      	cpsid	i
    return(int_posture);
 8003dbe:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8003dc0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dc6:	4a33      	ldr	r2, [pc, #204]	@ (8003e94 <_tx_byte_pool_cleanup+0xec>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d158      	bne.n	8003e7e <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d152      	bne.n	8003e7e <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ddc:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8003dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d04c      	beq.n	8003e7e <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8003de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a2b      	ldr	r2, [pc, #172]	@ (8003e98 <_tx_byte_pool_cleanup+0xf0>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d147      	bne.n	8003e7e <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8003dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d043      	beq.n	8003e7e <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e00:	1e5a      	subs	r2, r3, #1
 8003e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e04:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8003e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8003e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d103      	bne.n	8003e1a <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8003e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e14:	2200      	movs	r2, #0
 8003e16:	625a      	str	r2, [r3, #36]	@ 0x24
 8003e18:	e013      	b.n	8003e42 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e24:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8003e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e2a:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e30:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8003e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d102      	bne.n	8003e42 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e40:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e46:	2b09      	cmp	r3, #9
 8003e48:	d119      	bne.n	8003e7e <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2210      	movs	r2, #16
 8003e4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8003e52:	4b12      	ldr	r3, [pc, #72]	@ (8003e9c <_tx_byte_pool_cleanup+0xf4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3301      	adds	r3, #1
 8003e58:	4a10      	ldr	r2, [pc, #64]	@ (8003e9c <_tx_byte_pool_cleanup+0xf4>)
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e5e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f383 8810 	msr	PRIMASK, r3
}
 8003e66:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 fc83 	bl	8004774 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003e6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e72:	61bb      	str	r3, [r7, #24]
    return(posture);
 8003e74:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8003e76:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003e78:	b672      	cpsid	i
    return(int_posture);
 8003e7a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8003e7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e80:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f383 8810 	msr	PRIMASK, r3
}
 8003e88:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8003e8a:	bf00      	nop
 8003e8c:	3738      	adds	r7, #56	@ 0x38
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	08003da9 	.word	0x08003da9
 8003e98:	42595445 	.word	0x42595445
 8003e9c:	20000518 	.word	0x20000518

08003ea0 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08e      	sub	sp, #56	@ 0x38
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
 8003eac:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8003eae:	2234      	movs	r2, #52	@ 0x34
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f002 f94f 	bl	8006156 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	f023 0303 	bic.w	r3, r3, #3
 8003ebe:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	f1a3 0208 	sub.w	r2, r3, #8
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2202      	movs	r2, #2
 8003eec:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8003ef2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8003efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003efc:	3b04      	subs	r3, #4
 8003efe:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8003f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 8003f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f0c:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8003f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f10:	3b04      	subs	r3, #4
 8003f12:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8003f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8003f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 8003f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f2a:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8003f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f32:	3304      	adds	r3, #4
 8003f34:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8003f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f38:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8003f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8003fbc <_tx_byte_pool_create+0x11c>)
 8003f3e:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003f46:	f3ef 8310 	mrs	r3, PRIMASK
 8003f4a:	61bb      	str	r3, [r7, #24]
    return(posture);
 8003f4c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8003f4e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003f50:	b672      	cpsid	i
    return(int_posture);
 8003f52:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8003f54:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4a19      	ldr	r2, [pc, #100]	@ (8003fc0 <_tx_byte_pool_create+0x120>)
 8003f5a:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8003f5c:	4b19      	ldr	r3, [pc, #100]	@ (8003fc4 <_tx_byte_pool_create+0x124>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d109      	bne.n	8003f78 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8003f64:	4a18      	ldr	r2, [pc, #96]	@ (8003fc8 <_tx_byte_pool_create+0x128>)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f76:	e011      	b.n	8003f9c <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8003f78:	4b13      	ldr	r3, [pc, #76]	@ (8003fc8 <_tx_byte_pool_create+0x128>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f82:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a3a      	ldr	r2, [r7, #32]
 8003f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8003f9c:	4b09      	ldr	r3, [pc, #36]	@ (8003fc4 <_tx_byte_pool_create+0x124>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	4a08      	ldr	r2, [pc, #32]	@ (8003fc4 <_tx_byte_pool_create+0x124>)
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f383 8810 	msr	PRIMASK, r3
}
 8003fb0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3738      	adds	r7, #56	@ 0x38
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	ffffeeee 	.word	0xffffeeee
 8003fc0:	42595445 	.word	0x42595445
 8003fc4:	20000470 	.word	0x20000470
 8003fc8:	2000046c 	.word	0x2000046c

08003fcc <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b097      	sub	sp, #92	@ 0x5c
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003fda:	f3ef 8310 	mrs	r3, PRIMASK
 8003fde:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8003fe2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003fe4:	b672      	cpsid	i
    return(int_posture);
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8003fe8:	657b      	str	r3, [r7, #84]	@ 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	3b02      	subs	r3, #2
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	643b      	str	r3, [r7, #64]	@ 0x40
    if (memory_size >= total_theoretical_available)
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d308      	bcc.n	8004014 <_tx_byte_pool_search+0x48>
 8004002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004004:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f383 8810 	msr	PRIMASK, r3
}
 800400c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800400e:	2300      	movs	r3, #0
 8004010:	653b      	str	r3, [r7, #80]	@ 0x50
 8004012:	e0dd      	b.n	80041d0 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8004014:	4b72      	ldr	r3, [pc, #456]	@ (80041e0 <_tx_byte_pool_search+0x214>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800401e:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	653b      	str	r3, [r7, #80]	@ 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	3301      	adds	r3, #1
 800402c:	64bb      	str	r3, [r7, #72]	@ 0x48
        available_bytes =  ((ULONG) 0);
 800402e:	2300      	movs	r3, #0
 8004030:	64fb      	str	r3, [r7, #76]	@ 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8004032:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004034:	3304      	adds	r3, #4
 8004036:	63bb      	str	r3, [r7, #56]	@ 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8004038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403a:	637b      	str	r3, [r7, #52]	@ 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800403c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a68      	ldr	r2, [pc, #416]	@ (80041e4 <_tx_byte_pool_search+0x218>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d143      	bne.n	80040ce <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8004046:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004048:	2b00      	cmp	r3, #0
 800404a:	d104      	bne.n	8004056 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004050:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8004052:	2301      	movs	r3, #1
 8004054:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8004056:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004058:	633b      	str	r3, [r7, #48]	@ 0x30
                next_ptr =             *this_block_link_ptr;
 800405a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8004060:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	64fb      	str	r3, [r7, #76]	@ 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8004068:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800406a:	3b08      	subs	r3, #8
 800406c:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800406e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d257      	bcs.n	8004126 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8004076:	2300      	movs	r3, #0
 8004078:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800407a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800407c:	3304      	adds	r3, #4
 800407e:	63bb      	str	r3, [r7, #56]	@ 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8004080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004082:	637b      	str	r3, [r7, #52]	@ 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8004084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a56      	ldr	r2, [pc, #344]	@ (80041e4 <_tx_byte_pool_search+0x218>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d113      	bne.n	80040b6 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800408e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004090:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8004092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004098:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	1e5a      	subs	r2, r3, #1
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d114      	bne.n	80040d8 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80040b2:	615a      	str	r2, [r3, #20]
 80040b4:	e010      	b.n	80040d8 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80040b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b8:	62bb      	str	r3, [r7, #40]	@ 0x28
                        current_ptr =  *next_block_link_ptr;
 80040ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 80040c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d008      	beq.n	80040d8 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 80040c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040c8:	3b01      	subs	r3, #1
 80040ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040cc:	e004      	b.n	80040d8 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80040ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040d0:	633b      	str	r3, [r7, #48]	@ 0x30
                current_ptr =  *this_block_link_ptr;
 80040d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 80040d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 80040de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040e0:	3b01      	subs	r3, #1
 80040e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f383 8810 	msr	PRIMASK, r3
}
 80040ee:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80040f0:	f3ef 8310 	mrs	r3, PRIMASK
 80040f4:	61bb      	str	r3, [r7, #24]
    return(posture);
 80040f6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80040f8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80040fa:	b672      	cpsid	i
    return(int_posture);
 80040fc:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 80040fe:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004106:	429a      	cmp	r2, r3
 8004108:	d009      	beq.n	800411e <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	653b      	str	r3, [r7, #80]	@ 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	3301      	adds	r3, #1
 8004116:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800411c:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800411e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004120:	2b00      	cmp	r3, #0
 8004122:	d186      	bne.n	8004032 <_tx_byte_pool_search+0x66>
 8004124:	e000      	b.n	8004128 <_tx_byte_pool_search+0x15c>
                    break;
 8004126:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8004128:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800412a:	2b00      	cmp	r3, #0
 800412c:	d048      	beq.n	80041c0 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800412e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b13      	cmp	r3, #19
 8004136:	d91e      	bls.n	8004176 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	3308      	adds	r3, #8
 800413c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800413e:	4413      	add	r3, r2
 8004140:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8004142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004144:	62bb      	str	r3, [r7, #40]	@ 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8004146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004148:	633b      	str	r3, [r7, #48]	@ 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800414a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004150:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8004152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004154:	3304      	adds	r3, #4
 8004156:	63bb      	str	r3, [r7, #56]	@ 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8004158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800415a:	637b      	str	r3, [r7, #52]	@ 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800415c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800415e:	4a21      	ldr	r2, [pc, #132]	@ (80041e4 <_tx_byte_pool_search+0x218>)
 8004160:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800416c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004170:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	64fb      	str	r3, [r7, #76]	@ 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8004176:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004178:	3304      	adds	r3, #4
 800417a:	63bb      	str	r3, [r7, #56]	@ 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800417c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800417e:	633b      	str	r3, [r7, #48]	@ 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8004180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f1a3 0208 	sub.w	r2, r3, #8
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800419c:	429a      	cmp	r2, r3
 800419e:	d105      	bne.n	80041ac <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80041a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041a2:	633b      	str	r3, [r7, #48]	@ 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 80041a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	615a      	str	r2, [r3, #20]
 80041ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f383 8810 	msr	PRIMASK, r3
}
 80041b6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80041b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041ba:	3308      	adds	r3, #8
 80041bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80041be:	e007      	b.n	80041d0 <_tx_byte_pool_search+0x204>
 80041c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f383 8810 	msr	PRIMASK, r3
}
 80041ca:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 80041d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	375c      	adds	r7, #92	@ 0x5c
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	2000047c 	.word	0x2000047c
 80041e4:	ffffeeee 	.word	0xffffeeee

080041e8 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80041ec:	f000 f956 	bl	800449c <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80041f0:	f000 fe14 	bl	8004e1c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80041f4:	4b12      	ldr	r3, [pc, #72]	@ (8004240 <_tx_initialize_high_level+0x58>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	4b12      	ldr	r3, [pc, #72]	@ (8004244 <_tx_initialize_high_level+0x5c>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8004200:	4b11      	ldr	r3, [pc, #68]	@ (8004248 <_tx_initialize_high_level+0x60>)
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	4b11      	ldr	r3, [pc, #68]	@ (800424c <_tx_initialize_high_level+0x64>)
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800420c:	4b10      	ldr	r3, [pc, #64]	@ (8004250 <_tx_initialize_high_level+0x68>)
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	4b10      	ldr	r3, [pc, #64]	@ (8004254 <_tx_initialize_high_level+0x6c>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8004218:	4b0f      	ldr	r3, [pc, #60]	@ (8004258 <_tx_initialize_high_level+0x70>)
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	4b0f      	ldr	r3, [pc, #60]	@ (800425c <_tx_initialize_high_level+0x74>)
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8004224:	4b0e      	ldr	r3, [pc, #56]	@ (8004260 <_tx_initialize_high_level+0x78>)
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	4b0e      	ldr	r3, [pc, #56]	@ (8004264 <_tx_initialize_high_level+0x7c>)
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8004230:	4b0d      	ldr	r3, [pc, #52]	@ (8004268 <_tx_initialize_high_level+0x80>)
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	4b0d      	ldr	r3, [pc, #52]	@ (800426c <_tx_initialize_high_level+0x84>)
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
#endif
}
 800423c:	bf00      	nop
 800423e:	bd80      	pop	{r7, pc}
 8004240:	20000444 	.word	0x20000444
 8004244:	20000448 	.word	0x20000448
 8004248:	2000044c 	.word	0x2000044c
 800424c:	20000450 	.word	0x20000450
 8004250:	20000454 	.word	0x20000454
 8004254:	20000458 	.word	0x20000458
 8004258:	20000464 	.word	0x20000464
 800425c:	20000468 	.word	0x20000468
 8004260:	2000046c 	.word	0x2000046c
 8004264:	20000470 	.word	0x20000470
 8004268:	2000045c 	.word	0x2000045c
 800426c:	20000460 	.word	0x20000460

08004270 <_tx_initialize_kernel_enter>:
/*                                            initialization,             */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8004274:	4b11      	ldr	r3, [pc, #68]	@ (80042bc <_tx_initialize_kernel_enter+0x4c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 800427c:	d00c      	beq.n	8004298 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800427e:	4b0f      	ldr	r3, [pc, #60]	@ (80042bc <_tx_initialize_kernel_enter+0x4c>)
 8004280:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8004284:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8004286:	f7fb ffcb 	bl	8000220 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800428a:	f7ff ffad 	bl	80041e8 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800428e:	4b0c      	ldr	r3, [pc, #48]	@ (80042c0 <_tx_initialize_kernel_enter+0x50>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3301      	adds	r3, #1
 8004294:	4a0a      	ldr	r2, [pc, #40]	@ (80042c0 <_tx_initialize_kernel_enter+0x50>)
 8004296:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8004298:	4b08      	ldr	r3, [pc, #32]	@ (80042bc <_tx_initialize_kernel_enter+0x4c>)
 800429a:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800429e:	601a      	str	r2, [r3, #0]
    /* Optional random number generator initialization.  */
    TX_INITIALIZE_RANDOM_GENERATOR_INITIALIZATION

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80042a0:	4b08      	ldr	r3, [pc, #32]	@ (80042c4 <_tx_initialize_kernel_enter+0x54>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fc ffdf 	bl	8001268 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80042aa:	4b04      	ldr	r3, [pc, #16]	@ (80042bc <_tx_initialize_kernel_enter+0x4c>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]
    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

#if defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE)
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
 80042b0:	f001 f9ce 	bl	8005650 <_tx_execution_initialize>
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80042b4:	f7fc f804 	bl	80002c0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80042b8:	bf00      	nop
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	2000000c 	.word	0x2000000c
 80042c0:	20000518 	.word	0x20000518
 80042c4:	20000474 	.word	0x20000474

080042c8 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b092      	sub	sp, #72	@ 0x48
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 80042d6:	2300      	movs	r3, #0
 80042d8:	643b      	str	r3, [r7, #64]	@ 0x40
#endif

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 80042da:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80042dc:	21ef      	movs	r1, #239	@ 0xef
 80042de:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80042e0:	f001 ff39 	bl	8006156 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80042e4:	22c0      	movs	r2, #192	@ 0xc0
 80042e6:	2100      	movs	r1, #0
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f001 ff34 	bl	8006156 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004304:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800430a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004310:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004316:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800431e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004324:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2220      	movs	r2, #32
 800432a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800432e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004330:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8004332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004334:	3b01      	subs	r3, #1
 8004336:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004338:	4413      	add	r3, r2
 800433a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004340:	611a      	str	r2, [r3, #16]

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Preemption-threshold is enabled, setup accordingly.  */
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004346:	63da      	str	r2, [r3, #60]	@ 0x3c
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800434c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2203      	movs	r2, #3
 8004354:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4a48      	ldr	r2, [pc, #288]	@ (800447c <_tx_thread_create+0x1b4>)
 800435a:	655a      	str	r2, [r3, #84]	@ 0x54
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8004362:	4947      	ldr	r1, [pc, #284]	@ (8004480 <_tx_thread_create+0x1b8>)
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f7fc f80b 	bl	8000380 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800436a:	f3ef 8310 	mrs	r3, PRIMASK
 800436e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8004370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8004372:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8004374:	b672      	cpsid	i
    return(int_posture);
 8004376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8004378:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4a41      	ldr	r2, [pc, #260]	@ (8004484 <_tx_thread_create+0x1bc>)
 800437e:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8004380:	4b41      	ldr	r3, [pc, #260]	@ (8004488 <_tx_thread_create+0x1c0>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10b      	bne.n	80043a0 <_tx_thread_create+0xd8>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8004388:	4a40      	ldr	r2, [pc, #256]	@ (800448c <_tx_thread_create+0x1c4>)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800439e:	e016      	b.n	80043ce <_tx_thread_create+0x106>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80043a0:	4b3a      	ldr	r3, [pc, #232]	@ (800448c <_tx_thread_create+0x1c4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80043a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043ac:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80043ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80043b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80043ce:	4b2e      	ldr	r3, [pc, #184]	@ (8004488 <_tx_thread_create+0x1c0>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3301      	adds	r3, #1
 80043d4:	4a2c      	ldr	r2, [pc, #176]	@ (8004488 <_tx_thread_create+0x1c0>)
 80043d6:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80043d8:	4b2d      	ldr	r3, [pc, #180]	@ (8004490 <_tx_thread_create+0x1c8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3301      	adds	r3, #1
 80043de:	4a2c      	ldr	r2, [pc, #176]	@ (8004490 <_tx_thread_create+0x1c8>)
 80043e0:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80043e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d129      	bne.n	800443c <_tx_thread_create+0x174>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80043e8:	f3ef 8305 	mrs	r3, IPSR
 80043ec:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 80043ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80043f0:	4b28      	ldr	r3, [pc, #160]	@ (8004494 <_tx_thread_create+0x1cc>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80043fa:	d30d      	bcc.n	8004418 <_tx_thread_create+0x150>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80043fc:	4b26      	ldr	r3, [pc, #152]	@ (8004498 <_tx_thread_create+0x1d0>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8004402:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004404:	2b00      	cmp	r3, #0
 8004406:	d009      	beq.n	800441c <_tx_thread_create+0x154>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8004408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800440a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800440c:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800440e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004412:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004414:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004416:	e001      	b.n	800441c <_tx_thread_create+0x154>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8004418:	2300      	movs	r3, #0
 800441a:	647b      	str	r3, [r7, #68]	@ 0x44
 800441c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800441e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	f383 8810 	msr	PRIMASK, r3
}
 8004426:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f9a3 	bl	8004774 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800442e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004430:	2b00      	cmp	r3, #0
 8004432:	d01e      	beq.n	8004472 <_tx_thread_create+0x1aa>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8004434:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004436:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004438:	63da      	str	r2, [r3, #60]	@ 0x3c
 800443a:	e01a      	b.n	8004472 <_tx_thread_create+0x1aa>
 800443c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800443e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f383 8810 	msr	PRIMASK, r3
}
 8004446:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004448:	f3ef 8310 	mrs	r3, PRIMASK
 800444c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800444e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8004450:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004452:	b672      	cpsid	i
    return(int_posture);
 8004454:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8004456:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8004458:	4b0d      	ldr	r3, [pc, #52]	@ (8004490 <_tx_thread_create+0x1c8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3b01      	subs	r3, #1
 800445e:	4a0c      	ldr	r2, [pc, #48]	@ (8004490 <_tx_thread_create+0x1c8>)
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004464:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	f383 8810 	msr	PRIMASK, r3
}
 800446c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800446e:	f000 f947 	bl	8004700 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3748      	adds	r7, #72	@ 0x48
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	08004d61 	.word	0x08004d61
 8004480:	08004521 	.word	0x08004521
 8004484:	54485244 	.word	0x54485244
 8004488:	20000488 	.word	0x20000488
 800448c:	20000484 	.word	0x20000484
 8004490:	20000518 	.word	0x20000518
 8004494:	2000000c 	.word	0x2000000c
 8004498:	20000480 	.word	0x20000480

0800449c <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80044a0:	4b14      	ldr	r3, [pc, #80]	@ (80044f4 <_tx_thread_initialize+0x58>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80044a6:	4b14      	ldr	r3, [pc, #80]	@ (80044f8 <_tx_thread_initialize+0x5c>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 80044ac:	4b13      	ldr	r3, [pc, #76]	@ (80044fc <_tx_thread_initialize+0x60>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD
    TX_MEMSET(&_tx_thread_preempted_maps[0], 0, (sizeof(_tx_thread_preempted_maps)));
 80044b2:	4b13      	ldr	r3, [pc, #76]	@ (8004500 <_tx_thread_initialize+0x64>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80044b8:	4b12      	ldr	r3, [pc, #72]	@ (8004504 <_tx_thread_initialize+0x68>)
 80044ba:	2220      	movs	r2, #32
 80044bc:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80044be:	2280      	movs	r2, #128	@ 0x80
 80044c0:	2100      	movs	r1, #0
 80044c2:	4811      	ldr	r0, [pc, #68]	@ (8004508 <_tx_thread_initialize+0x6c>)
 80044c4:	f001 fe47 	bl	8006156 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80044c8:	4b10      	ldr	r3, [pc, #64]	@ (800450c <_tx_thread_initialize+0x70>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80044ce:	4b10      	ldr	r3, [pc, #64]	@ (8004510 <_tx_thread_initialize+0x74>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80044d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004514 <_tx_thread_initialize+0x78>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80044da:	4b0f      	ldr	r3, [pc, #60]	@ (8004518 <_tx_thread_initialize+0x7c>)
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
#endif
#if defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE)
                            | (((ULONG) 1) << 7)
 80044e0:	4b0e      	ldr	r3, [pc, #56]	@ (800451c <_tx_thread_initialize+0x80>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
    _tx_build_options =  _tx_build_options 
 80044ec:	4a0b      	ldr	r2, [pc, #44]	@ (800451c <_tx_thread_initialize+0x80>)
 80044ee:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 80044f0:	bf00      	nop
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	2000047c 	.word	0x2000047c
 80044f8:	20000480 	.word	0x20000480
 80044fc:	2000048c 	.word	0x2000048c
 8004500:	20000490 	.word	0x20000490
 8004504:	20000494 	.word	0x20000494
 8004508:	20000498 	.word	0x20000498
 800450c:	20000484 	.word	0x20000484
 8004510:	20000488 	.word	0x20000488
 8004514:	20000518 	.word	0x20000518
 8004518:	2000051c 	.word	0x2000051c
 800451c:	20000520 	.word	0x20000520

08004520 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08c      	sub	sp, #48	@ 0x30
 8004524:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8004526:	4b33      	ldr	r3, [pc, #204]	@ (80045f4 <_tx_thread_shell_entry+0xd4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800452c:	f3ef 8310 	mrs	r3, PRIMASK
 8004530:	61bb      	str	r3, [r7, #24]
    return(posture);
 8004532:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8004534:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004536:	b672      	cpsid	i
    return(int_posture);
 8004538:	697b      	ldr	r3, [r7, #20]
    TX_THREAD_STARTED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Disable interrupts.  */
    TX_DISABLE
 800453a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 800453c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800453e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004542:	627b      	str	r3, [r7, #36]	@ 0x24
 8004544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004546:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f383 8810 	msr	PRIMASK, r3
}
 800454e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8004550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <_tx_thread_shell_entry+0x3e>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 8004556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004558:	2100      	movs	r1, #0
 800455a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800455c:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800455e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004562:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004564:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004566:	4610      	mov	r0, r2
 8004568:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800456a:	4b23      	ldr	r3, [pc, #140]	@ (80045f8 <_tx_thread_shell_entry+0xd8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <_tx_thread_shell_entry+0x5a>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8004572:	4b21      	ldr	r3, [pc, #132]	@ (80045f8 <_tx_thread_shell_entry+0xd8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004578:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800457a:	f3ef 8310 	mrs	r3, PRIMASK
 800457e:	607b      	str	r3, [r7, #4]
    return(posture);
 8004580:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8004582:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004584:	b672      	cpsid	i
    return(int_posture);
 8004586:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8004588:	62bb      	str	r3, [r7, #40]	@ 0x28

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine again.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 800458a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800458c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004590:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8004592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004594:	2201      	movs	r2, #1
 8004596:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800459a:	2201      	movs	r2, #1
 800459c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800459e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a0:	2200      	movs	r2, #0
 80045a2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80045a4:	4b15      	ldr	r3, [pc, #84]	@ (80045fc <_tx_thread_shell_entry+0xdc>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3301      	adds	r3, #1
 80045aa:	4a14      	ldr	r2, [pc, #80]	@ (80045fc <_tx_thread_shell_entry+0xdc>)
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f383 8810 	msr	PRIMASK, r3
}
 80045b8:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80045ba:	f3ef 8314 	mrs	r3, CONTROL
 80045be:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80045c0:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80045c2:	623b      	str	r3, [r7, #32]
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	f023 0304 	bic.w	r3, r3, #4
 80045ca:	623b      	str	r3, [r7, #32]
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f383 8814 	msr	CONTROL, r3
}
 80045d6:	bf00      	nop

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 80045d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <_tx_thread_shell_entry+0xc6>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 80045de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e0:	2101      	movs	r1, #1
 80045e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80045e4:	4798      	blx	r3
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80045e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80045e8:	f000 f9d8 	bl	800499c <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80045ec:	bf00      	nop
 80045ee:	3730      	adds	r7, #48	@ 0x30
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	2000047c 	.word	0x2000047c
 80045f8:	2000051c 	.word	0x2000051c
 80045fc:	20000518 	.word	0x20000518

08004600 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08e      	sub	sp, #56	@ 0x38
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004608:	f3ef 8310 	mrs	r3, PRIMASK
 800460c:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800460e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8004610:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8004612:	b672      	cpsid	i
    return(int_posture);
 8004614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8004616:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8004618:	4b35      	ldr	r3, [pc, #212]	@ (80046f0 <_tx_thread_sleep+0xf0>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800461e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004620:	2b00      	cmp	r3, #0
 8004622:	d108      	bne.n	8004636 <_tx_thread_sleep+0x36>
 8004624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004626:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	f383 8810 	msr	PRIMASK, r3
}
 800462e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8004630:	2313      	movs	r3, #19
 8004632:	637b      	str	r3, [r7, #52]	@ 0x34
 8004634:	e056      	b.n	80046e4 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004636:	f3ef 8305 	mrs	r3, IPSR
 800463a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800463c:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800463e:	4b2d      	ldr	r3, [pc, #180]	@ (80046f4 <_tx_thread_sleep+0xf4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4313      	orrs	r3, r2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d008      	beq.n	800465a <_tx_thread_sleep+0x5a>
 8004648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	f383 8810 	msr	PRIMASK, r3
}
 8004652:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8004654:	2313      	movs	r3, #19
 8004656:	637b      	str	r3, [r7, #52]	@ 0x34
 8004658:	e044      	b.n	80046e4 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800465a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800465c:	4a26      	ldr	r2, [pc, #152]	@ (80046f8 <_tx_thread_sleep+0xf8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d108      	bne.n	8004674 <_tx_thread_sleep+0x74>
 8004662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004664:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f383 8810 	msr	PRIMASK, r3
}
 800466c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800466e:	2313      	movs	r3, #19
 8004670:	637b      	str	r3, [r7, #52]	@ 0x34
 8004672:	e037      	b.n	80046e4 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d108      	bne.n	800468c <_tx_thread_sleep+0x8c>
 800467a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f383 8810 	msr	PRIMASK, r3
}
 8004684:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8004686:	2300      	movs	r3, #0
 8004688:	637b      	str	r3, [r7, #52]	@ 0x34
 800468a:	e02b      	b.n	80046e4 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800468c:	4b1b      	ldr	r3, [pc, #108]	@ (80046fc <_tx_thread_sleep+0xfc>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <_tx_thread_sleep+0xa6>
 8004694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004696:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f383 8810 	msr	PRIMASK, r3
}
 800469e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 80046a0:	2313      	movs	r3, #19
 80046a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80046a4:	e01e      	b.n	80046e4 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 80046a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a8:	2204      	movs	r2, #4
 80046aa:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80046ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ae:	2201      	movs	r2, #1
 80046b0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80046b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b4:	2200      	movs	r2, #0
 80046b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 80046ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80046c0:	4b0e      	ldr	r3, [pc, #56]	@ (80046fc <_tx_thread_sleep+0xfc>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3301      	adds	r3, #1
 80046c6:	4a0d      	ldr	r2, [pc, #52]	@ (80046fc <_tx_thread_sleep+0xfc>)
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046cc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f383 8810 	msr	PRIMASK, r3
}
 80046d4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80046d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80046d8:	f000 f960 	bl	800499c <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80046dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046e2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 80046e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3738      	adds	r7, #56	@ 0x38
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	2000047c 	.word	0x2000047c
 80046f4:	2000000c 	.word	0x2000000c
 80046f8:	200005c8 	.word	0x200005c8
 80046fc:	20000518 	.word	0x20000518

08004700 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8004700:	b480      	push	{r7}
 8004702:	b089      	sub	sp, #36	@ 0x24
 8004704:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004706:	4b17      	ldr	r3, [pc, #92]	@ (8004764 <_tx_thread_system_preempt_check+0x64>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d121      	bne.n	8004756 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8004712:	4b15      	ldr	r3, [pc, #84]	@ (8004768 <_tx_thread_system_preempt_check+0x68>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8004718:	4b14      	ldr	r3, [pc, #80]	@ (800476c <_tx_thread_system_preempt_check+0x6c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	429a      	cmp	r2, r3
 8004724:	d017      	beq.n	8004756 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004726:	4b12      	ldr	r3, [pc, #72]	@ (8004770 <_tx_thread_system_preempt_check+0x70>)
 8004728:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800472c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800472e:	f3ef 8305 	mrs	r3, IPSR
 8004732:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8004734:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10c      	bne.n	8004754 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800473a:	f3ef 8310 	mrs	r3, PRIMASK
 800473e:	60fb      	str	r3, [r7, #12]
    return(posture);
 8004740:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8004742:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004744:	b662      	cpsie	i
}
 8004746:	bf00      	nop
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f383 8810 	msr	PRIMASK, r3
}
 8004752:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8004754:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8004756:	bf00      	nop
 8004758:	3724      	adds	r7, #36	@ 0x24
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20000518 	.word	0x20000518
 8004768:	2000047c 	.word	0x2000047c
 800476c:	20000480 	.word	0x20000480
 8004770:	e000ed04 	.word	0xe000ed04

08004774 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b096      	sub	sp, #88	@ 0x58
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800477c:	f3ef 8310 	mrs	r3, PRIMASK
 8004780:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 8004782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 8004784:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8004786:	b672      	cpsid	i
    return(int_posture);
 8004788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800478a:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	334c      	adds	r3, #76	@ 0x4c
 8004798:	4618      	mov	r0, r3
 800479a:	f000 fc1d 	bl	8004fd8 <_tx_timer_system_deactivate>
 800479e:	e002      	b.n	80047a6 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80047a6:	4b75      	ldr	r3, [pc, #468]	@ (800497c <_tx_thread_system_resume+0x208>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	4a73      	ldr	r2, [pc, #460]	@ (800497c <_tx_thread_system_resume+0x208>)
 80047ae:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f040 8096 	bne.w	80048e6 <_tx_thread_system_resume+0x172>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 80aa 	beq.w	8004918 <_tx_thread_system_resume+0x1a4>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f040 8085 	bne.w	80048d8 <_tx_thread_system_resume+0x164>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d8:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80047da:	4a69      	ldr	r2, [pc, #420]	@ (8004980 <_tx_thread_system_resume+0x20c>)
 80047dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 80047e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d166      	bne.n	80048b8 <_tx_thread_system_resume+0x144>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80047ea:	4965      	ldr	r1, [pc, #404]	@ (8004980 <_tx_thread_system_resume+0x20c>)
 80047ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8004800:	2201      	movs	r2, #1
 8004802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800480a:	4b5e      	ldr	r3, [pc, #376]	@ (8004984 <_tx_thread_system_resume+0x210>)
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004810:	4313      	orrs	r3, r2
 8004812:	4a5c      	ldr	r2, [pc, #368]	@ (8004984 <_tx_thread_system_resume+0x210>)
 8004814:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8004816:	4b5c      	ldr	r3, [pc, #368]	@ (8004988 <_tx_thread_system_resume+0x214>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800481c:	429a      	cmp	r2, r3
 800481e:	d27b      	bcs.n	8004918 <_tx_thread_system_resume+0x1a4>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8004820:	4a59      	ldr	r2, [pc, #356]	@ (8004988 <_tx_thread_system_resume+0x214>)
 8004822:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004824:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8004826:	4b59      	ldr	r3, [pc, #356]	@ (800498c <_tx_thread_system_resume+0x218>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800482c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d103      	bne.n	800483a <_tx_thread_system_resume+0xc6>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8004832:	4a56      	ldr	r2, [pc, #344]	@ (800498c <_tx_thread_system_resume+0x218>)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	e06e      	b.n	8004918 <_tx_thread_system_resume+0x1a4>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800483a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800483c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800483e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004840:	429a      	cmp	r2, r3
 8004842:	d269      	bcs.n	8004918 <_tx_thread_system_resume+0x1a4>
                            {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

                                /* Determine if the preempted thread had preemption-threshold set.  */
                                if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_priority)
 8004844:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004846:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800484a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800484c:	429a      	cmp	r2, r3
 800484e:	d00b      	beq.n	8004868 <_tx_thread_system_resume+0xf4>
                                    TX_DIV32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
                                    _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                                    /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                                    TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 8004850:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004854:	2201      	movs	r2, #1
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	647b      	str	r3, [r7, #68]	@ 0x44
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800485c:	4b4c      	ldr	r3, [pc, #304]	@ (8004990 <_tx_thread_system_resume+0x21c>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004862:	4313      	orrs	r3, r2
 8004864:	4a4a      	ldr	r2, [pc, #296]	@ (8004990 <_tx_thread_system_resume+0x21c>)
 8004866:	6013      	str	r3, [r2, #0]
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8004868:	4a48      	ldr	r2, [pc, #288]	@ (800498c <_tx_thread_system_resume+0x218>)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004870:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004874:	f383 8810 	msr	PRIMASK, r3
}
 8004878:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800487a:	4b40      	ldr	r3, [pc, #256]	@ (800497c <_tx_thread_system_resume+0x208>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 8004880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004882:	2b00      	cmp	r3, #0
 8004884:	d174      	bne.n	8004970 <_tx_thread_system_resume+0x1fc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004886:	4b43      	ldr	r3, [pc, #268]	@ (8004994 <_tx_thread_system_resume+0x220>)
 8004888:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800488c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800488e:	f3ef 8305 	mrs	r3, IPSR
 8004892:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 8004894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (__get_ipsr_value() == 0)
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10c      	bne.n	80048b4 <_tx_thread_system_resume+0x140>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800489a:	f3ef 8310 	mrs	r3, PRIMASK
 800489e:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 80048a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 80048a2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80048a4:	b662      	cpsie	i
}
 80048a6:	bf00      	nop
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f383 8810 	msr	PRIMASK, r3
}
 80048b2:	bf00      	nop
}
 80048b4:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 80048b6:	e05b      	b.n	8004970 <_tx_thread_system_resume+0x1fc>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 80048b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048bc:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 80048be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 80048c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048ce:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048d4:	621a      	str	r2, [r3, #32]
 80048d6:	e01f      	b.n	8004918 <_tx_thread_system_resume+0x1a4>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2203      	movs	r2, #3
 80048e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80048e4:	e018      	b.n	8004918 <_tx_thread_system_resume+0x1a4>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d014      	beq.n	8004918 <_tx_thread_system_resume+0x1a4>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d010      	beq.n	8004918 <_tx_thread_system_resume+0x1a4>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <_tx_thread_system_resume+0x198>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	631a      	str	r2, [r3, #48]	@ 0x30
 800490a:	e005      	b.n	8004918 <_tx_thread_system_resume+0x1a4>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2203      	movs	r2, #3
 8004916:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8004918:	4b1f      	ldr	r3, [pc, #124]	@ (8004998 <_tx_thread_system_resume+0x224>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800491e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004920:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	f383 8810 	msr	PRIMASK, r3
}
 8004928:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800492a:	4b18      	ldr	r3, [pc, #96]	@ (800498c <_tx_thread_system_resume+0x218>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004930:	429a      	cmp	r2, r3
 8004932:	d020      	beq.n	8004976 <_tx_thread_system_resume+0x202>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004934:	4b11      	ldr	r3, [pc, #68]	@ (800497c <_tx_thread_system_resume+0x208>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 800493a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800493c:	2b00      	cmp	r3, #0
 800493e:	d11a      	bne.n	8004976 <_tx_thread_system_resume+0x202>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004940:	4b14      	ldr	r3, [pc, #80]	@ (8004994 <_tx_thread_system_resume+0x220>)
 8004942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004946:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004948:	f3ef 8305 	mrs	r3, IPSR
 800494c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800494e:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10f      	bne.n	8004974 <_tx_thread_system_resume+0x200>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004954:	f3ef 8310 	mrs	r3, PRIMASK
 8004958:	613b      	str	r3, [r7, #16]
    return(posture);
 800495a:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800495c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800495e:	b662      	cpsie	i
}
 8004960:	bf00      	nop
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f383 8810 	msr	PRIMASK, r3
}
 800496c:	bf00      	nop
}
 800496e:	e001      	b.n	8004974 <_tx_thread_system_resume+0x200>
                                return;
 8004970:	bf00      	nop
 8004972:	e000      	b.n	8004976 <_tx_thread_system_resume+0x202>
 8004974:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8004976:	3758      	adds	r7, #88	@ 0x58
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	20000518 	.word	0x20000518
 8004980:	20000498 	.word	0x20000498
 8004984:	2000048c 	.word	0x2000048c
 8004988:	20000494 	.word	0x20000494
 800498c:	20000480 	.word	0x20000480
 8004990:	20000490 	.word	0x20000490
 8004994:	e000ed04 	.word	0xe000ed04
 8004998:	2000047c 	.word	0x2000047c

0800499c <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b0a0      	sub	sp, #128	@ 0x80
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80049a4:	4b5a      	ldr	r3, [pc, #360]	@ (8004b10 <_tx_thread_system_suspend+0x174>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	67bb      	str	r3, [r7, #120]	@ 0x78
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80049aa:	f3ef 8310 	mrs	r3, PRIMASK
 80049ae:	657b      	str	r3, [r7, #84]	@ 0x54
    return(posture);
 80049b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
    int_posture = __get_interrupt_posture();
 80049b2:	653b      	str	r3, [r7, #80]	@ 0x50
    __asm__ volatile ("CPSID i" : : : "memory");
 80049b4:	b672      	cpsid	i
    return(int_posture);
 80049b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80049b8:	67fb      	str	r3, [r7, #124]	@ 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049be:	429a      	cmp	r2, r3
 80049c0:	d112      	bne.n	80049e8 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c6:	677b      	str	r3, [r7, #116]	@ 0x74

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 80049c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d008      	beq.n	80049e0 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 80049ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d4:	d004      	beq.n	80049e0 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	334c      	adds	r3, #76	@ 0x4c
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fa9a 	bl	8004f14 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	4a4b      	ldr	r2, [pc, #300]	@ (8004b14 <_tx_thread_system_suspend+0x178>)
 80049e6:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80049e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004b18 <_tx_thread_system_suspend+0x17c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	4a4a      	ldr	r2, [pc, #296]	@ (8004b18 <_tx_thread_system_suspend+0x17c>)
 80049f0:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	f040 8122 	bne.w	8004c40 <_tx_thread_system_suspend+0x2a4>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a06:	673b      	str	r3, [r7, #112]	@ 0x70

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8004a0e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d027      	beq.n	8004a66 <_tx_thread_system_suspend+0xca>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1a:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8004a1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a1e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a20:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8004a22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a26:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8004a28:	4a3c      	ldr	r2, [pc, #240]	@ (8004b1c <_tx_thread_system_suspend+0x180>)
 8004a2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	f040 808b 	bne.w	8004b4e <_tx_thread_system_suspend+0x1b2>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8004a38:	4938      	ldr	r1, [pc, #224]	@ (8004b1c <_tx_thread_system_suspend+0x180>)
 8004a3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                /* Calculate the index into the bit map array.  */
                map_index =  priority/((UINT) 32);
#endif

                /* Check for a thread preempted that had preemption threshold set.  */
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8004a42:	4b37      	ldr	r3, [pc, #220]	@ (8004b20 <_tx_thread_system_suspend+0x184>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 8081 	beq.w	8004b4e <_tx_thread_system_suspend+0x1b2>
                {

                    /* Ensure that this thread's priority is clear in the preempt map.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	66bb      	str	r3, [r7, #104]	@ 0x68
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8004a56:	4b32      	ldr	r3, [pc, #200]	@ (8004b20 <_tx_thread_system_suspend+0x184>)
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a5c:	43db      	mvns	r3, r3
 8004a5e:	4013      	ands	r3, r2
 8004a60:	4a2f      	ldr	r2, [pc, #188]	@ (8004b20 <_tx_thread_system_suspend+0x184>)
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	e073      	b.n	8004b4e <_tx_thread_system_suspend+0x1b2>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8004a66:	4a2d      	ldr	r2, [pc, #180]	@ (8004b1c <_tx_thread_system_suspend+0x180>)
 8004a68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8004a70:	2201      	movs	r2, #1
 8004a72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a74:	fa02 f303 	lsl.w	r3, r2, r3
 8004a78:	66bb      	str	r3, [r7, #104]	@ 0x68
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8004a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8004b24 <_tx_thread_system_suspend+0x188>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a80:	43db      	mvns	r3, r3
 8004a82:	4013      	ands	r3, r2
 8004a84:	4a27      	ldr	r2, [pc, #156]	@ (8004b24 <_tx_thread_system_suspend+0x188>)
 8004a86:	6013      	str	r3, [r2, #0]
#endif

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

            /* Check for a thread preempted that had preemption-threshold set.  */
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8004a88:	4b25      	ldr	r3, [pc, #148]	@ (8004b20 <_tx_thread_system_suspend+0x184>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00b      	beq.n	8004aa8 <_tx_thread_system_suspend+0x10c>
            {

                /* Ensure that this thread's priority is clear in the preempt map.  */
                TX_MOD32_BIT_SET(priority, priority_bit)
 8004a90:	2201      	movs	r2, #1
 8004a92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	66bb      	str	r3, [r7, #104]	@ 0x68
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8004a9a:	4b21      	ldr	r3, [pc, #132]	@ (8004b20 <_tx_thread_system_suspend+0x184>)
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	4a1e      	ldr	r2, [pc, #120]	@ (8004b20 <_tx_thread_system_suspend+0x184>)
 8004aa6:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	667b      	str	r3, [r7, #100]	@ 0x64
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8004aac:	4b1d      	ldr	r3, [pc, #116]	@ (8004b24 <_tx_thread_system_suspend+0x188>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	663b      	str	r3, [r7, #96]	@ 0x60

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8004ab2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d13d      	bne.n	8004b34 <_tx_thread_system_suspend+0x198>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8004ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b28 <_tx_thread_system_suspend+0x18c>)
 8004aba:	2220      	movs	r2, #32
 8004abc:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8004abe:	4b1b      	ldr	r3, [pc, #108]	@ (8004b2c <_tx_thread_system_suspend+0x190>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004aca:	f383 8810 	msr	PRIMASK, r3
}
 8004ace:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004ad0:	4b11      	ldr	r3, [pc, #68]	@ (8004b18 <_tx_thread_system_suspend+0x17c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                if (combined_flags == ((ULONG) 0))
 8004ad6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f040 80db 	bne.w	8004c94 <_tx_thread_system_suspend+0x2f8>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004ade:	4b14      	ldr	r3, [pc, #80]	@ (8004b30 <_tx_thread_system_suspend+0x194>)
 8004ae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ae4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004ae6:	f3ef 8305 	mrs	r3, IPSR
 8004aea:	64bb      	str	r3, [r7, #72]	@ 0x48
    return(ipsr_value);
 8004aec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    if (__get_ipsr_value() == 0)
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10c      	bne.n	8004b0c <_tx_thread_system_suspend+0x170>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004af2:	f3ef 8310 	mrs	r3, PRIMASK
 8004af6:	647b      	str	r3, [r7, #68]	@ 0x44
    return(posture);
 8004af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
        interrupt_save = __get_interrupt_posture();
 8004afa:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004afc:	b662      	cpsie	i
}
 8004afe:	bf00      	nop
 8004b00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b06:	f383 8810 	msr	PRIMASK, r3
}
 8004b0a:	bf00      	nop
}
 8004b0c:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8004b0e:	e0c1      	b.n	8004c94 <_tx_thread_system_suspend+0x2f8>
 8004b10:	2000047c 	.word	0x2000047c
 8004b14:	20000a94 	.word	0x20000a94
 8004b18:	20000518 	.word	0x20000518
 8004b1c:	20000498 	.word	0x20000498
 8004b20:	20000490 	.word	0x20000490
 8004b24:	2000048c 	.word	0x2000048c
 8004b28:	20000494 	.word	0x20000494
 8004b2c:	20000480 	.word	0x20000480
 8004b30:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8004b34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b36:	fa93 f3a3 	rbit	r3, r3
 8004b3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b3e:	fab3 f383 	clz	r3, r3
 8004b42:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8004b44:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004b46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b48:	4413      	add	r3, r2
 8004b4a:	4a56      	ldr	r2, [pc, #344]	@ (8004ca4 <_tx_thread_system_suspend+0x308>)
 8004b4c:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8004b4e:	4b56      	ldr	r3, [pc, #344]	@ (8004ca8 <_tx_thread_system_suspend+0x30c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d173      	bne.n	8004c40 <_tx_thread_system_suspend+0x2a4>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8004b58:	4b52      	ldr	r3, [pc, #328]	@ (8004ca4 <_tx_thread_system_suspend+0x308>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a53      	ldr	r2, [pc, #332]	@ (8004cac <_tx_thread_system_suspend+0x310>)
 8004b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b62:	4a51      	ldr	r2, [pc, #324]	@ (8004ca8 <_tx_thread_system_suspend+0x30c>)
 8004b64:	6013      	str	r3, [r2, #0]

            /* Determine if a previous thread with preemption-threshold was preempted.  */
#if TX_MAX_PRIORITIES > 32
            if (_tx_thread_preempted_map_active != ((ULONG) 0))
#else
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8004b66:	4b52      	ldr	r3, [pc, #328]	@ (8004cb0 <_tx_thread_system_suspend+0x314>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d043      	beq.n	8004bf6 <_tx_thread_system_suspend+0x25a>
            {

                /* Yes, there was a thread preempted when it was using preemption-threshold.  */

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 8004b6e:	4b51      	ldr	r3, [pc, #324]	@ (8004cb4 <_tx_thread_system_suspend+0x318>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3301      	adds	r3, #1
 8004b74:	4a4f      	ldr	r2, [pc, #316]	@ (8004cb4 <_tx_thread_system_suspend+0x318>)
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b7a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7e:	f383 8810 	msr	PRIMASK, r3
}
 8004b82:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004b84:	f3ef 8310 	mrs	r3, PRIMASK
 8004b88:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 8004b8c:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8004b8e:	b672      	cpsid	i
    return(int_posture);
 8004b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

                /* Interrupts are enabled briefly here to keep the interrupt
                   lockout time deterministic.  */

                /* Disable interrupts again.  */
                TX_DISABLE
 8004b92:	67fb      	str	r3, [r7, #124]	@ 0x7c

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8004b94:	4b47      	ldr	r3, [pc, #284]	@ (8004cb4 <_tx_thread_system_suspend+0x318>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	4a46      	ldr	r2, [pc, #280]	@ (8004cb4 <_tx_thread_system_suspend+0x318>)
 8004b9c:	6013      	str	r3, [r2, #0]
                /* Calculate the base priority as well.  */
                base_priority =  map_index * ((UINT) 32);
#else

                /* Setup the base priority to zero.  */
                base_priority =   ((UINT) 0);
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	667b      	str	r3, [r7, #100]	@ 0x64
#endif

                /* Setup temporary preempted map.  */
                priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 8004ba2:	4b43      	ldr	r3, [pc, #268]	@ (8004cb0 <_tx_thread_system_suspend+0x314>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8004ba8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004baa:	fa93 f3a3 	rbit	r3, r3
 8004bae:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bb2:	fab3 f383 	clz	r3, r3
 8004bb6:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Setup the highest priority preempted thread.  */
                priority =  base_priority + ((UINT) priority_bit);
 8004bb8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004bba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bbc:	4413      	add	r3, r2
 8004bbe:	673b      	str	r3, [r7, #112]	@ 0x70

                /* Determine if the next highest priority thread is above the highest priority threshold value.  */
                if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread_preempt_threshold))
 8004bc0:	4a3a      	ldr	r2, [pc, #232]	@ (8004cac <_tx_thread_system_suspend+0x310>)
 8004bc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bca:	4b36      	ldr	r3, [pc, #216]	@ (8004ca4 <_tx_thread_system_suspend+0x308>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d811      	bhi.n	8004bf6 <_tx_thread_system_suspend+0x25a>
                {

                    /* Thread not allowed to execute until earlier preempted thread finishes or lowers its
                       preemption-threshold.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 8004bd2:	4a36      	ldr	r2, [pc, #216]	@ (8004cac <_tx_thread_system_suspend+0x310>)
 8004bd4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bda:	4a33      	ldr	r2, [pc, #204]	@ (8004ca8 <_tx_thread_system_suspend+0x30c>)
 8004bdc:	6013      	str	r3, [r2, #0]

                    /* Clear the corresponding bit in the preempted map, since the preemption has been restored.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8004bde:	2201      	movs	r2, #1
 8004be0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	66bb      	str	r3, [r7, #104]	@ 0x68
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8004be8:	4b31      	ldr	r3, [pc, #196]	@ (8004cb0 <_tx_thread_system_suspend+0x314>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bee:	43db      	mvns	r3, r3
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	4a2f      	ldr	r2, [pc, #188]	@ (8004cb0 <_tx_thread_system_suspend+0x314>)
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfc:	f383 8810 	msr	PRIMASK, r3
}
 8004c00:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004c02:	4b2c      	ldr	r3, [pc, #176]	@ (8004cb4 <_tx_thread_system_suspend+0x318>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	65fb      	str	r3, [r7, #92]	@ 0x5c
            if (combined_flags == ((ULONG) 0))
 8004c08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d144      	bne.n	8004c98 <_tx_thread_system_suspend+0x2fc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8004cb8 <_tx_thread_system_suspend+0x31c>)
 8004c10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c14:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004c16:	f3ef 8305 	mrs	r3, IPSR
 8004c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 8004c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (__get_ipsr_value() == 0)
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10c      	bne.n	8004c3c <_tx_thread_system_suspend+0x2a0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004c22:	f3ef 8310 	mrs	r3, PRIMASK
 8004c26:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8004c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 8004c2a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004c2c:	b662      	cpsie	i
}
 8004c2e:	bf00      	nop
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	f383 8810 	msr	PRIMASK, r3
}
 8004c3a:	bf00      	nop
}
 8004c3c:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8004c3e:	e02b      	b.n	8004c98 <_tx_thread_system_suspend+0x2fc>
 8004c40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c42:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	f383 8810 	msr	PRIMASK, r3
}
 8004c4a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8004c4c:	4b16      	ldr	r3, [pc, #88]	@ (8004ca8 <_tx_thread_system_suspend+0x30c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d022      	beq.n	8004c9c <_tx_thread_system_suspend+0x300>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004c56:	4b17      	ldr	r3, [pc, #92]	@ (8004cb4 <_tx_thread_system_suspend+0x318>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (combined_flags == ((ULONG) 0))
 8004c5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d11c      	bne.n	8004c9c <_tx_thread_system_suspend+0x300>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004c62:	4b15      	ldr	r3, [pc, #84]	@ (8004cb8 <_tx_thread_system_suspend+0x31c>)
 8004c64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c68:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004c6a:	f3ef 8305 	mrs	r3, IPSR
 8004c6e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8004c70:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10c      	bne.n	8004c90 <_tx_thread_system_suspend+0x2f4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004c76:	f3ef 8310 	mrs	r3, PRIMASK
 8004c7a:	613b      	str	r3, [r7, #16]
    return(posture);
 8004c7c:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8004c7e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004c80:	b662      	cpsie	i
}
 8004c82:	bf00      	nop
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f383 8810 	msr	PRIMASK, r3
}
 8004c8e:	bf00      	nop
}
 8004c90:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8004c92:	e003      	b.n	8004c9c <_tx_thread_system_suspend+0x300>
                return;
 8004c94:	bf00      	nop
 8004c96:	e002      	b.n	8004c9e <_tx_thread_system_suspend+0x302>
            return;
 8004c98:	bf00      	nop
 8004c9a:	e000      	b.n	8004c9e <_tx_thread_system_suspend+0x302>
    return;
 8004c9c:	bf00      	nop
}
 8004c9e:	3780      	adds	r7, #128	@ 0x80
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	20000494 	.word	0x20000494
 8004ca8:	20000480 	.word	0x20000480
 8004cac:	20000498 	.word	0x20000498
 8004cb0:	20000490 	.word	0x20000490
 8004cb4:	20000518 	.word	0x20000518
 8004cb8:	e000ed04 	.word	0xe000ed04

08004cbc <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8004cc2:	4b21      	ldr	r3, [pc, #132]	@ (8004d48 <_tx_thread_time_slice+0x8c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8004ccc:	60fb      	str	r3, [r7, #12]
    return(posture);
 8004cce:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8004cd0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004cd2:	b672      	cpsid	i
    return(int_posture);
 8004cd4:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8004cd6:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8004cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8004d4c <_tx_thread_time_slice+0x90>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d024      	beq.n	8004d2e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d120      	bne.n	8004d2e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	69da      	ldr	r2, [r3, #28]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	4a15      	ldr	r2, [pc, #84]	@ (8004d50 <_tx_thread_time_slice+0x94>)
 8004cfa:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d013      	beq.n	8004d2e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d10d      	bne.n	8004d2e <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	6a12      	ldr	r2, [r2, #32]
 8004d1a:	490e      	ldr	r1, [pc, #56]	@ (8004d54 <_tx_thread_time_slice+0x98>)
 8004d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8004d20:	4b0d      	ldr	r3, [pc, #52]	@ (8004d58 <_tx_thread_time_slice+0x9c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a0b      	ldr	r2, [pc, #44]	@ (8004d54 <_tx_thread_time_slice+0x98>)
 8004d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8004d5c <_tx_thread_time_slice+0xa0>)
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f383 8810 	msr	PRIMASK, r3
}
 8004d38:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8004d3a:	bf00      	nop
 8004d3c:	371c      	adds	r7, #28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	2000047c 	.word	0x2000047c
 8004d4c:	20000528 	.word	0x20000528
 8004d50:	20000a94 	.word	0x20000a94
 8004d54:	20000498 	.word	0x20000498
 8004d58:	20000494 	.word	0x20000494
 8004d5c:	20000480 	.word	0x20000480

08004d60 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08a      	sub	sp, #40	@ 0x28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d70:	617b      	str	r3, [r7, #20]
    return(posture);
 8004d72:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8004d74:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004d76:	b672      	cpsid	i
    return(int_posture);
 8004d78:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8004d7a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d10e      	bne.n	8004da2 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8004d84:	4b13      	ldr	r3, [pc, #76]	@ (8004dd4 <_tx_thread_timeout+0x74>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	4a12      	ldr	r2, [pc, #72]	@ (8004dd4 <_tx_thread_timeout+0x74>)
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f383 8810 	msr	PRIMASK, r3
}
 8004d98:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8004d9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d9c:	f7ff fcea 	bl	8004774 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8004da0:	e013      	b.n	8004dca <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8004da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004da6:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8004da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004daa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004dae:	61bb      	str	r3, [r7, #24]
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f383 8810 	msr	PRIMASK, r3
}
 8004dba:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	69b9      	ldr	r1, [r7, #24]
 8004dc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004dc8:	4798      	blx	r3
}
 8004dca:	bf00      	nop
 8004dcc:	3728      	adds	r7, #40	@ 0x28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20000518 	.word	0x20000518

08004dd8 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004dde:	f3ef 8310 	mrs	r3, PRIMASK
 8004de2:	607b      	str	r3, [r7, #4]
    return(posture);
 8004de4:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8004de6:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004de8:	b672      	cpsid	i
    return(int_posture);
 8004dea:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8004dec:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8004dee:	4b09      	ldr	r3, [pc, #36]	@ (8004e14 <_tx_timer_expiration_process+0x3c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3301      	adds	r3, #1
 8004df4:	4a07      	ldr	r2, [pc, #28]	@ (8004e14 <_tx_timer_expiration_process+0x3c>)
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f383 8810 	msr	PRIMASK, r3
}
 8004e02:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8004e04:	4804      	ldr	r0, [pc, #16]	@ (8004e18 <_tx_timer_expiration_process+0x40>)
 8004e06:	f7ff fcb5 	bl	8004774 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8004e0a:	bf00      	nop
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20000518 	.word	0x20000518
 8004e18:	200005c8 	.word	0x200005c8

08004e1c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b089      	sub	sp, #36	@ 0x24
 8004e20:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8004e22:	4b28      	ldr	r3, [pc, #160]	@ (8004ec4 <_tx_timer_initialize+0xa8>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8004e28:	4b27      	ldr	r3, [pc, #156]	@ (8004ec8 <_tx_timer_initialize+0xac>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8004e2e:	4b27      	ldr	r3, [pc, #156]	@ (8004ecc <_tx_timer_initialize+0xb0>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8004e34:	4b26      	ldr	r3, [pc, #152]	@ (8004ed0 <_tx_timer_initialize+0xb4>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8004e3a:	4b26      	ldr	r3, [pc, #152]	@ (8004ed4 <_tx_timer_initialize+0xb8>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8004e40:	2280      	movs	r2, #128	@ 0x80
 8004e42:	2100      	movs	r1, #0
 8004e44:	4824      	ldr	r0, [pc, #144]	@ (8004ed8 <_tx_timer_initialize+0xbc>)
 8004e46:	f001 f986 	bl	8006156 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8004e4a:	4b24      	ldr	r3, [pc, #144]	@ (8004edc <_tx_timer_initialize+0xc0>)
 8004e4c:	4a22      	ldr	r2, [pc, #136]	@ (8004ed8 <_tx_timer_initialize+0xbc>)
 8004e4e:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8004e50:	4b23      	ldr	r3, [pc, #140]	@ (8004ee0 <_tx_timer_initialize+0xc4>)
 8004e52:	4a21      	ldr	r2, [pc, #132]	@ (8004ed8 <_tx_timer_initialize+0xbc>)
 8004e54:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8004e56:	4b23      	ldr	r3, [pc, #140]	@ (8004ee4 <_tx_timer_initialize+0xc8>)
 8004e58:	4a23      	ldr	r2, [pc, #140]	@ (8004ee8 <_tx_timer_initialize+0xcc>)
 8004e5a:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8004e5c:	4b21      	ldr	r3, [pc, #132]	@ (8004ee4 <_tx_timer_initialize+0xc8>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3304      	adds	r3, #4
 8004e62:	4a20      	ldr	r2, [pc, #128]	@ (8004ee4 <_tx_timer_initialize+0xc8>)
 8004e64:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8004e66:	4b21      	ldr	r3, [pc, #132]	@ (8004eec <_tx_timer_initialize+0xd0>)
 8004e68:	4a21      	ldr	r2, [pc, #132]	@ (8004ef0 <_tx_timer_initialize+0xd4>)
 8004e6a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8004e6c:	4b21      	ldr	r3, [pc, #132]	@ (8004ef4 <_tx_timer_initialize+0xd8>)
 8004e6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e72:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8004e74:	4b20      	ldr	r3, [pc, #128]	@ (8004ef8 <_tx_timer_initialize+0xdc>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8004e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8004eec <_tx_timer_initialize+0xd0>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ef4 <_tx_timer_initialize+0xd8>)
 8004e80:	6812      	ldr	r2, [r2, #0]
 8004e82:	491d      	ldr	r1, [pc, #116]	@ (8004ef8 <_tx_timer_initialize+0xdc>)
 8004e84:	6809      	ldr	r1, [r1, #0]
 8004e86:	481c      	ldr	r0, [pc, #112]	@ (8004ef8 <_tx_timer_initialize+0xdc>)
 8004e88:	6800      	ldr	r0, [r0, #0]
 8004e8a:	2400      	movs	r4, #0
 8004e8c:	9405      	str	r4, [sp, #20]
 8004e8e:	2400      	movs	r4, #0
 8004e90:	9404      	str	r4, [sp, #16]
 8004e92:	9003      	str	r0, [sp, #12]
 8004e94:	9102      	str	r1, [sp, #8]
 8004e96:	9201      	str	r2, [sp, #4]
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	4b18      	ldr	r3, [pc, #96]	@ (8004efc <_tx_timer_initialize+0xe0>)
 8004e9c:	4a18      	ldr	r2, [pc, #96]	@ (8004f00 <_tx_timer_initialize+0xe4>)
 8004e9e:	4919      	ldr	r1, [pc, #100]	@ (8004f04 <_tx_timer_initialize+0xe8>)
 8004ea0:	4819      	ldr	r0, [pc, #100]	@ (8004f08 <_tx_timer_initialize+0xec>)
 8004ea2:	f7ff fa11 	bl	80042c8 <_tx_thread_create>
 8004ea6:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e5      	bne.n	8004e7a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8004eae:	4b17      	ldr	r3, [pc, #92]	@ (8004f0c <_tx_timer_initialize+0xf0>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8004eb4:	4b16      	ldr	r3, [pc, #88]	@ (8004f10 <_tx_timer_initialize+0xf4>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd90      	pop	{r4, r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000524 	.word	0x20000524
 8004ec8:	20000a94 	.word	0x20000a94
 8004ecc:	20000528 	.word	0x20000528
 8004ed0:	200005b8 	.word	0x200005b8
 8004ed4:	200005c4 	.word	0x200005c4
 8004ed8:	2000052c 	.word	0x2000052c
 8004edc:	200005ac 	.word	0x200005ac
 8004ee0:	200005b4 	.word	0x200005b4
 8004ee4:	200005b0 	.word	0x200005b0
 8004ee8:	200005a8 	.word	0x200005a8
 8004eec:	20000688 	.word	0x20000688
 8004ef0:	20000694 	.word	0x20000694
 8004ef4:	2000068c 	.word	0x2000068c
 8004ef8:	20000690 	.word	0x20000690
 8004efc:	4154494d 	.word	0x4154494d
 8004f00:	08005049 	.word	0x08005049
 8004f04:	08008018 	.word	0x08008018
 8004f08:	200005c8 	.word	0x200005c8
 8004f0c:	200005bc 	.word	0x200005bc
 8004f10:	200005c0 	.word	0x200005c0

08004f14 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b089      	sub	sp, #36	@ 0x24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d04a      	beq.n	8004fbe <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2e:	d046      	beq.n	8004fbe <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d142      	bne.n	8004fbe <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d902      	bls.n	8004f44 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8004f3e:	231f      	movs	r3, #31
 8004f40:	61bb      	str	r3, [r7, #24]
 8004f42:	e002      	b.n	8004f4a <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8004f4a:	4b20      	ldr	r3, [pc, #128]	@ (8004fcc <_tx_timer_system_activate+0xb8>)
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8004f56:	4b1e      	ldr	r3, [pc, #120]	@ (8004fd0 <_tx_timer_system_activate+0xbc>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69fa      	ldr	r2, [r7, #28]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d30b      	bcc.n	8004f78 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8004f60:	4b1b      	ldr	r3, [pc, #108]	@ (8004fd0 <_tx_timer_system_activate+0xbc>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	69fa      	ldr	r2, [r7, #28]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	109b      	asrs	r3, r3, #2
 8004f6a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8004f6c:	4b19      	ldr	r3, [pc, #100]	@ (8004fd4 <_tx_timer_system_activate+0xc0>)
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d109      	bne.n	8004f94 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	e011      	b.n	8004fb8 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8004fbe:	bf00      	nop
 8004fc0:	3724      	adds	r7, #36	@ 0x24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	200005b4 	.word	0x200005b4
 8004fd0:	200005b0 	.word	0x200005b0
 8004fd4:	200005ac 	.word	0x200005ac

08004fd8 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d026      	beq.n	800503a <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d108      	bne.n	800500c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	429a      	cmp	r2, r3
 8005002:	d117      	bne.n	8005034 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	e013      	b.n	8005034 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	429a      	cmp	r2, r3
 8005026:	d105      	bne.n	8005034 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	619a      	str	r2, [r3, #24]
    }
}
 800503a:	bf00      	nop
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
	...

08005048 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b098      	sub	sp, #96	@ 0x60
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8005050:	2300      	movs	r3, #0
 8005052:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a73      	ldr	r2, [pc, #460]	@ (8005224 <_tx_timer_thread_entry+0x1dc>)
 8005058:	4293      	cmp	r3, r2
 800505a:	f040 80de 	bne.w	800521a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800505e:	f3ef 8310 	mrs	r3, PRIMASK
 8005062:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 8005064:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 8005066:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8005068:	b672      	cpsid	i
    return(int_posture);
 800506a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800506c:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800506e:	4b6e      	ldr	r3, [pc, #440]	@ (8005228 <_tx_timer_thread_entry+0x1e0>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f107 020c 	add.w	r2, r7, #12
 8005082:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8005084:	4b68      	ldr	r3, [pc, #416]	@ (8005228 <_tx_timer_thread_entry+0x1e0>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800508c:	4b66      	ldr	r3, [pc, #408]	@ (8005228 <_tx_timer_thread_entry+0x1e0>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3304      	adds	r3, #4
 8005092:	4a65      	ldr	r2, [pc, #404]	@ (8005228 <_tx_timer_thread_entry+0x1e0>)
 8005094:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8005096:	4b64      	ldr	r3, [pc, #400]	@ (8005228 <_tx_timer_thread_entry+0x1e0>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	4b64      	ldr	r3, [pc, #400]	@ (800522c <_tx_timer_thread_entry+0x1e4>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d103      	bne.n	80050aa <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 80050a2:	4b63      	ldr	r3, [pc, #396]	@ (8005230 <_tx_timer_thread_entry+0x1e8>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a60      	ldr	r2, [pc, #384]	@ (8005228 <_tx_timer_thread_entry+0x1e0>)
 80050a8:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80050aa:	4b62      	ldr	r3, [pc, #392]	@ (8005234 <_tx_timer_thread_entry+0x1ec>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050b2:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80050b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b6:	f383 8810 	msr	PRIMASK, r3
}
 80050ba:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80050bc:	f3ef 8310 	mrs	r3, PRIMASK
 80050c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 80050c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 80050c4:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80050c6:	b672      	cpsid	i
    return(int_posture);
 80050c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80050ca:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80050cc:	e07f      	b.n	80051ce <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 80050d8:	2300      	movs	r3, #0
 80050da:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 80050dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d102      	bne.n	80050ea <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 80050e4:	2300      	movs	r3, #0
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	e00e      	b.n	8005108 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 80050ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80050f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050f4:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 80050f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050fa:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 80050fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050fe:	f107 020c 	add.w	r2, r7, #12
 8005102:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8005104:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005106:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8005108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b20      	cmp	r3, #32
 800510e:	d911      	bls.n	8005134 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8005110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8005118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800511a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800511c:	2300      	movs	r3, #0
 800511e:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8005120:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005122:	f107 0208 	add.w	r2, r7, #8
 8005126:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8005128:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800512a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800512c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800512e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005130:	60bb      	str	r3, [r7, #8]
 8005132:	e01a      	b.n	800516a <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8005134:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800513a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8005140:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005146:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8005148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d009      	beq.n	8005164 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8005150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005152:	f107 0208 	add.w	r2, r7, #8
 8005156:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8005158:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800515a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800515c:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800515e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005160:	60bb      	str	r3, [r7, #8]
 8005162:	e002      	b.n	800516a <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8005164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005166:	2200      	movs	r2, #0
 8005168:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800516a:	4a33      	ldr	r2, [pc, #204]	@ (8005238 <_tx_timer_thread_entry+0x1f0>)
 800516c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005172:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005176:	f383 8810 	msr	PRIMASK, r3
}
 800517a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800517c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8005182:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005184:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005186:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005188:	f3ef 8310 	mrs	r3, PRIMASK
 800518c:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800518e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8005190:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8005192:	b672      	cpsid	i
    return(int_posture);
 8005194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8005196:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8005198:	4b27      	ldr	r3, [pc, #156]	@ (8005238 <_tx_timer_thread_entry+0x1f0>)
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d105      	bne.n	80051b2 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80051a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051a8:	2200      	movs	r2, #0
 80051aa:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80051ac:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80051ae:	f7ff feb1 	bl	8004f14 <_tx_timer_system_activate>
 80051b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051b4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	f383 8810 	msr	PRIMASK, r3
}
 80051bc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80051be:	f3ef 8310 	mrs	r3, PRIMASK
 80051c2:	623b      	str	r3, [r7, #32]
    return(posture);
 80051c4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80051c6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80051c8:	b672      	cpsid	i
    return(int_posture);
 80051ca:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 80051cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f47f af7c 	bne.w	80050ce <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 80051d6:	4b17      	ldr	r3, [pc, #92]	@ (8005234 <_tx_timer_thread_entry+0x1ec>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d116      	bne.n	800520c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 80051de:	4b17      	ldr	r3, [pc, #92]	@ (800523c <_tx_timer_thread_entry+0x1f4>)
 80051e0:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80051e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051e4:	2203      	movs	r2, #3
 80051e6:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80051e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051ea:	2201      	movs	r2, #1
 80051ec:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 80051ee:	4b14      	ldr	r3, [pc, #80]	@ (8005240 <_tx_timer_thread_entry+0x1f8>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3301      	adds	r3, #1
 80051f4:	4a12      	ldr	r2, [pc, #72]	@ (8005240 <_tx_timer_thread_entry+0x1f8>)
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051fa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f383 8810 	msr	PRIMASK, r3
}
 8005202:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8005204:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8005206:	f7ff fbc9 	bl	800499c <_tx_thread_system_suspend>
 800520a:	e728      	b.n	800505e <_tx_timer_thread_entry+0x16>
 800520c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800520e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f383 8810 	msr	PRIMASK, r3
}
 8005216:	bf00      	nop
            TX_DISABLE
 8005218:	e721      	b.n	800505e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800521a:	bf00      	nop
 800521c:	3760      	adds	r7, #96	@ 0x60
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	4154494d 	.word	0x4154494d
 8005228:	200005b4 	.word	0x200005b4
 800522c:	200005b0 	.word	0x200005b0
 8005230:	200005ac 	.word	0x200005ac
 8005234:	200005b8 	.word	0x200005b8
 8005238:	200005c4 	.word	0x200005c4
 800523c:	200005c8 	.word	0x200005c8
 8005240:	20000518 	.word	0x20000518

08005244 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08a      	sub	sp, #40	@ 0x28
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005252:	2300      	movs	r3, #0
 8005254:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d102      	bne.n	8005262 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800525c:	2302      	movs	r3, #2
 800525e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005260:	e029      	b.n	80052b6 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a2d      	ldr	r2, [pc, #180]	@ (800531c <_txe_byte_allocate+0xd8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d002      	beq.n	8005272 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800526c:	2302      	movs	r3, #2
 800526e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005270:	e021      	b.n	80052b6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d102      	bne.n	800527e <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8005278:	2303      	movs	r3, #3
 800527a:	627b      	str	r3, [r7, #36]	@ 0x24
 800527c:	e01b      	b.n	80052b6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d102      	bne.n	800528a <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8005284:	2305      	movs	r3, #5
 8005286:	627b      	str	r3, [r7, #36]	@ 0x24
 8005288:	e015      	b.n	80052b6 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	429a      	cmp	r2, r3
 8005292:	d902      	bls.n	800529a <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8005294:	2305      	movs	r3, #5
 8005296:	627b      	str	r3, [r7, #36]	@ 0x24
 8005298:	e00d      	b.n	80052b6 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00a      	beq.n	80052b6 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80052a0:	f3ef 8305 	mrs	r3, IPSR
 80052a4:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80052a6:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80052a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005320 <_txe_byte_allocate+0xdc>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80052b2:	2304      	movs	r3, #4
 80052b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 80052b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d108      	bne.n	80052ce <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80052bc:	4b19      	ldr	r3, [pc, #100]	@ (8005324 <_txe_byte_allocate+0xe0>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	4a18      	ldr	r2, [pc, #96]	@ (8005328 <_txe_byte_allocate+0xe4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d101      	bne.n	80052ce <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80052ca:	2313      	movs	r3, #19
 80052cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d114      	bne.n	80052fe <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80052d4:	f3ef 8305 	mrs	r3, IPSR
 80052d8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80052da:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80052dc:	4b10      	ldr	r3, [pc, #64]	@ (8005320 <_txe_byte_allocate+0xdc>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00b      	beq.n	80052fe <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80052e6:	f3ef 8305 	mrs	r3, IPSR
 80052ea:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80052ec:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80052ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005320 <_txe_byte_allocate+0xdc>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80052f8:	d201      	bcs.n	80052fe <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80052fa:	2313      	movs	r3, #19
 80052fc:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80052fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005300:	2b00      	cmp	r3, #0
 8005302:	d106      	bne.n	8005312 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	68b9      	ldr	r1, [r7, #8]
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f7fe fc86 	bl	8003c1c <_tx_byte_allocate>
 8005310:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 8005312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005314:	4618      	mov	r0, r3
 8005316:	3728      	adds	r7, #40	@ 0x28
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	42595445 	.word	0x42595445
 8005320:	2000000c 	.word	0x2000000c
 8005324:	2000047c 	.word	0x2000047c
 8005328:	200005c8 	.word	0x200005c8

0800532c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b092      	sub	sp, #72	@ 0x48
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800533a:	2300      	movs	r3, #0
 800533c:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d102      	bne.n	800534a <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005344:	2302      	movs	r3, #2
 8005346:	647b      	str	r3, [r7, #68]	@ 0x44
 8005348:	e075      	b.n	8005436 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800534a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800534c:	2b34      	cmp	r3, #52	@ 0x34
 800534e:	d002      	beq.n	8005356 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005350:	2302      	movs	r3, #2
 8005352:	647b      	str	r3, [r7, #68]	@ 0x44
 8005354:	e06f      	b.n	8005436 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005356:	f3ef 8310 	mrs	r3, PRIMASK
 800535a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800535c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800535e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8005360:	b672      	cpsid	i
    return(int_posture);
 8005362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8005364:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8005366:	4b3b      	ldr	r3, [pc, #236]	@ (8005454 <_txe_byte_pool_create+0x128>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3301      	adds	r3, #1
 800536c:	4a39      	ldr	r2, [pc, #228]	@ (8005454 <_txe_byte_pool_create+0x128>)
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005372:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005376:	f383 8810 	msr	PRIMASK, r3
}
 800537a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800537c:	4b36      	ldr	r3, [pc, #216]	@ (8005458 <_txe_byte_pool_create+0x12c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8005382:	2300      	movs	r3, #0
 8005384:	643b      	str	r3, [r7, #64]	@ 0x40
 8005386:	e009      	b.n	800539c <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800538c:	429a      	cmp	r2, r3
 800538e:	d00b      	beq.n	80053a8 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8005390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8005396:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005398:	3301      	adds	r3, #1
 800539a:	643b      	str	r3, [r7, #64]	@ 0x40
 800539c:	4b2f      	ldr	r3, [pc, #188]	@ (800545c <_txe_byte_pool_create+0x130>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d3f0      	bcc.n	8005388 <_txe_byte_pool_create+0x5c>
 80053a6:	e000      	b.n	80053aa <_txe_byte_pool_create+0x7e>
                break;
 80053a8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80053aa:	f3ef 8310 	mrs	r3, PRIMASK
 80053ae:	623b      	str	r3, [r7, #32]
    return(posture);
 80053b0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80053b2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80053b4:	b672      	cpsid	i
    return(int_posture);
 80053b6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80053b8:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80053ba:	4b26      	ldr	r3, [pc, #152]	@ (8005454 <_txe_byte_pool_create+0x128>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3b01      	subs	r3, #1
 80053c0:	4a24      	ldr	r2, [pc, #144]	@ (8005454 <_txe_byte_pool_create+0x128>)
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80053c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ca:	f383 8810 	msr	PRIMASK, r3
}
 80053ce:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80053d0:	f7ff f996 	bl	8004700 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053d8:	429a      	cmp	r2, r3
 80053da:	d102      	bne.n	80053e2 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 80053dc:	2302      	movs	r3, #2
 80053de:	647b      	str	r3, [r7, #68]	@ 0x44
 80053e0:	e029      	b.n	8005436 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d102      	bne.n	80053ee <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 80053e8:	2303      	movs	r3, #3
 80053ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80053ec:	e023      	b.n	8005436 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b63      	cmp	r3, #99	@ 0x63
 80053f2:	d802      	bhi.n	80053fa <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 80053f4:	2305      	movs	r3, #5
 80053f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80053f8:	e01d      	b.n	8005436 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80053fa:	4b19      	ldr	r3, [pc, #100]	@ (8005460 <_txe_byte_pool_create+0x134>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8005400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005402:	4a18      	ldr	r2, [pc, #96]	@ (8005464 <_txe_byte_pool_create+0x138>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d101      	bne.n	800540c <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005408:	2313      	movs	r3, #19
 800540a:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800540c:	f3ef 8305 	mrs	r3, IPSR
 8005410:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8005412:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005414:	4b14      	ldr	r3, [pc, #80]	@ (8005468 <_txe_byte_pool_create+0x13c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4313      	orrs	r3, r2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00b      	beq.n	8005436 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800541e:	f3ef 8305 	mrs	r3, IPSR
 8005422:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005424:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8005426:	4b10      	ldr	r3, [pc, #64]	@ (8005468 <_txe_byte_pool_create+0x13c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4313      	orrs	r3, r2
 800542c:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8005430:	d201      	bcs.n	8005436 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8005432:	2313      	movs	r3, #19
 8005434:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005438:	2b00      	cmp	r3, #0
 800543a:	d106      	bne.n	800544a <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	68b9      	ldr	r1, [r7, #8]
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f7fe fd2c 	bl	8003ea0 <_tx_byte_pool_create>
 8005448:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800544a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800544c:	4618      	mov	r0, r3
 800544e:	3748      	adds	r7, #72	@ 0x48
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	20000518 	.word	0x20000518
 8005458:	2000046c 	.word	0x2000046c
 800545c:	20000470 	.word	0x20000470
 8005460:	2000047c 	.word	0x2000047c
 8005464:	200005c8 	.word	0x200005c8
 8005468:	2000000c 	.word	0x2000000c

0800546c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b09a      	sub	sp, #104	@ 0x68
 8005470:	af06      	add	r7, sp, #24
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800547a:	2300      	movs	r3, #0
 800547c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d102      	bne.n	800548a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8005484:	230e      	movs	r3, #14
 8005486:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005488:	e0bb      	b.n	8005602 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800548a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800548c:	2bc0      	cmp	r3, #192	@ 0xc0
 800548e:	d002      	beq.n	8005496 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8005490:	230e      	movs	r3, #14
 8005492:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005494:	e0b5      	b.n	8005602 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005496:	f3ef 8310 	mrs	r3, PRIMASK
 800549a:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800549c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800549e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80054a0:	b672      	cpsid	i
    return(int_posture);
 80054a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80054a4:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80054a6:	4b64      	ldr	r3, [pc, #400]	@ (8005638 <_txe_thread_create+0x1cc>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3301      	adds	r3, #1
 80054ac:	4a62      	ldr	r2, [pc, #392]	@ (8005638 <_txe_thread_create+0x1cc>)
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80054b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b6:	f383 8810 	msr	PRIMASK, r3
}
 80054ba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 80054bc:	2300      	movs	r3, #0
 80054be:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 80054c0:	4b5e      	ldr	r3, [pc, #376]	@ (800563c <_txe_thread_create+0x1d0>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80054c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054c8:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 80054ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054cc:	3b01      	subs	r3, #1
 80054ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054d0:	4413      	add	r3, r2
 80054d2:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 80054d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d6:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80054d8:	2300      	movs	r3, #0
 80054da:	647b      	str	r3, [r7, #68]	@ 0x44
 80054dc:	e02b      	b.n	8005536 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d101      	bne.n	80054ea <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 80054e6:	2301      	movs	r3, #1
 80054e8:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 80054ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d028      	beq.n	8005542 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 80054f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d308      	bcc.n	800550c <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 80054fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005500:	429a      	cmp	r2, r3
 8005502:	d203      	bcs.n	800550c <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8005504:	2300      	movs	r3, #0
 8005506:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8005508:	2301      	movs	r3, #1
 800550a:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800550c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005512:	429a      	cmp	r2, r3
 8005514:	d308      	bcc.n	8005528 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8005516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800551c:	429a      	cmp	r2, r3
 800551e:	d203      	bcs.n	8005528 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8005520:	2300      	movs	r3, #0
 8005522:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8005524:	2301      	movs	r3, #1
 8005526:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8005528:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800552e:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8005530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005532:	3301      	adds	r3, #1
 8005534:	647b      	str	r3, [r7, #68]	@ 0x44
 8005536:	4b42      	ldr	r3, [pc, #264]	@ (8005640 <_txe_thread_create+0x1d4>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800553c:	429a      	cmp	r2, r3
 800553e:	d3ce      	bcc.n	80054de <_txe_thread_create+0x72>
 8005540:	e000      	b.n	8005544 <_txe_thread_create+0xd8>
                break;
 8005542:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005544:	f3ef 8310 	mrs	r3, PRIMASK
 8005548:	61fb      	str	r3, [r7, #28]
    return(posture);
 800554a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800554c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800554e:	b672      	cpsid	i
    return(int_posture);
 8005550:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8005552:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8005554:	4b38      	ldr	r3, [pc, #224]	@ (8005638 <_txe_thread_create+0x1cc>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3b01      	subs	r3, #1
 800555a:	4a37      	ldr	r2, [pc, #220]	@ (8005638 <_txe_thread_create+0x1cc>)
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005560:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	f383 8810 	msr	PRIMASK, r3
}
 8005568:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800556a:	f7ff f8c9 	bl	8004700 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005572:	429a      	cmp	r2, r3
 8005574:	d102      	bne.n	800557c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8005576:	230e      	movs	r3, #14
 8005578:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800557a:	e042      	b.n	8005602 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800557c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800557e:	2b00      	cmp	r3, #0
 8005580:	d102      	bne.n	8005588 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8005582:	2303      	movs	r3, #3
 8005584:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005586:	e03c      	b.n	8005602 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d102      	bne.n	8005594 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800558e:	2303      	movs	r3, #3
 8005590:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005592:	e036      	b.n	8005602 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8005594:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005596:	2bc7      	cmp	r3, #199	@ 0xc7
 8005598:	d802      	bhi.n	80055a0 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800559a:	2305      	movs	r3, #5
 800559c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800559e:	e030      	b.n	8005602 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80055a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055a2:	2b1f      	cmp	r3, #31
 80055a4:	d902      	bls.n	80055ac <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80055a6:	230f      	movs	r3, #15
 80055a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055aa:	e02a      	b.n	8005602 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80055ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80055ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d902      	bls.n	80055ba <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 80055b4:	2318      	movs	r3, #24
 80055b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055b8:	e023      	b.n	8005602 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 80055ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d902      	bls.n	80055c6 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 80055c0:	2310      	movs	r3, #16
 80055c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055c4:	e01d      	b.n	8005602 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 80055c6:	4b1f      	ldr	r3, [pc, #124]	@ (8005644 <_txe_thread_create+0x1d8>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 80055cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005648 <_txe_thread_create+0x1dc>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d101      	bne.n	80055d8 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80055d4:	2313      	movs	r3, #19
 80055d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80055d8:	f3ef 8305 	mrs	r3, IPSR
 80055dc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80055de:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80055e0:	4b1a      	ldr	r3, [pc, #104]	@ (800564c <_txe_thread_create+0x1e0>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00b      	beq.n	8005602 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80055ea:	f3ef 8305 	mrs	r3, IPSR
 80055ee:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80055f0:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80055f2:	4b16      	ldr	r3, [pc, #88]	@ (800564c <_txe_thread_create+0x1e0>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80055fc:	d201      	bcs.n	8005602 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80055fe:	2313      	movs	r3, #19
 8005600:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005604:	2b00      	cmp	r3, #0
 8005606:	d112      	bne.n	800562e <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8005608:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800560a:	9305      	str	r3, [sp, #20]
 800560c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800560e:	9304      	str	r3, [sp, #16]
 8005610:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005612:	9303      	str	r3, [sp, #12]
 8005614:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005616:	9302      	str	r3, [sp, #8]
 8005618:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800561a:	9301      	str	r3, [sp, #4]
 800561c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	68b9      	ldr	r1, [r7, #8]
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f7fe fe4e 	bl	80042c8 <_tx_thread_create>
 800562c:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800562e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8005630:	4618      	mov	r0, r3
 8005632:	3750      	adds	r7, #80	@ 0x50
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	20000518 	.word	0x20000518
 800563c:	20000484 	.word	0x20000484
 8005640:	20000488 	.word	0x20000488
 8005644:	2000047c 	.word	0x2000047c
 8005648:	200005c8 	.word	0x200005c8
 800564c:	2000000c 	.word	0x2000000c

08005650 <_tx_execution_initialize>:
/*                                                                        */
/*  04-25-2022      Scott Larson            Initial Version 6.1.11        */
/*                                                                        */
/**************************************************************************/
VOID  _tx_execution_initialize(void)
{
 8005650:	b480      	push	{r7}
 8005652:	af00      	add	r7, sp, #0
    /* In idle mode until a thread is scheduled or ISR occurs.  */
    _tx_execution_idle_active = TX_TRUE;
 8005654:	4b05      	ldr	r3, [pc, #20]	@ (800566c <_tx_execution_initialize+0x1c>)
 8005656:	2201      	movs	r2, #1
 8005658:	601a      	str	r2, [r3, #0]

    /* Pickup the start of idle time.  */
    _tx_execution_idle_time_last_start =  TX_EXECUTION_TIME_SOURCE;
 800565a:	4b05      	ldr	r3, [pc, #20]	@ (8005670 <_tx_execution_initialize+0x20>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a05      	ldr	r2, [pc, #20]	@ (8005674 <_tx_execution_initialize+0x24>)
 8005660:	6013      	str	r3, [r2, #0]
}
 8005662:	bf00      	nop
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	20000a9c 	.word	0x20000a9c
 8005670:	e0001004 	.word	0xe0001004
 8005674:	20000a98 	.word	0x20000a98

08005678 <__cvt>:
 8005678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800567c:	ec57 6b10 	vmov	r6, r7, d0
 8005680:	2f00      	cmp	r7, #0
 8005682:	460c      	mov	r4, r1
 8005684:	4619      	mov	r1, r3
 8005686:	463b      	mov	r3, r7
 8005688:	bfbb      	ittet	lt
 800568a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800568e:	461f      	movlt	r7, r3
 8005690:	2300      	movge	r3, #0
 8005692:	232d      	movlt	r3, #45	@ 0x2d
 8005694:	700b      	strb	r3, [r1, #0]
 8005696:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005698:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800569c:	4691      	mov	r9, r2
 800569e:	f023 0820 	bic.w	r8, r3, #32
 80056a2:	bfbc      	itt	lt
 80056a4:	4632      	movlt	r2, r6
 80056a6:	4616      	movlt	r6, r2
 80056a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80056ac:	d005      	beq.n	80056ba <__cvt+0x42>
 80056ae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80056b2:	d100      	bne.n	80056b6 <__cvt+0x3e>
 80056b4:	3401      	adds	r4, #1
 80056b6:	2102      	movs	r1, #2
 80056b8:	e000      	b.n	80056bc <__cvt+0x44>
 80056ba:	2103      	movs	r1, #3
 80056bc:	ab03      	add	r3, sp, #12
 80056be:	9301      	str	r3, [sp, #4]
 80056c0:	ab02      	add	r3, sp, #8
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	ec47 6b10 	vmov	d0, r6, r7
 80056c8:	4653      	mov	r3, sl
 80056ca:	4622      	mov	r2, r4
 80056cc:	f000 fe4c 	bl	8006368 <_dtoa_r>
 80056d0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80056d4:	4605      	mov	r5, r0
 80056d6:	d119      	bne.n	800570c <__cvt+0x94>
 80056d8:	f019 0f01 	tst.w	r9, #1
 80056dc:	d00e      	beq.n	80056fc <__cvt+0x84>
 80056de:	eb00 0904 	add.w	r9, r0, r4
 80056e2:	2200      	movs	r2, #0
 80056e4:	2300      	movs	r3, #0
 80056e6:	4630      	mov	r0, r6
 80056e8:	4639      	mov	r1, r7
 80056ea:	f7fb fb45 	bl	8000d78 <__aeabi_dcmpeq>
 80056ee:	b108      	cbz	r0, 80056f4 <__cvt+0x7c>
 80056f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80056f4:	2230      	movs	r2, #48	@ 0x30
 80056f6:	9b03      	ldr	r3, [sp, #12]
 80056f8:	454b      	cmp	r3, r9
 80056fa:	d31e      	bcc.n	800573a <__cvt+0xc2>
 80056fc:	9b03      	ldr	r3, [sp, #12]
 80056fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005700:	1b5b      	subs	r3, r3, r5
 8005702:	4628      	mov	r0, r5
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	b004      	add	sp, #16
 8005708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800570c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005710:	eb00 0904 	add.w	r9, r0, r4
 8005714:	d1e5      	bne.n	80056e2 <__cvt+0x6a>
 8005716:	7803      	ldrb	r3, [r0, #0]
 8005718:	2b30      	cmp	r3, #48	@ 0x30
 800571a:	d10a      	bne.n	8005732 <__cvt+0xba>
 800571c:	2200      	movs	r2, #0
 800571e:	2300      	movs	r3, #0
 8005720:	4630      	mov	r0, r6
 8005722:	4639      	mov	r1, r7
 8005724:	f7fb fb28 	bl	8000d78 <__aeabi_dcmpeq>
 8005728:	b918      	cbnz	r0, 8005732 <__cvt+0xba>
 800572a:	f1c4 0401 	rsb	r4, r4, #1
 800572e:	f8ca 4000 	str.w	r4, [sl]
 8005732:	f8da 3000 	ldr.w	r3, [sl]
 8005736:	4499      	add	r9, r3
 8005738:	e7d3      	b.n	80056e2 <__cvt+0x6a>
 800573a:	1c59      	adds	r1, r3, #1
 800573c:	9103      	str	r1, [sp, #12]
 800573e:	701a      	strb	r2, [r3, #0]
 8005740:	e7d9      	b.n	80056f6 <__cvt+0x7e>

08005742 <__exponent>:
 8005742:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005744:	2900      	cmp	r1, #0
 8005746:	bfba      	itte	lt
 8005748:	4249      	neglt	r1, r1
 800574a:	232d      	movlt	r3, #45	@ 0x2d
 800574c:	232b      	movge	r3, #43	@ 0x2b
 800574e:	2909      	cmp	r1, #9
 8005750:	7002      	strb	r2, [r0, #0]
 8005752:	7043      	strb	r3, [r0, #1]
 8005754:	dd29      	ble.n	80057aa <__exponent+0x68>
 8005756:	f10d 0307 	add.w	r3, sp, #7
 800575a:	461d      	mov	r5, r3
 800575c:	270a      	movs	r7, #10
 800575e:	461a      	mov	r2, r3
 8005760:	fbb1 f6f7 	udiv	r6, r1, r7
 8005764:	fb07 1416 	mls	r4, r7, r6, r1
 8005768:	3430      	adds	r4, #48	@ 0x30
 800576a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800576e:	460c      	mov	r4, r1
 8005770:	2c63      	cmp	r4, #99	@ 0x63
 8005772:	f103 33ff 	add.w	r3, r3, #4294967295
 8005776:	4631      	mov	r1, r6
 8005778:	dcf1      	bgt.n	800575e <__exponent+0x1c>
 800577a:	3130      	adds	r1, #48	@ 0x30
 800577c:	1e94      	subs	r4, r2, #2
 800577e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005782:	1c41      	adds	r1, r0, #1
 8005784:	4623      	mov	r3, r4
 8005786:	42ab      	cmp	r3, r5
 8005788:	d30a      	bcc.n	80057a0 <__exponent+0x5e>
 800578a:	f10d 0309 	add.w	r3, sp, #9
 800578e:	1a9b      	subs	r3, r3, r2
 8005790:	42ac      	cmp	r4, r5
 8005792:	bf88      	it	hi
 8005794:	2300      	movhi	r3, #0
 8005796:	3302      	adds	r3, #2
 8005798:	4403      	add	r3, r0
 800579a:	1a18      	subs	r0, r3, r0
 800579c:	b003      	add	sp, #12
 800579e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057a0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80057a4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80057a8:	e7ed      	b.n	8005786 <__exponent+0x44>
 80057aa:	2330      	movs	r3, #48	@ 0x30
 80057ac:	3130      	adds	r1, #48	@ 0x30
 80057ae:	7083      	strb	r3, [r0, #2]
 80057b0:	70c1      	strb	r1, [r0, #3]
 80057b2:	1d03      	adds	r3, r0, #4
 80057b4:	e7f1      	b.n	800579a <__exponent+0x58>
	...

080057b8 <_printf_float>:
 80057b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057bc:	b08d      	sub	sp, #52	@ 0x34
 80057be:	460c      	mov	r4, r1
 80057c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80057c4:	4616      	mov	r6, r2
 80057c6:	461f      	mov	r7, r3
 80057c8:	4605      	mov	r5, r0
 80057ca:	f000 fccd 	bl	8006168 <_localeconv_r>
 80057ce:	6803      	ldr	r3, [r0, #0]
 80057d0:	9304      	str	r3, [sp, #16]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fa fea4 	bl	8000520 <strlen>
 80057d8:	2300      	movs	r3, #0
 80057da:	930a      	str	r3, [sp, #40]	@ 0x28
 80057dc:	f8d8 3000 	ldr.w	r3, [r8]
 80057e0:	9005      	str	r0, [sp, #20]
 80057e2:	3307      	adds	r3, #7
 80057e4:	f023 0307 	bic.w	r3, r3, #7
 80057e8:	f103 0208 	add.w	r2, r3, #8
 80057ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 80057f0:	f8d4 b000 	ldr.w	fp, [r4]
 80057f4:	f8c8 2000 	str.w	r2, [r8]
 80057f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005800:	9307      	str	r3, [sp, #28]
 8005802:	f8cd 8018 	str.w	r8, [sp, #24]
 8005806:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800580a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800580e:	4b9c      	ldr	r3, [pc, #624]	@ (8005a80 <_printf_float+0x2c8>)
 8005810:	f04f 32ff 	mov.w	r2, #4294967295
 8005814:	f7fb fae2 	bl	8000ddc <__aeabi_dcmpun>
 8005818:	bb70      	cbnz	r0, 8005878 <_printf_float+0xc0>
 800581a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800581e:	4b98      	ldr	r3, [pc, #608]	@ (8005a80 <_printf_float+0x2c8>)
 8005820:	f04f 32ff 	mov.w	r2, #4294967295
 8005824:	f7fb fabc 	bl	8000da0 <__aeabi_dcmple>
 8005828:	bb30      	cbnz	r0, 8005878 <_printf_float+0xc0>
 800582a:	2200      	movs	r2, #0
 800582c:	2300      	movs	r3, #0
 800582e:	4640      	mov	r0, r8
 8005830:	4649      	mov	r1, r9
 8005832:	f7fb faab 	bl	8000d8c <__aeabi_dcmplt>
 8005836:	b110      	cbz	r0, 800583e <_printf_float+0x86>
 8005838:	232d      	movs	r3, #45	@ 0x2d
 800583a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800583e:	4a91      	ldr	r2, [pc, #580]	@ (8005a84 <_printf_float+0x2cc>)
 8005840:	4b91      	ldr	r3, [pc, #580]	@ (8005a88 <_printf_float+0x2d0>)
 8005842:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005846:	bf94      	ite	ls
 8005848:	4690      	movls	r8, r2
 800584a:	4698      	movhi	r8, r3
 800584c:	2303      	movs	r3, #3
 800584e:	6123      	str	r3, [r4, #16]
 8005850:	f02b 0304 	bic.w	r3, fp, #4
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	f04f 0900 	mov.w	r9, #0
 800585a:	9700      	str	r7, [sp, #0]
 800585c:	4633      	mov	r3, r6
 800585e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005860:	4621      	mov	r1, r4
 8005862:	4628      	mov	r0, r5
 8005864:	f000 f9d2 	bl	8005c0c <_printf_common>
 8005868:	3001      	adds	r0, #1
 800586a:	f040 808d 	bne.w	8005988 <_printf_float+0x1d0>
 800586e:	f04f 30ff 	mov.w	r0, #4294967295
 8005872:	b00d      	add	sp, #52	@ 0x34
 8005874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005878:	4642      	mov	r2, r8
 800587a:	464b      	mov	r3, r9
 800587c:	4640      	mov	r0, r8
 800587e:	4649      	mov	r1, r9
 8005880:	f7fb faac 	bl	8000ddc <__aeabi_dcmpun>
 8005884:	b140      	cbz	r0, 8005898 <_printf_float+0xe0>
 8005886:	464b      	mov	r3, r9
 8005888:	2b00      	cmp	r3, #0
 800588a:	bfbc      	itt	lt
 800588c:	232d      	movlt	r3, #45	@ 0x2d
 800588e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005892:	4a7e      	ldr	r2, [pc, #504]	@ (8005a8c <_printf_float+0x2d4>)
 8005894:	4b7e      	ldr	r3, [pc, #504]	@ (8005a90 <_printf_float+0x2d8>)
 8005896:	e7d4      	b.n	8005842 <_printf_float+0x8a>
 8005898:	6863      	ldr	r3, [r4, #4]
 800589a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800589e:	9206      	str	r2, [sp, #24]
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	d13b      	bne.n	800591c <_printf_float+0x164>
 80058a4:	2306      	movs	r3, #6
 80058a6:	6063      	str	r3, [r4, #4]
 80058a8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80058ac:	2300      	movs	r3, #0
 80058ae:	6022      	str	r2, [r4, #0]
 80058b0:	9303      	str	r3, [sp, #12]
 80058b2:	ab0a      	add	r3, sp, #40	@ 0x28
 80058b4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80058b8:	ab09      	add	r3, sp, #36	@ 0x24
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	6861      	ldr	r1, [r4, #4]
 80058be:	ec49 8b10 	vmov	d0, r8, r9
 80058c2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80058c6:	4628      	mov	r0, r5
 80058c8:	f7ff fed6 	bl	8005678 <__cvt>
 80058cc:	9b06      	ldr	r3, [sp, #24]
 80058ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80058d0:	2b47      	cmp	r3, #71	@ 0x47
 80058d2:	4680      	mov	r8, r0
 80058d4:	d129      	bne.n	800592a <_printf_float+0x172>
 80058d6:	1cc8      	adds	r0, r1, #3
 80058d8:	db02      	blt.n	80058e0 <_printf_float+0x128>
 80058da:	6863      	ldr	r3, [r4, #4]
 80058dc:	4299      	cmp	r1, r3
 80058de:	dd41      	ble.n	8005964 <_printf_float+0x1ac>
 80058e0:	f1aa 0a02 	sub.w	sl, sl, #2
 80058e4:	fa5f fa8a 	uxtb.w	sl, sl
 80058e8:	3901      	subs	r1, #1
 80058ea:	4652      	mov	r2, sl
 80058ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80058f0:	9109      	str	r1, [sp, #36]	@ 0x24
 80058f2:	f7ff ff26 	bl	8005742 <__exponent>
 80058f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058f8:	1813      	adds	r3, r2, r0
 80058fa:	2a01      	cmp	r2, #1
 80058fc:	4681      	mov	r9, r0
 80058fe:	6123      	str	r3, [r4, #16]
 8005900:	dc02      	bgt.n	8005908 <_printf_float+0x150>
 8005902:	6822      	ldr	r2, [r4, #0]
 8005904:	07d2      	lsls	r2, r2, #31
 8005906:	d501      	bpl.n	800590c <_printf_float+0x154>
 8005908:	3301      	adds	r3, #1
 800590a:	6123      	str	r3, [r4, #16]
 800590c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0a2      	beq.n	800585a <_printf_float+0xa2>
 8005914:	232d      	movs	r3, #45	@ 0x2d
 8005916:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800591a:	e79e      	b.n	800585a <_printf_float+0xa2>
 800591c:	9a06      	ldr	r2, [sp, #24]
 800591e:	2a47      	cmp	r2, #71	@ 0x47
 8005920:	d1c2      	bne.n	80058a8 <_printf_float+0xf0>
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1c0      	bne.n	80058a8 <_printf_float+0xf0>
 8005926:	2301      	movs	r3, #1
 8005928:	e7bd      	b.n	80058a6 <_printf_float+0xee>
 800592a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800592e:	d9db      	bls.n	80058e8 <_printf_float+0x130>
 8005930:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005934:	d118      	bne.n	8005968 <_printf_float+0x1b0>
 8005936:	2900      	cmp	r1, #0
 8005938:	6863      	ldr	r3, [r4, #4]
 800593a:	dd0b      	ble.n	8005954 <_printf_float+0x19c>
 800593c:	6121      	str	r1, [r4, #16]
 800593e:	b913      	cbnz	r3, 8005946 <_printf_float+0x18e>
 8005940:	6822      	ldr	r2, [r4, #0]
 8005942:	07d0      	lsls	r0, r2, #31
 8005944:	d502      	bpl.n	800594c <_printf_float+0x194>
 8005946:	3301      	adds	r3, #1
 8005948:	440b      	add	r3, r1
 800594a:	6123      	str	r3, [r4, #16]
 800594c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800594e:	f04f 0900 	mov.w	r9, #0
 8005952:	e7db      	b.n	800590c <_printf_float+0x154>
 8005954:	b913      	cbnz	r3, 800595c <_printf_float+0x1a4>
 8005956:	6822      	ldr	r2, [r4, #0]
 8005958:	07d2      	lsls	r2, r2, #31
 800595a:	d501      	bpl.n	8005960 <_printf_float+0x1a8>
 800595c:	3302      	adds	r3, #2
 800595e:	e7f4      	b.n	800594a <_printf_float+0x192>
 8005960:	2301      	movs	r3, #1
 8005962:	e7f2      	b.n	800594a <_printf_float+0x192>
 8005964:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005968:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800596a:	4299      	cmp	r1, r3
 800596c:	db05      	blt.n	800597a <_printf_float+0x1c2>
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	6121      	str	r1, [r4, #16]
 8005972:	07d8      	lsls	r0, r3, #31
 8005974:	d5ea      	bpl.n	800594c <_printf_float+0x194>
 8005976:	1c4b      	adds	r3, r1, #1
 8005978:	e7e7      	b.n	800594a <_printf_float+0x192>
 800597a:	2900      	cmp	r1, #0
 800597c:	bfd4      	ite	le
 800597e:	f1c1 0202 	rsble	r2, r1, #2
 8005982:	2201      	movgt	r2, #1
 8005984:	4413      	add	r3, r2
 8005986:	e7e0      	b.n	800594a <_printf_float+0x192>
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	055a      	lsls	r2, r3, #21
 800598c:	d407      	bmi.n	800599e <_printf_float+0x1e6>
 800598e:	6923      	ldr	r3, [r4, #16]
 8005990:	4642      	mov	r2, r8
 8005992:	4631      	mov	r1, r6
 8005994:	4628      	mov	r0, r5
 8005996:	47b8      	blx	r7
 8005998:	3001      	adds	r0, #1
 800599a:	d12b      	bne.n	80059f4 <_printf_float+0x23c>
 800599c:	e767      	b.n	800586e <_printf_float+0xb6>
 800599e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059a2:	f240 80dd 	bls.w	8005b60 <_printf_float+0x3a8>
 80059a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80059aa:	2200      	movs	r2, #0
 80059ac:	2300      	movs	r3, #0
 80059ae:	f7fb f9e3 	bl	8000d78 <__aeabi_dcmpeq>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d033      	beq.n	8005a1e <_printf_float+0x266>
 80059b6:	4a37      	ldr	r2, [pc, #220]	@ (8005a94 <_printf_float+0x2dc>)
 80059b8:	2301      	movs	r3, #1
 80059ba:	4631      	mov	r1, r6
 80059bc:	4628      	mov	r0, r5
 80059be:	47b8      	blx	r7
 80059c0:	3001      	adds	r0, #1
 80059c2:	f43f af54 	beq.w	800586e <_printf_float+0xb6>
 80059c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80059ca:	4543      	cmp	r3, r8
 80059cc:	db02      	blt.n	80059d4 <_printf_float+0x21c>
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	07d8      	lsls	r0, r3, #31
 80059d2:	d50f      	bpl.n	80059f4 <_printf_float+0x23c>
 80059d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059d8:	4631      	mov	r1, r6
 80059da:	4628      	mov	r0, r5
 80059dc:	47b8      	blx	r7
 80059de:	3001      	adds	r0, #1
 80059e0:	f43f af45 	beq.w	800586e <_printf_float+0xb6>
 80059e4:	f04f 0900 	mov.w	r9, #0
 80059e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80059ec:	f104 0a1a 	add.w	sl, r4, #26
 80059f0:	45c8      	cmp	r8, r9
 80059f2:	dc09      	bgt.n	8005a08 <_printf_float+0x250>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	079b      	lsls	r3, r3, #30
 80059f8:	f100 8103 	bmi.w	8005c02 <_printf_float+0x44a>
 80059fc:	68e0      	ldr	r0, [r4, #12]
 80059fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a00:	4298      	cmp	r0, r3
 8005a02:	bfb8      	it	lt
 8005a04:	4618      	movlt	r0, r3
 8005a06:	e734      	b.n	8005872 <_printf_float+0xba>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	4652      	mov	r2, sl
 8005a0c:	4631      	mov	r1, r6
 8005a0e:	4628      	mov	r0, r5
 8005a10:	47b8      	blx	r7
 8005a12:	3001      	adds	r0, #1
 8005a14:	f43f af2b 	beq.w	800586e <_printf_float+0xb6>
 8005a18:	f109 0901 	add.w	r9, r9, #1
 8005a1c:	e7e8      	b.n	80059f0 <_printf_float+0x238>
 8005a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	dc39      	bgt.n	8005a98 <_printf_float+0x2e0>
 8005a24:	4a1b      	ldr	r2, [pc, #108]	@ (8005a94 <_printf_float+0x2dc>)
 8005a26:	2301      	movs	r3, #1
 8005a28:	4631      	mov	r1, r6
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	47b8      	blx	r7
 8005a2e:	3001      	adds	r0, #1
 8005a30:	f43f af1d 	beq.w	800586e <_printf_float+0xb6>
 8005a34:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005a38:	ea59 0303 	orrs.w	r3, r9, r3
 8005a3c:	d102      	bne.n	8005a44 <_printf_float+0x28c>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	07d9      	lsls	r1, r3, #31
 8005a42:	d5d7      	bpl.n	80059f4 <_printf_float+0x23c>
 8005a44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a48:	4631      	mov	r1, r6
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	47b8      	blx	r7
 8005a4e:	3001      	adds	r0, #1
 8005a50:	f43f af0d 	beq.w	800586e <_printf_float+0xb6>
 8005a54:	f04f 0a00 	mov.w	sl, #0
 8005a58:	f104 0b1a 	add.w	fp, r4, #26
 8005a5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a5e:	425b      	negs	r3, r3
 8005a60:	4553      	cmp	r3, sl
 8005a62:	dc01      	bgt.n	8005a68 <_printf_float+0x2b0>
 8005a64:	464b      	mov	r3, r9
 8005a66:	e793      	b.n	8005990 <_printf_float+0x1d8>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	465a      	mov	r2, fp
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	4628      	mov	r0, r5
 8005a70:	47b8      	blx	r7
 8005a72:	3001      	adds	r0, #1
 8005a74:	f43f aefb 	beq.w	800586e <_printf_float+0xb6>
 8005a78:	f10a 0a01 	add.w	sl, sl, #1
 8005a7c:	e7ee      	b.n	8005a5c <_printf_float+0x2a4>
 8005a7e:	bf00      	nop
 8005a80:	7fefffff 	.word	0x7fefffff
 8005a84:	0800806c 	.word	0x0800806c
 8005a88:	08008070 	.word	0x08008070
 8005a8c:	08008074 	.word	0x08008074
 8005a90:	08008078 	.word	0x08008078
 8005a94:	0800807c 	.word	0x0800807c
 8005a98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a9a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005a9e:	4553      	cmp	r3, sl
 8005aa0:	bfa8      	it	ge
 8005aa2:	4653      	movge	r3, sl
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	4699      	mov	r9, r3
 8005aa8:	dc36      	bgt.n	8005b18 <_printf_float+0x360>
 8005aaa:	f04f 0b00 	mov.w	fp, #0
 8005aae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ab2:	f104 021a 	add.w	r2, r4, #26
 8005ab6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ab8:	9306      	str	r3, [sp, #24]
 8005aba:	eba3 0309 	sub.w	r3, r3, r9
 8005abe:	455b      	cmp	r3, fp
 8005ac0:	dc31      	bgt.n	8005b26 <_printf_float+0x36e>
 8005ac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ac4:	459a      	cmp	sl, r3
 8005ac6:	dc3a      	bgt.n	8005b3e <_printf_float+0x386>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	07da      	lsls	r2, r3, #31
 8005acc:	d437      	bmi.n	8005b3e <_printf_float+0x386>
 8005ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ad0:	ebaa 0903 	sub.w	r9, sl, r3
 8005ad4:	9b06      	ldr	r3, [sp, #24]
 8005ad6:	ebaa 0303 	sub.w	r3, sl, r3
 8005ada:	4599      	cmp	r9, r3
 8005adc:	bfa8      	it	ge
 8005ade:	4699      	movge	r9, r3
 8005ae0:	f1b9 0f00 	cmp.w	r9, #0
 8005ae4:	dc33      	bgt.n	8005b4e <_printf_float+0x396>
 8005ae6:	f04f 0800 	mov.w	r8, #0
 8005aea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005aee:	f104 0b1a 	add.w	fp, r4, #26
 8005af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005af4:	ebaa 0303 	sub.w	r3, sl, r3
 8005af8:	eba3 0309 	sub.w	r3, r3, r9
 8005afc:	4543      	cmp	r3, r8
 8005afe:	f77f af79 	ble.w	80059f4 <_printf_float+0x23c>
 8005b02:	2301      	movs	r3, #1
 8005b04:	465a      	mov	r2, fp
 8005b06:	4631      	mov	r1, r6
 8005b08:	4628      	mov	r0, r5
 8005b0a:	47b8      	blx	r7
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	f43f aeae 	beq.w	800586e <_printf_float+0xb6>
 8005b12:	f108 0801 	add.w	r8, r8, #1
 8005b16:	e7ec      	b.n	8005af2 <_printf_float+0x33a>
 8005b18:	4642      	mov	r2, r8
 8005b1a:	4631      	mov	r1, r6
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	47b8      	blx	r7
 8005b20:	3001      	adds	r0, #1
 8005b22:	d1c2      	bne.n	8005aaa <_printf_float+0x2f2>
 8005b24:	e6a3      	b.n	800586e <_printf_float+0xb6>
 8005b26:	2301      	movs	r3, #1
 8005b28:	4631      	mov	r1, r6
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	9206      	str	r2, [sp, #24]
 8005b2e:	47b8      	blx	r7
 8005b30:	3001      	adds	r0, #1
 8005b32:	f43f ae9c 	beq.w	800586e <_printf_float+0xb6>
 8005b36:	9a06      	ldr	r2, [sp, #24]
 8005b38:	f10b 0b01 	add.w	fp, fp, #1
 8005b3c:	e7bb      	b.n	8005ab6 <_printf_float+0x2fe>
 8005b3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b42:	4631      	mov	r1, r6
 8005b44:	4628      	mov	r0, r5
 8005b46:	47b8      	blx	r7
 8005b48:	3001      	adds	r0, #1
 8005b4a:	d1c0      	bne.n	8005ace <_printf_float+0x316>
 8005b4c:	e68f      	b.n	800586e <_printf_float+0xb6>
 8005b4e:	9a06      	ldr	r2, [sp, #24]
 8005b50:	464b      	mov	r3, r9
 8005b52:	4442      	add	r2, r8
 8005b54:	4631      	mov	r1, r6
 8005b56:	4628      	mov	r0, r5
 8005b58:	47b8      	blx	r7
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	d1c3      	bne.n	8005ae6 <_printf_float+0x32e>
 8005b5e:	e686      	b.n	800586e <_printf_float+0xb6>
 8005b60:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b64:	f1ba 0f01 	cmp.w	sl, #1
 8005b68:	dc01      	bgt.n	8005b6e <_printf_float+0x3b6>
 8005b6a:	07db      	lsls	r3, r3, #31
 8005b6c:	d536      	bpl.n	8005bdc <_printf_float+0x424>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	4642      	mov	r2, r8
 8005b72:	4631      	mov	r1, r6
 8005b74:	4628      	mov	r0, r5
 8005b76:	47b8      	blx	r7
 8005b78:	3001      	adds	r0, #1
 8005b7a:	f43f ae78 	beq.w	800586e <_printf_float+0xb6>
 8005b7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b82:	4631      	mov	r1, r6
 8005b84:	4628      	mov	r0, r5
 8005b86:	47b8      	blx	r7
 8005b88:	3001      	adds	r0, #1
 8005b8a:	f43f ae70 	beq.w	800586e <_printf_float+0xb6>
 8005b8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b92:	2200      	movs	r2, #0
 8005b94:	2300      	movs	r3, #0
 8005b96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b9a:	f7fb f8ed 	bl	8000d78 <__aeabi_dcmpeq>
 8005b9e:	b9c0      	cbnz	r0, 8005bd2 <_printf_float+0x41a>
 8005ba0:	4653      	mov	r3, sl
 8005ba2:	f108 0201 	add.w	r2, r8, #1
 8005ba6:	4631      	mov	r1, r6
 8005ba8:	4628      	mov	r0, r5
 8005baa:	47b8      	blx	r7
 8005bac:	3001      	adds	r0, #1
 8005bae:	d10c      	bne.n	8005bca <_printf_float+0x412>
 8005bb0:	e65d      	b.n	800586e <_printf_float+0xb6>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	465a      	mov	r2, fp
 8005bb6:	4631      	mov	r1, r6
 8005bb8:	4628      	mov	r0, r5
 8005bba:	47b8      	blx	r7
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	f43f ae56 	beq.w	800586e <_printf_float+0xb6>
 8005bc2:	f108 0801 	add.w	r8, r8, #1
 8005bc6:	45d0      	cmp	r8, sl
 8005bc8:	dbf3      	blt.n	8005bb2 <_printf_float+0x3fa>
 8005bca:	464b      	mov	r3, r9
 8005bcc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005bd0:	e6df      	b.n	8005992 <_printf_float+0x1da>
 8005bd2:	f04f 0800 	mov.w	r8, #0
 8005bd6:	f104 0b1a 	add.w	fp, r4, #26
 8005bda:	e7f4      	b.n	8005bc6 <_printf_float+0x40e>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	4642      	mov	r2, r8
 8005be0:	e7e1      	b.n	8005ba6 <_printf_float+0x3ee>
 8005be2:	2301      	movs	r3, #1
 8005be4:	464a      	mov	r2, r9
 8005be6:	4631      	mov	r1, r6
 8005be8:	4628      	mov	r0, r5
 8005bea:	47b8      	blx	r7
 8005bec:	3001      	adds	r0, #1
 8005bee:	f43f ae3e 	beq.w	800586e <_printf_float+0xb6>
 8005bf2:	f108 0801 	add.w	r8, r8, #1
 8005bf6:	68e3      	ldr	r3, [r4, #12]
 8005bf8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005bfa:	1a5b      	subs	r3, r3, r1
 8005bfc:	4543      	cmp	r3, r8
 8005bfe:	dcf0      	bgt.n	8005be2 <_printf_float+0x42a>
 8005c00:	e6fc      	b.n	80059fc <_printf_float+0x244>
 8005c02:	f04f 0800 	mov.w	r8, #0
 8005c06:	f104 0919 	add.w	r9, r4, #25
 8005c0a:	e7f4      	b.n	8005bf6 <_printf_float+0x43e>

08005c0c <_printf_common>:
 8005c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c10:	4616      	mov	r6, r2
 8005c12:	4698      	mov	r8, r3
 8005c14:	688a      	ldr	r2, [r1, #8]
 8005c16:	690b      	ldr	r3, [r1, #16]
 8005c18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	bfb8      	it	lt
 8005c20:	4613      	movlt	r3, r2
 8005c22:	6033      	str	r3, [r6, #0]
 8005c24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c28:	4607      	mov	r7, r0
 8005c2a:	460c      	mov	r4, r1
 8005c2c:	b10a      	cbz	r2, 8005c32 <_printf_common+0x26>
 8005c2e:	3301      	adds	r3, #1
 8005c30:	6033      	str	r3, [r6, #0]
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	0699      	lsls	r1, r3, #26
 8005c36:	bf42      	ittt	mi
 8005c38:	6833      	ldrmi	r3, [r6, #0]
 8005c3a:	3302      	addmi	r3, #2
 8005c3c:	6033      	strmi	r3, [r6, #0]
 8005c3e:	6825      	ldr	r5, [r4, #0]
 8005c40:	f015 0506 	ands.w	r5, r5, #6
 8005c44:	d106      	bne.n	8005c54 <_printf_common+0x48>
 8005c46:	f104 0a19 	add.w	sl, r4, #25
 8005c4a:	68e3      	ldr	r3, [r4, #12]
 8005c4c:	6832      	ldr	r2, [r6, #0]
 8005c4e:	1a9b      	subs	r3, r3, r2
 8005c50:	42ab      	cmp	r3, r5
 8005c52:	dc26      	bgt.n	8005ca2 <_printf_common+0x96>
 8005c54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c58:	6822      	ldr	r2, [r4, #0]
 8005c5a:	3b00      	subs	r3, #0
 8005c5c:	bf18      	it	ne
 8005c5e:	2301      	movne	r3, #1
 8005c60:	0692      	lsls	r2, r2, #26
 8005c62:	d42b      	bmi.n	8005cbc <_printf_common+0xb0>
 8005c64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c68:	4641      	mov	r1, r8
 8005c6a:	4638      	mov	r0, r7
 8005c6c:	47c8      	blx	r9
 8005c6e:	3001      	adds	r0, #1
 8005c70:	d01e      	beq.n	8005cb0 <_printf_common+0xa4>
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	6922      	ldr	r2, [r4, #16]
 8005c76:	f003 0306 	and.w	r3, r3, #6
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	bf02      	ittt	eq
 8005c7e:	68e5      	ldreq	r5, [r4, #12]
 8005c80:	6833      	ldreq	r3, [r6, #0]
 8005c82:	1aed      	subeq	r5, r5, r3
 8005c84:	68a3      	ldr	r3, [r4, #8]
 8005c86:	bf0c      	ite	eq
 8005c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c8c:	2500      	movne	r5, #0
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	bfc4      	itt	gt
 8005c92:	1a9b      	subgt	r3, r3, r2
 8005c94:	18ed      	addgt	r5, r5, r3
 8005c96:	2600      	movs	r6, #0
 8005c98:	341a      	adds	r4, #26
 8005c9a:	42b5      	cmp	r5, r6
 8005c9c:	d11a      	bne.n	8005cd4 <_printf_common+0xc8>
 8005c9e:	2000      	movs	r0, #0
 8005ca0:	e008      	b.n	8005cb4 <_printf_common+0xa8>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	4652      	mov	r2, sl
 8005ca6:	4641      	mov	r1, r8
 8005ca8:	4638      	mov	r0, r7
 8005caa:	47c8      	blx	r9
 8005cac:	3001      	adds	r0, #1
 8005cae:	d103      	bne.n	8005cb8 <_printf_common+0xac>
 8005cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb8:	3501      	adds	r5, #1
 8005cba:	e7c6      	b.n	8005c4a <_printf_common+0x3e>
 8005cbc:	18e1      	adds	r1, r4, r3
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	2030      	movs	r0, #48	@ 0x30
 8005cc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005cc6:	4422      	add	r2, r4
 8005cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ccc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005cd0:	3302      	adds	r3, #2
 8005cd2:	e7c7      	b.n	8005c64 <_printf_common+0x58>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	4622      	mov	r2, r4
 8005cd8:	4641      	mov	r1, r8
 8005cda:	4638      	mov	r0, r7
 8005cdc:	47c8      	blx	r9
 8005cde:	3001      	adds	r0, #1
 8005ce0:	d0e6      	beq.n	8005cb0 <_printf_common+0xa4>
 8005ce2:	3601      	adds	r6, #1
 8005ce4:	e7d9      	b.n	8005c9a <_printf_common+0x8e>
	...

08005ce8 <_printf_i>:
 8005ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cec:	7e0f      	ldrb	r7, [r1, #24]
 8005cee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005cf0:	2f78      	cmp	r7, #120	@ 0x78
 8005cf2:	4691      	mov	r9, r2
 8005cf4:	4680      	mov	r8, r0
 8005cf6:	460c      	mov	r4, r1
 8005cf8:	469a      	mov	sl, r3
 8005cfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005cfe:	d807      	bhi.n	8005d10 <_printf_i+0x28>
 8005d00:	2f62      	cmp	r7, #98	@ 0x62
 8005d02:	d80a      	bhi.n	8005d1a <_printf_i+0x32>
 8005d04:	2f00      	cmp	r7, #0
 8005d06:	f000 80d2 	beq.w	8005eae <_printf_i+0x1c6>
 8005d0a:	2f58      	cmp	r7, #88	@ 0x58
 8005d0c:	f000 80b9 	beq.w	8005e82 <_printf_i+0x19a>
 8005d10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d18:	e03a      	b.n	8005d90 <_printf_i+0xa8>
 8005d1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d1e:	2b15      	cmp	r3, #21
 8005d20:	d8f6      	bhi.n	8005d10 <_printf_i+0x28>
 8005d22:	a101      	add	r1, pc, #4	@ (adr r1, 8005d28 <_printf_i+0x40>)
 8005d24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d28:	08005d81 	.word	0x08005d81
 8005d2c:	08005d95 	.word	0x08005d95
 8005d30:	08005d11 	.word	0x08005d11
 8005d34:	08005d11 	.word	0x08005d11
 8005d38:	08005d11 	.word	0x08005d11
 8005d3c:	08005d11 	.word	0x08005d11
 8005d40:	08005d95 	.word	0x08005d95
 8005d44:	08005d11 	.word	0x08005d11
 8005d48:	08005d11 	.word	0x08005d11
 8005d4c:	08005d11 	.word	0x08005d11
 8005d50:	08005d11 	.word	0x08005d11
 8005d54:	08005e95 	.word	0x08005e95
 8005d58:	08005dbf 	.word	0x08005dbf
 8005d5c:	08005e4f 	.word	0x08005e4f
 8005d60:	08005d11 	.word	0x08005d11
 8005d64:	08005d11 	.word	0x08005d11
 8005d68:	08005eb7 	.word	0x08005eb7
 8005d6c:	08005d11 	.word	0x08005d11
 8005d70:	08005dbf 	.word	0x08005dbf
 8005d74:	08005d11 	.word	0x08005d11
 8005d78:	08005d11 	.word	0x08005d11
 8005d7c:	08005e57 	.word	0x08005e57
 8005d80:	6833      	ldr	r3, [r6, #0]
 8005d82:	1d1a      	adds	r2, r3, #4
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6032      	str	r2, [r6, #0]
 8005d88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d90:	2301      	movs	r3, #1
 8005d92:	e09d      	b.n	8005ed0 <_printf_i+0x1e8>
 8005d94:	6833      	ldr	r3, [r6, #0]
 8005d96:	6820      	ldr	r0, [r4, #0]
 8005d98:	1d19      	adds	r1, r3, #4
 8005d9a:	6031      	str	r1, [r6, #0]
 8005d9c:	0606      	lsls	r6, r0, #24
 8005d9e:	d501      	bpl.n	8005da4 <_printf_i+0xbc>
 8005da0:	681d      	ldr	r5, [r3, #0]
 8005da2:	e003      	b.n	8005dac <_printf_i+0xc4>
 8005da4:	0645      	lsls	r5, r0, #25
 8005da6:	d5fb      	bpl.n	8005da0 <_printf_i+0xb8>
 8005da8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005dac:	2d00      	cmp	r5, #0
 8005dae:	da03      	bge.n	8005db8 <_printf_i+0xd0>
 8005db0:	232d      	movs	r3, #45	@ 0x2d
 8005db2:	426d      	negs	r5, r5
 8005db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005db8:	4859      	ldr	r0, [pc, #356]	@ (8005f20 <_printf_i+0x238>)
 8005dba:	230a      	movs	r3, #10
 8005dbc:	e011      	b.n	8005de2 <_printf_i+0xfa>
 8005dbe:	6821      	ldr	r1, [r4, #0]
 8005dc0:	6833      	ldr	r3, [r6, #0]
 8005dc2:	0608      	lsls	r0, r1, #24
 8005dc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005dc8:	d402      	bmi.n	8005dd0 <_printf_i+0xe8>
 8005dca:	0649      	lsls	r1, r1, #25
 8005dcc:	bf48      	it	mi
 8005dce:	b2ad      	uxthmi	r5, r5
 8005dd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005dd2:	4853      	ldr	r0, [pc, #332]	@ (8005f20 <_printf_i+0x238>)
 8005dd4:	6033      	str	r3, [r6, #0]
 8005dd6:	bf14      	ite	ne
 8005dd8:	230a      	movne	r3, #10
 8005dda:	2308      	moveq	r3, #8
 8005ddc:	2100      	movs	r1, #0
 8005dde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005de2:	6866      	ldr	r6, [r4, #4]
 8005de4:	60a6      	str	r6, [r4, #8]
 8005de6:	2e00      	cmp	r6, #0
 8005de8:	bfa2      	ittt	ge
 8005dea:	6821      	ldrge	r1, [r4, #0]
 8005dec:	f021 0104 	bicge.w	r1, r1, #4
 8005df0:	6021      	strge	r1, [r4, #0]
 8005df2:	b90d      	cbnz	r5, 8005df8 <_printf_i+0x110>
 8005df4:	2e00      	cmp	r6, #0
 8005df6:	d04b      	beq.n	8005e90 <_printf_i+0x1a8>
 8005df8:	4616      	mov	r6, r2
 8005dfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8005dfe:	fb03 5711 	mls	r7, r3, r1, r5
 8005e02:	5dc7      	ldrb	r7, [r0, r7]
 8005e04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e08:	462f      	mov	r7, r5
 8005e0a:	42bb      	cmp	r3, r7
 8005e0c:	460d      	mov	r5, r1
 8005e0e:	d9f4      	bls.n	8005dfa <_printf_i+0x112>
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d10b      	bne.n	8005e2c <_printf_i+0x144>
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	07df      	lsls	r7, r3, #31
 8005e18:	d508      	bpl.n	8005e2c <_printf_i+0x144>
 8005e1a:	6923      	ldr	r3, [r4, #16]
 8005e1c:	6861      	ldr	r1, [r4, #4]
 8005e1e:	4299      	cmp	r1, r3
 8005e20:	bfde      	ittt	le
 8005e22:	2330      	movle	r3, #48	@ 0x30
 8005e24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e2c:	1b92      	subs	r2, r2, r6
 8005e2e:	6122      	str	r2, [r4, #16]
 8005e30:	f8cd a000 	str.w	sl, [sp]
 8005e34:	464b      	mov	r3, r9
 8005e36:	aa03      	add	r2, sp, #12
 8005e38:	4621      	mov	r1, r4
 8005e3a:	4640      	mov	r0, r8
 8005e3c:	f7ff fee6 	bl	8005c0c <_printf_common>
 8005e40:	3001      	adds	r0, #1
 8005e42:	d14a      	bne.n	8005eda <_printf_i+0x1f2>
 8005e44:	f04f 30ff 	mov.w	r0, #4294967295
 8005e48:	b004      	add	sp, #16
 8005e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	f043 0320 	orr.w	r3, r3, #32
 8005e54:	6023      	str	r3, [r4, #0]
 8005e56:	4833      	ldr	r0, [pc, #204]	@ (8005f24 <_printf_i+0x23c>)
 8005e58:	2778      	movs	r7, #120	@ 0x78
 8005e5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	6831      	ldr	r1, [r6, #0]
 8005e62:	061f      	lsls	r7, r3, #24
 8005e64:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e68:	d402      	bmi.n	8005e70 <_printf_i+0x188>
 8005e6a:	065f      	lsls	r7, r3, #25
 8005e6c:	bf48      	it	mi
 8005e6e:	b2ad      	uxthmi	r5, r5
 8005e70:	6031      	str	r1, [r6, #0]
 8005e72:	07d9      	lsls	r1, r3, #31
 8005e74:	bf44      	itt	mi
 8005e76:	f043 0320 	orrmi.w	r3, r3, #32
 8005e7a:	6023      	strmi	r3, [r4, #0]
 8005e7c:	b11d      	cbz	r5, 8005e86 <_printf_i+0x19e>
 8005e7e:	2310      	movs	r3, #16
 8005e80:	e7ac      	b.n	8005ddc <_printf_i+0xf4>
 8005e82:	4827      	ldr	r0, [pc, #156]	@ (8005f20 <_printf_i+0x238>)
 8005e84:	e7e9      	b.n	8005e5a <_printf_i+0x172>
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	f023 0320 	bic.w	r3, r3, #32
 8005e8c:	6023      	str	r3, [r4, #0]
 8005e8e:	e7f6      	b.n	8005e7e <_printf_i+0x196>
 8005e90:	4616      	mov	r6, r2
 8005e92:	e7bd      	b.n	8005e10 <_printf_i+0x128>
 8005e94:	6833      	ldr	r3, [r6, #0]
 8005e96:	6825      	ldr	r5, [r4, #0]
 8005e98:	6961      	ldr	r1, [r4, #20]
 8005e9a:	1d18      	adds	r0, r3, #4
 8005e9c:	6030      	str	r0, [r6, #0]
 8005e9e:	062e      	lsls	r6, r5, #24
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	d501      	bpl.n	8005ea8 <_printf_i+0x1c0>
 8005ea4:	6019      	str	r1, [r3, #0]
 8005ea6:	e002      	b.n	8005eae <_printf_i+0x1c6>
 8005ea8:	0668      	lsls	r0, r5, #25
 8005eaa:	d5fb      	bpl.n	8005ea4 <_printf_i+0x1bc>
 8005eac:	8019      	strh	r1, [r3, #0]
 8005eae:	2300      	movs	r3, #0
 8005eb0:	6123      	str	r3, [r4, #16]
 8005eb2:	4616      	mov	r6, r2
 8005eb4:	e7bc      	b.n	8005e30 <_printf_i+0x148>
 8005eb6:	6833      	ldr	r3, [r6, #0]
 8005eb8:	1d1a      	adds	r2, r3, #4
 8005eba:	6032      	str	r2, [r6, #0]
 8005ebc:	681e      	ldr	r6, [r3, #0]
 8005ebe:	6862      	ldr	r2, [r4, #4]
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	f7fa fadc 	bl	8000480 <memchr>
 8005ec8:	b108      	cbz	r0, 8005ece <_printf_i+0x1e6>
 8005eca:	1b80      	subs	r0, r0, r6
 8005ecc:	6060      	str	r0, [r4, #4]
 8005ece:	6863      	ldr	r3, [r4, #4]
 8005ed0:	6123      	str	r3, [r4, #16]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ed8:	e7aa      	b.n	8005e30 <_printf_i+0x148>
 8005eda:	6923      	ldr	r3, [r4, #16]
 8005edc:	4632      	mov	r2, r6
 8005ede:	4649      	mov	r1, r9
 8005ee0:	4640      	mov	r0, r8
 8005ee2:	47d0      	blx	sl
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	d0ad      	beq.n	8005e44 <_printf_i+0x15c>
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	079b      	lsls	r3, r3, #30
 8005eec:	d413      	bmi.n	8005f16 <_printf_i+0x22e>
 8005eee:	68e0      	ldr	r0, [r4, #12]
 8005ef0:	9b03      	ldr	r3, [sp, #12]
 8005ef2:	4298      	cmp	r0, r3
 8005ef4:	bfb8      	it	lt
 8005ef6:	4618      	movlt	r0, r3
 8005ef8:	e7a6      	b.n	8005e48 <_printf_i+0x160>
 8005efa:	2301      	movs	r3, #1
 8005efc:	4632      	mov	r2, r6
 8005efe:	4649      	mov	r1, r9
 8005f00:	4640      	mov	r0, r8
 8005f02:	47d0      	blx	sl
 8005f04:	3001      	adds	r0, #1
 8005f06:	d09d      	beq.n	8005e44 <_printf_i+0x15c>
 8005f08:	3501      	adds	r5, #1
 8005f0a:	68e3      	ldr	r3, [r4, #12]
 8005f0c:	9903      	ldr	r1, [sp, #12]
 8005f0e:	1a5b      	subs	r3, r3, r1
 8005f10:	42ab      	cmp	r3, r5
 8005f12:	dcf2      	bgt.n	8005efa <_printf_i+0x212>
 8005f14:	e7eb      	b.n	8005eee <_printf_i+0x206>
 8005f16:	2500      	movs	r5, #0
 8005f18:	f104 0619 	add.w	r6, r4, #25
 8005f1c:	e7f5      	b.n	8005f0a <_printf_i+0x222>
 8005f1e:	bf00      	nop
 8005f20:	0800807e 	.word	0x0800807e
 8005f24:	0800808f 	.word	0x0800808f

08005f28 <std>:
 8005f28:	2300      	movs	r3, #0
 8005f2a:	b510      	push	{r4, lr}
 8005f2c:	4604      	mov	r4, r0
 8005f2e:	e9c0 3300 	strd	r3, r3, [r0]
 8005f32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f36:	6083      	str	r3, [r0, #8]
 8005f38:	8181      	strh	r1, [r0, #12]
 8005f3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f3c:	81c2      	strh	r2, [r0, #14]
 8005f3e:	6183      	str	r3, [r0, #24]
 8005f40:	4619      	mov	r1, r3
 8005f42:	2208      	movs	r2, #8
 8005f44:	305c      	adds	r0, #92	@ 0x5c
 8005f46:	f000 f906 	bl	8006156 <memset>
 8005f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f80 <std+0x58>)
 8005f4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f84 <std+0x5c>)
 8005f50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f52:	4b0d      	ldr	r3, [pc, #52]	@ (8005f88 <std+0x60>)
 8005f54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f56:	4b0d      	ldr	r3, [pc, #52]	@ (8005f8c <std+0x64>)
 8005f58:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f90 <std+0x68>)
 8005f5c:	6224      	str	r4, [r4, #32]
 8005f5e:	429c      	cmp	r4, r3
 8005f60:	d006      	beq.n	8005f70 <std+0x48>
 8005f62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f66:	4294      	cmp	r4, r2
 8005f68:	d002      	beq.n	8005f70 <std+0x48>
 8005f6a:	33d0      	adds	r3, #208	@ 0xd0
 8005f6c:	429c      	cmp	r4, r3
 8005f6e:	d105      	bne.n	8005f7c <std+0x54>
 8005f70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f78:	f000 b96a 	b.w	8006250 <__retarget_lock_init_recursive>
 8005f7c:	bd10      	pop	{r4, pc}
 8005f7e:	bf00      	nop
 8005f80:	080060d1 	.word	0x080060d1
 8005f84:	080060f3 	.word	0x080060f3
 8005f88:	0800612b 	.word	0x0800612b
 8005f8c:	0800614f 	.word	0x0800614f
 8005f90:	20000aa0 	.word	0x20000aa0

08005f94 <stdio_exit_handler>:
 8005f94:	4a02      	ldr	r2, [pc, #8]	@ (8005fa0 <stdio_exit_handler+0xc>)
 8005f96:	4903      	ldr	r1, [pc, #12]	@ (8005fa4 <stdio_exit_handler+0x10>)
 8005f98:	4803      	ldr	r0, [pc, #12]	@ (8005fa8 <stdio_exit_handler+0x14>)
 8005f9a:	f000 b869 	b.w	8006070 <_fwalk_sglue>
 8005f9e:	bf00      	nop
 8005fa0:	20000010 	.word	0x20000010
 8005fa4:	08007b81 	.word	0x08007b81
 8005fa8:	20000020 	.word	0x20000020

08005fac <cleanup_stdio>:
 8005fac:	6841      	ldr	r1, [r0, #4]
 8005fae:	4b0c      	ldr	r3, [pc, #48]	@ (8005fe0 <cleanup_stdio+0x34>)
 8005fb0:	4299      	cmp	r1, r3
 8005fb2:	b510      	push	{r4, lr}
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	d001      	beq.n	8005fbc <cleanup_stdio+0x10>
 8005fb8:	f001 fde2 	bl	8007b80 <_fflush_r>
 8005fbc:	68a1      	ldr	r1, [r4, #8]
 8005fbe:	4b09      	ldr	r3, [pc, #36]	@ (8005fe4 <cleanup_stdio+0x38>)
 8005fc0:	4299      	cmp	r1, r3
 8005fc2:	d002      	beq.n	8005fca <cleanup_stdio+0x1e>
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f001 fddb 	bl	8007b80 <_fflush_r>
 8005fca:	68e1      	ldr	r1, [r4, #12]
 8005fcc:	4b06      	ldr	r3, [pc, #24]	@ (8005fe8 <cleanup_stdio+0x3c>)
 8005fce:	4299      	cmp	r1, r3
 8005fd0:	d004      	beq.n	8005fdc <cleanup_stdio+0x30>
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fd8:	f001 bdd2 	b.w	8007b80 <_fflush_r>
 8005fdc:	bd10      	pop	{r4, pc}
 8005fde:	bf00      	nop
 8005fe0:	20000aa0 	.word	0x20000aa0
 8005fe4:	20000b08 	.word	0x20000b08
 8005fe8:	20000b70 	.word	0x20000b70

08005fec <global_stdio_init.part.0>:
 8005fec:	b510      	push	{r4, lr}
 8005fee:	4b0b      	ldr	r3, [pc, #44]	@ (800601c <global_stdio_init.part.0+0x30>)
 8005ff0:	4c0b      	ldr	r4, [pc, #44]	@ (8006020 <global_stdio_init.part.0+0x34>)
 8005ff2:	4a0c      	ldr	r2, [pc, #48]	@ (8006024 <global_stdio_init.part.0+0x38>)
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	2104      	movs	r1, #4
 8005ffc:	f7ff ff94 	bl	8005f28 <std>
 8006000:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006004:	2201      	movs	r2, #1
 8006006:	2109      	movs	r1, #9
 8006008:	f7ff ff8e 	bl	8005f28 <std>
 800600c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006010:	2202      	movs	r2, #2
 8006012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006016:	2112      	movs	r1, #18
 8006018:	f7ff bf86 	b.w	8005f28 <std>
 800601c:	20000bd8 	.word	0x20000bd8
 8006020:	20000aa0 	.word	0x20000aa0
 8006024:	08005f95 	.word	0x08005f95

08006028 <__sfp_lock_acquire>:
 8006028:	4801      	ldr	r0, [pc, #4]	@ (8006030 <__sfp_lock_acquire+0x8>)
 800602a:	f000 b912 	b.w	8006252 <__retarget_lock_acquire_recursive>
 800602e:	bf00      	nop
 8006030:	20000be1 	.word	0x20000be1

08006034 <__sfp_lock_release>:
 8006034:	4801      	ldr	r0, [pc, #4]	@ (800603c <__sfp_lock_release+0x8>)
 8006036:	f000 b90d 	b.w	8006254 <__retarget_lock_release_recursive>
 800603a:	bf00      	nop
 800603c:	20000be1 	.word	0x20000be1

08006040 <__sinit>:
 8006040:	b510      	push	{r4, lr}
 8006042:	4604      	mov	r4, r0
 8006044:	f7ff fff0 	bl	8006028 <__sfp_lock_acquire>
 8006048:	6a23      	ldr	r3, [r4, #32]
 800604a:	b11b      	cbz	r3, 8006054 <__sinit+0x14>
 800604c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006050:	f7ff bff0 	b.w	8006034 <__sfp_lock_release>
 8006054:	4b04      	ldr	r3, [pc, #16]	@ (8006068 <__sinit+0x28>)
 8006056:	6223      	str	r3, [r4, #32]
 8006058:	4b04      	ldr	r3, [pc, #16]	@ (800606c <__sinit+0x2c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1f5      	bne.n	800604c <__sinit+0xc>
 8006060:	f7ff ffc4 	bl	8005fec <global_stdio_init.part.0>
 8006064:	e7f2      	b.n	800604c <__sinit+0xc>
 8006066:	bf00      	nop
 8006068:	08005fad 	.word	0x08005fad
 800606c:	20000bd8 	.word	0x20000bd8

08006070 <_fwalk_sglue>:
 8006070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006074:	4607      	mov	r7, r0
 8006076:	4688      	mov	r8, r1
 8006078:	4614      	mov	r4, r2
 800607a:	2600      	movs	r6, #0
 800607c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006080:	f1b9 0901 	subs.w	r9, r9, #1
 8006084:	d505      	bpl.n	8006092 <_fwalk_sglue+0x22>
 8006086:	6824      	ldr	r4, [r4, #0]
 8006088:	2c00      	cmp	r4, #0
 800608a:	d1f7      	bne.n	800607c <_fwalk_sglue+0xc>
 800608c:	4630      	mov	r0, r6
 800608e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006092:	89ab      	ldrh	r3, [r5, #12]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d907      	bls.n	80060a8 <_fwalk_sglue+0x38>
 8006098:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800609c:	3301      	adds	r3, #1
 800609e:	d003      	beq.n	80060a8 <_fwalk_sglue+0x38>
 80060a0:	4629      	mov	r1, r5
 80060a2:	4638      	mov	r0, r7
 80060a4:	47c0      	blx	r8
 80060a6:	4306      	orrs	r6, r0
 80060a8:	3568      	adds	r5, #104	@ 0x68
 80060aa:	e7e9      	b.n	8006080 <_fwalk_sglue+0x10>

080060ac <iprintf>:
 80060ac:	b40f      	push	{r0, r1, r2, r3}
 80060ae:	b507      	push	{r0, r1, r2, lr}
 80060b0:	4906      	ldr	r1, [pc, #24]	@ (80060cc <iprintf+0x20>)
 80060b2:	ab04      	add	r3, sp, #16
 80060b4:	6808      	ldr	r0, [r1, #0]
 80060b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80060ba:	6881      	ldr	r1, [r0, #8]
 80060bc:	9301      	str	r3, [sp, #4]
 80060be:	f001 fbc3 	bl	8007848 <_vfiprintf_r>
 80060c2:	b003      	add	sp, #12
 80060c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80060c8:	b004      	add	sp, #16
 80060ca:	4770      	bx	lr
 80060cc:	2000001c 	.word	0x2000001c

080060d0 <__sread>:
 80060d0:	b510      	push	{r4, lr}
 80060d2:	460c      	mov	r4, r1
 80060d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d8:	f000 f86c 	bl	80061b4 <_read_r>
 80060dc:	2800      	cmp	r0, #0
 80060de:	bfab      	itete	ge
 80060e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80060e2:	89a3      	ldrhlt	r3, [r4, #12]
 80060e4:	181b      	addge	r3, r3, r0
 80060e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80060ea:	bfac      	ite	ge
 80060ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80060ee:	81a3      	strhlt	r3, [r4, #12]
 80060f0:	bd10      	pop	{r4, pc}

080060f2 <__swrite>:
 80060f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060f6:	461f      	mov	r7, r3
 80060f8:	898b      	ldrh	r3, [r1, #12]
 80060fa:	05db      	lsls	r3, r3, #23
 80060fc:	4605      	mov	r5, r0
 80060fe:	460c      	mov	r4, r1
 8006100:	4616      	mov	r6, r2
 8006102:	d505      	bpl.n	8006110 <__swrite+0x1e>
 8006104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006108:	2302      	movs	r3, #2
 800610a:	2200      	movs	r2, #0
 800610c:	f000 f840 	bl	8006190 <_lseek_r>
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006116:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800611a:	81a3      	strh	r3, [r4, #12]
 800611c:	4632      	mov	r2, r6
 800611e:	463b      	mov	r3, r7
 8006120:	4628      	mov	r0, r5
 8006122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006126:	f000 b857 	b.w	80061d8 <_write_r>

0800612a <__sseek>:
 800612a:	b510      	push	{r4, lr}
 800612c:	460c      	mov	r4, r1
 800612e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006132:	f000 f82d 	bl	8006190 <_lseek_r>
 8006136:	1c43      	adds	r3, r0, #1
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	bf15      	itete	ne
 800613c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800613e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006142:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006146:	81a3      	strheq	r3, [r4, #12]
 8006148:	bf18      	it	ne
 800614a:	81a3      	strhne	r3, [r4, #12]
 800614c:	bd10      	pop	{r4, pc}

0800614e <__sclose>:
 800614e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006152:	f000 b80d 	b.w	8006170 <_close_r>

08006156 <memset>:
 8006156:	4402      	add	r2, r0
 8006158:	4603      	mov	r3, r0
 800615a:	4293      	cmp	r3, r2
 800615c:	d100      	bne.n	8006160 <memset+0xa>
 800615e:	4770      	bx	lr
 8006160:	f803 1b01 	strb.w	r1, [r3], #1
 8006164:	e7f9      	b.n	800615a <memset+0x4>
	...

08006168 <_localeconv_r>:
 8006168:	4800      	ldr	r0, [pc, #0]	@ (800616c <_localeconv_r+0x4>)
 800616a:	4770      	bx	lr
 800616c:	2000015c 	.word	0x2000015c

08006170 <_close_r>:
 8006170:	b538      	push	{r3, r4, r5, lr}
 8006172:	4d06      	ldr	r5, [pc, #24]	@ (800618c <_close_r+0x1c>)
 8006174:	2300      	movs	r3, #0
 8006176:	4604      	mov	r4, r0
 8006178:	4608      	mov	r0, r1
 800617a:	602b      	str	r3, [r5, #0]
 800617c:	f7fb f9d2 	bl	8001524 <_close>
 8006180:	1c43      	adds	r3, r0, #1
 8006182:	d102      	bne.n	800618a <_close_r+0x1a>
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	b103      	cbz	r3, 800618a <_close_r+0x1a>
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	bd38      	pop	{r3, r4, r5, pc}
 800618c:	20000bdc 	.word	0x20000bdc

08006190 <_lseek_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	4d07      	ldr	r5, [pc, #28]	@ (80061b0 <_lseek_r+0x20>)
 8006194:	4604      	mov	r4, r0
 8006196:	4608      	mov	r0, r1
 8006198:	4611      	mov	r1, r2
 800619a:	2200      	movs	r2, #0
 800619c:	602a      	str	r2, [r5, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	f7fb f9e7 	bl	8001572 <_lseek>
 80061a4:	1c43      	adds	r3, r0, #1
 80061a6:	d102      	bne.n	80061ae <_lseek_r+0x1e>
 80061a8:	682b      	ldr	r3, [r5, #0]
 80061aa:	b103      	cbz	r3, 80061ae <_lseek_r+0x1e>
 80061ac:	6023      	str	r3, [r4, #0]
 80061ae:	bd38      	pop	{r3, r4, r5, pc}
 80061b0:	20000bdc 	.word	0x20000bdc

080061b4 <_read_r>:
 80061b4:	b538      	push	{r3, r4, r5, lr}
 80061b6:	4d07      	ldr	r5, [pc, #28]	@ (80061d4 <_read_r+0x20>)
 80061b8:	4604      	mov	r4, r0
 80061ba:	4608      	mov	r0, r1
 80061bc:	4611      	mov	r1, r2
 80061be:	2200      	movs	r2, #0
 80061c0:	602a      	str	r2, [r5, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	f7fb f975 	bl	80014b2 <_read>
 80061c8:	1c43      	adds	r3, r0, #1
 80061ca:	d102      	bne.n	80061d2 <_read_r+0x1e>
 80061cc:	682b      	ldr	r3, [r5, #0]
 80061ce:	b103      	cbz	r3, 80061d2 <_read_r+0x1e>
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	bd38      	pop	{r3, r4, r5, pc}
 80061d4:	20000bdc 	.word	0x20000bdc

080061d8 <_write_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	4d07      	ldr	r5, [pc, #28]	@ (80061f8 <_write_r+0x20>)
 80061dc:	4604      	mov	r4, r0
 80061de:	4608      	mov	r0, r1
 80061e0:	4611      	mov	r1, r2
 80061e2:	2200      	movs	r2, #0
 80061e4:	602a      	str	r2, [r5, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	f7fb f980 	bl	80014ec <_write>
 80061ec:	1c43      	adds	r3, r0, #1
 80061ee:	d102      	bne.n	80061f6 <_write_r+0x1e>
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	b103      	cbz	r3, 80061f6 <_write_r+0x1e>
 80061f4:	6023      	str	r3, [r4, #0]
 80061f6:	bd38      	pop	{r3, r4, r5, pc}
 80061f8:	20000bdc 	.word	0x20000bdc

080061fc <__errno>:
 80061fc:	4b01      	ldr	r3, [pc, #4]	@ (8006204 <__errno+0x8>)
 80061fe:	6818      	ldr	r0, [r3, #0]
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	2000001c 	.word	0x2000001c

08006208 <__libc_init_array>:
 8006208:	b570      	push	{r4, r5, r6, lr}
 800620a:	4d0d      	ldr	r5, [pc, #52]	@ (8006240 <__libc_init_array+0x38>)
 800620c:	4c0d      	ldr	r4, [pc, #52]	@ (8006244 <__libc_init_array+0x3c>)
 800620e:	1b64      	subs	r4, r4, r5
 8006210:	10a4      	asrs	r4, r4, #2
 8006212:	2600      	movs	r6, #0
 8006214:	42a6      	cmp	r6, r4
 8006216:	d109      	bne.n	800622c <__libc_init_array+0x24>
 8006218:	4d0b      	ldr	r5, [pc, #44]	@ (8006248 <__libc_init_array+0x40>)
 800621a:	4c0c      	ldr	r4, [pc, #48]	@ (800624c <__libc_init_array+0x44>)
 800621c:	f001 febe 	bl	8007f9c <_init>
 8006220:	1b64      	subs	r4, r4, r5
 8006222:	10a4      	asrs	r4, r4, #2
 8006224:	2600      	movs	r6, #0
 8006226:	42a6      	cmp	r6, r4
 8006228:	d105      	bne.n	8006236 <__libc_init_array+0x2e>
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006230:	4798      	blx	r3
 8006232:	3601      	adds	r6, #1
 8006234:	e7ee      	b.n	8006214 <__libc_init_array+0xc>
 8006236:	f855 3b04 	ldr.w	r3, [r5], #4
 800623a:	4798      	blx	r3
 800623c:	3601      	adds	r6, #1
 800623e:	e7f2      	b.n	8006226 <__libc_init_array+0x1e>
 8006240:	080083e8 	.word	0x080083e8
 8006244:	080083e8 	.word	0x080083e8
 8006248:	080083e8 	.word	0x080083e8
 800624c:	080083ec 	.word	0x080083ec

08006250 <__retarget_lock_init_recursive>:
 8006250:	4770      	bx	lr

08006252 <__retarget_lock_acquire_recursive>:
 8006252:	4770      	bx	lr

08006254 <__retarget_lock_release_recursive>:
 8006254:	4770      	bx	lr

08006256 <quorem>:
 8006256:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625a:	6903      	ldr	r3, [r0, #16]
 800625c:	690c      	ldr	r4, [r1, #16]
 800625e:	42a3      	cmp	r3, r4
 8006260:	4607      	mov	r7, r0
 8006262:	db7e      	blt.n	8006362 <quorem+0x10c>
 8006264:	3c01      	subs	r4, #1
 8006266:	f101 0814 	add.w	r8, r1, #20
 800626a:	00a3      	lsls	r3, r4, #2
 800626c:	f100 0514 	add.w	r5, r0, #20
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006276:	9301      	str	r3, [sp, #4]
 8006278:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800627c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006280:	3301      	adds	r3, #1
 8006282:	429a      	cmp	r2, r3
 8006284:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006288:	fbb2 f6f3 	udiv	r6, r2, r3
 800628c:	d32e      	bcc.n	80062ec <quorem+0x96>
 800628e:	f04f 0a00 	mov.w	sl, #0
 8006292:	46c4      	mov	ip, r8
 8006294:	46ae      	mov	lr, r5
 8006296:	46d3      	mov	fp, sl
 8006298:	f85c 3b04 	ldr.w	r3, [ip], #4
 800629c:	b298      	uxth	r0, r3
 800629e:	fb06 a000 	mla	r0, r6, r0, sl
 80062a2:	0c02      	lsrs	r2, r0, #16
 80062a4:	0c1b      	lsrs	r3, r3, #16
 80062a6:	fb06 2303 	mla	r3, r6, r3, r2
 80062aa:	f8de 2000 	ldr.w	r2, [lr]
 80062ae:	b280      	uxth	r0, r0
 80062b0:	b292      	uxth	r2, r2
 80062b2:	1a12      	subs	r2, r2, r0
 80062b4:	445a      	add	r2, fp
 80062b6:	f8de 0000 	ldr.w	r0, [lr]
 80062ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062be:	b29b      	uxth	r3, r3
 80062c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80062c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80062c8:	b292      	uxth	r2, r2
 80062ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80062ce:	45e1      	cmp	r9, ip
 80062d0:	f84e 2b04 	str.w	r2, [lr], #4
 80062d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80062d8:	d2de      	bcs.n	8006298 <quorem+0x42>
 80062da:	9b00      	ldr	r3, [sp, #0]
 80062dc:	58eb      	ldr	r3, [r5, r3]
 80062de:	b92b      	cbnz	r3, 80062ec <quorem+0x96>
 80062e0:	9b01      	ldr	r3, [sp, #4]
 80062e2:	3b04      	subs	r3, #4
 80062e4:	429d      	cmp	r5, r3
 80062e6:	461a      	mov	r2, r3
 80062e8:	d32f      	bcc.n	800634a <quorem+0xf4>
 80062ea:	613c      	str	r4, [r7, #16]
 80062ec:	4638      	mov	r0, r7
 80062ee:	f001 f979 	bl	80075e4 <__mcmp>
 80062f2:	2800      	cmp	r0, #0
 80062f4:	db25      	blt.n	8006342 <quorem+0xec>
 80062f6:	4629      	mov	r1, r5
 80062f8:	2000      	movs	r0, #0
 80062fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80062fe:	f8d1 c000 	ldr.w	ip, [r1]
 8006302:	fa1f fe82 	uxth.w	lr, r2
 8006306:	fa1f f38c 	uxth.w	r3, ip
 800630a:	eba3 030e 	sub.w	r3, r3, lr
 800630e:	4403      	add	r3, r0
 8006310:	0c12      	lsrs	r2, r2, #16
 8006312:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006316:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800631a:	b29b      	uxth	r3, r3
 800631c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006320:	45c1      	cmp	r9, r8
 8006322:	f841 3b04 	str.w	r3, [r1], #4
 8006326:	ea4f 4022 	mov.w	r0, r2, asr #16
 800632a:	d2e6      	bcs.n	80062fa <quorem+0xa4>
 800632c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006330:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006334:	b922      	cbnz	r2, 8006340 <quorem+0xea>
 8006336:	3b04      	subs	r3, #4
 8006338:	429d      	cmp	r5, r3
 800633a:	461a      	mov	r2, r3
 800633c:	d30b      	bcc.n	8006356 <quorem+0x100>
 800633e:	613c      	str	r4, [r7, #16]
 8006340:	3601      	adds	r6, #1
 8006342:	4630      	mov	r0, r6
 8006344:	b003      	add	sp, #12
 8006346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800634a:	6812      	ldr	r2, [r2, #0]
 800634c:	3b04      	subs	r3, #4
 800634e:	2a00      	cmp	r2, #0
 8006350:	d1cb      	bne.n	80062ea <quorem+0x94>
 8006352:	3c01      	subs	r4, #1
 8006354:	e7c6      	b.n	80062e4 <quorem+0x8e>
 8006356:	6812      	ldr	r2, [r2, #0]
 8006358:	3b04      	subs	r3, #4
 800635a:	2a00      	cmp	r2, #0
 800635c:	d1ef      	bne.n	800633e <quorem+0xe8>
 800635e:	3c01      	subs	r4, #1
 8006360:	e7ea      	b.n	8006338 <quorem+0xe2>
 8006362:	2000      	movs	r0, #0
 8006364:	e7ee      	b.n	8006344 <quorem+0xee>
	...

08006368 <_dtoa_r>:
 8006368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800636c:	69c7      	ldr	r7, [r0, #28]
 800636e:	b099      	sub	sp, #100	@ 0x64
 8006370:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006374:	ec55 4b10 	vmov	r4, r5, d0
 8006378:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800637a:	9109      	str	r1, [sp, #36]	@ 0x24
 800637c:	4683      	mov	fp, r0
 800637e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006380:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006382:	b97f      	cbnz	r7, 80063a4 <_dtoa_r+0x3c>
 8006384:	2010      	movs	r0, #16
 8006386:	f000 fdfd 	bl	8006f84 <malloc>
 800638a:	4602      	mov	r2, r0
 800638c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006390:	b920      	cbnz	r0, 800639c <_dtoa_r+0x34>
 8006392:	4ba7      	ldr	r3, [pc, #668]	@ (8006630 <_dtoa_r+0x2c8>)
 8006394:	21ef      	movs	r1, #239	@ 0xef
 8006396:	48a7      	ldr	r0, [pc, #668]	@ (8006634 <_dtoa_r+0x2cc>)
 8006398:	f001 fccc 	bl	8007d34 <__assert_func>
 800639c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80063a0:	6007      	str	r7, [r0, #0]
 80063a2:	60c7      	str	r7, [r0, #12]
 80063a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80063a8:	6819      	ldr	r1, [r3, #0]
 80063aa:	b159      	cbz	r1, 80063c4 <_dtoa_r+0x5c>
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	604a      	str	r2, [r1, #4]
 80063b0:	2301      	movs	r3, #1
 80063b2:	4093      	lsls	r3, r2
 80063b4:	608b      	str	r3, [r1, #8]
 80063b6:	4658      	mov	r0, fp
 80063b8:	f000 feda 	bl	8007170 <_Bfree>
 80063bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80063c0:	2200      	movs	r2, #0
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	1e2b      	subs	r3, r5, #0
 80063c6:	bfb9      	ittee	lt
 80063c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80063cc:	9303      	strlt	r3, [sp, #12]
 80063ce:	2300      	movge	r3, #0
 80063d0:	6033      	strge	r3, [r6, #0]
 80063d2:	9f03      	ldr	r7, [sp, #12]
 80063d4:	4b98      	ldr	r3, [pc, #608]	@ (8006638 <_dtoa_r+0x2d0>)
 80063d6:	bfbc      	itt	lt
 80063d8:	2201      	movlt	r2, #1
 80063da:	6032      	strlt	r2, [r6, #0]
 80063dc:	43bb      	bics	r3, r7
 80063de:	d112      	bne.n	8006406 <_dtoa_r+0x9e>
 80063e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80063e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80063e6:	6013      	str	r3, [r2, #0]
 80063e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80063ec:	4323      	orrs	r3, r4
 80063ee:	f000 854d 	beq.w	8006e8c <_dtoa_r+0xb24>
 80063f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80063f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800664c <_dtoa_r+0x2e4>
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 854f 	beq.w	8006e9c <_dtoa_r+0xb34>
 80063fe:	f10a 0303 	add.w	r3, sl, #3
 8006402:	f000 bd49 	b.w	8006e98 <_dtoa_r+0xb30>
 8006406:	ed9d 7b02 	vldr	d7, [sp, #8]
 800640a:	2200      	movs	r2, #0
 800640c:	ec51 0b17 	vmov	r0, r1, d7
 8006410:	2300      	movs	r3, #0
 8006412:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006416:	f7fa fcaf 	bl	8000d78 <__aeabi_dcmpeq>
 800641a:	4680      	mov	r8, r0
 800641c:	b158      	cbz	r0, 8006436 <_dtoa_r+0xce>
 800641e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006420:	2301      	movs	r3, #1
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006426:	b113      	cbz	r3, 800642e <_dtoa_r+0xc6>
 8006428:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800642a:	4b84      	ldr	r3, [pc, #528]	@ (800663c <_dtoa_r+0x2d4>)
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006650 <_dtoa_r+0x2e8>
 8006432:	f000 bd33 	b.w	8006e9c <_dtoa_r+0xb34>
 8006436:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800643a:	aa16      	add	r2, sp, #88	@ 0x58
 800643c:	a917      	add	r1, sp, #92	@ 0x5c
 800643e:	4658      	mov	r0, fp
 8006440:	f001 f980 	bl	8007744 <__d2b>
 8006444:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006448:	4681      	mov	r9, r0
 800644a:	2e00      	cmp	r6, #0
 800644c:	d077      	beq.n	800653e <_dtoa_r+0x1d6>
 800644e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006450:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006458:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800645c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006460:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006464:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006468:	4619      	mov	r1, r3
 800646a:	2200      	movs	r2, #0
 800646c:	4b74      	ldr	r3, [pc, #464]	@ (8006640 <_dtoa_r+0x2d8>)
 800646e:	f7fa f863 	bl	8000538 <__aeabi_dsub>
 8006472:	a369      	add	r3, pc, #420	@ (adr r3, 8006618 <_dtoa_r+0x2b0>)
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	f7fa fa16 	bl	80008a8 <__aeabi_dmul>
 800647c:	a368      	add	r3, pc, #416	@ (adr r3, 8006620 <_dtoa_r+0x2b8>)
 800647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006482:	f7fa f85b 	bl	800053c <__adddf3>
 8006486:	4604      	mov	r4, r0
 8006488:	4630      	mov	r0, r6
 800648a:	460d      	mov	r5, r1
 800648c:	f7fa f9a2 	bl	80007d4 <__aeabi_i2d>
 8006490:	a365      	add	r3, pc, #404	@ (adr r3, 8006628 <_dtoa_r+0x2c0>)
 8006492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006496:	f7fa fa07 	bl	80008a8 <__aeabi_dmul>
 800649a:	4602      	mov	r2, r0
 800649c:	460b      	mov	r3, r1
 800649e:	4620      	mov	r0, r4
 80064a0:	4629      	mov	r1, r5
 80064a2:	f7fa f84b 	bl	800053c <__adddf3>
 80064a6:	4604      	mov	r4, r0
 80064a8:	460d      	mov	r5, r1
 80064aa:	f7fa fcad 	bl	8000e08 <__aeabi_d2iz>
 80064ae:	2200      	movs	r2, #0
 80064b0:	4607      	mov	r7, r0
 80064b2:	2300      	movs	r3, #0
 80064b4:	4620      	mov	r0, r4
 80064b6:	4629      	mov	r1, r5
 80064b8:	f7fa fc68 	bl	8000d8c <__aeabi_dcmplt>
 80064bc:	b140      	cbz	r0, 80064d0 <_dtoa_r+0x168>
 80064be:	4638      	mov	r0, r7
 80064c0:	f7fa f988 	bl	80007d4 <__aeabi_i2d>
 80064c4:	4622      	mov	r2, r4
 80064c6:	462b      	mov	r3, r5
 80064c8:	f7fa fc56 	bl	8000d78 <__aeabi_dcmpeq>
 80064cc:	b900      	cbnz	r0, 80064d0 <_dtoa_r+0x168>
 80064ce:	3f01      	subs	r7, #1
 80064d0:	2f16      	cmp	r7, #22
 80064d2:	d851      	bhi.n	8006578 <_dtoa_r+0x210>
 80064d4:	4b5b      	ldr	r3, [pc, #364]	@ (8006644 <_dtoa_r+0x2dc>)
 80064d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80064da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064e2:	f7fa fc53 	bl	8000d8c <__aeabi_dcmplt>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d048      	beq.n	800657c <_dtoa_r+0x214>
 80064ea:	3f01      	subs	r7, #1
 80064ec:	2300      	movs	r3, #0
 80064ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80064f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80064f2:	1b9b      	subs	r3, r3, r6
 80064f4:	1e5a      	subs	r2, r3, #1
 80064f6:	bf44      	itt	mi
 80064f8:	f1c3 0801 	rsbmi	r8, r3, #1
 80064fc:	2300      	movmi	r3, #0
 80064fe:	9208      	str	r2, [sp, #32]
 8006500:	bf54      	ite	pl
 8006502:	f04f 0800 	movpl.w	r8, #0
 8006506:	9308      	strmi	r3, [sp, #32]
 8006508:	2f00      	cmp	r7, #0
 800650a:	db39      	blt.n	8006580 <_dtoa_r+0x218>
 800650c:	9b08      	ldr	r3, [sp, #32]
 800650e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006510:	443b      	add	r3, r7
 8006512:	9308      	str	r3, [sp, #32]
 8006514:	2300      	movs	r3, #0
 8006516:	930a      	str	r3, [sp, #40]	@ 0x28
 8006518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800651a:	2b09      	cmp	r3, #9
 800651c:	d864      	bhi.n	80065e8 <_dtoa_r+0x280>
 800651e:	2b05      	cmp	r3, #5
 8006520:	bfc4      	itt	gt
 8006522:	3b04      	subgt	r3, #4
 8006524:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006528:	f1a3 0302 	sub.w	r3, r3, #2
 800652c:	bfcc      	ite	gt
 800652e:	2400      	movgt	r4, #0
 8006530:	2401      	movle	r4, #1
 8006532:	2b03      	cmp	r3, #3
 8006534:	d863      	bhi.n	80065fe <_dtoa_r+0x296>
 8006536:	e8df f003 	tbb	[pc, r3]
 800653a:	372a      	.short	0x372a
 800653c:	5535      	.short	0x5535
 800653e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006542:	441e      	add	r6, r3
 8006544:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006548:	2b20      	cmp	r3, #32
 800654a:	bfc1      	itttt	gt
 800654c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006550:	409f      	lslgt	r7, r3
 8006552:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006556:	fa24 f303 	lsrgt.w	r3, r4, r3
 800655a:	bfd6      	itet	le
 800655c:	f1c3 0320 	rsble	r3, r3, #32
 8006560:	ea47 0003 	orrgt.w	r0, r7, r3
 8006564:	fa04 f003 	lslle.w	r0, r4, r3
 8006568:	f7fa f924 	bl	80007b4 <__aeabi_ui2d>
 800656c:	2201      	movs	r2, #1
 800656e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006572:	3e01      	subs	r6, #1
 8006574:	9214      	str	r2, [sp, #80]	@ 0x50
 8006576:	e777      	b.n	8006468 <_dtoa_r+0x100>
 8006578:	2301      	movs	r3, #1
 800657a:	e7b8      	b.n	80064ee <_dtoa_r+0x186>
 800657c:	9012      	str	r0, [sp, #72]	@ 0x48
 800657e:	e7b7      	b.n	80064f0 <_dtoa_r+0x188>
 8006580:	427b      	negs	r3, r7
 8006582:	930a      	str	r3, [sp, #40]	@ 0x28
 8006584:	2300      	movs	r3, #0
 8006586:	eba8 0807 	sub.w	r8, r8, r7
 800658a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800658c:	e7c4      	b.n	8006518 <_dtoa_r+0x1b0>
 800658e:	2300      	movs	r3, #0
 8006590:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006592:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006594:	2b00      	cmp	r3, #0
 8006596:	dc35      	bgt.n	8006604 <_dtoa_r+0x29c>
 8006598:	2301      	movs	r3, #1
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	9307      	str	r3, [sp, #28]
 800659e:	461a      	mov	r2, r3
 80065a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80065a2:	e00b      	b.n	80065bc <_dtoa_r+0x254>
 80065a4:	2301      	movs	r3, #1
 80065a6:	e7f3      	b.n	8006590 <_dtoa_r+0x228>
 80065a8:	2300      	movs	r3, #0
 80065aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065ae:	18fb      	adds	r3, r7, r3
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	3301      	adds	r3, #1
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	9307      	str	r3, [sp, #28]
 80065b8:	bfb8      	it	lt
 80065ba:	2301      	movlt	r3, #1
 80065bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80065c0:	2100      	movs	r1, #0
 80065c2:	2204      	movs	r2, #4
 80065c4:	f102 0514 	add.w	r5, r2, #20
 80065c8:	429d      	cmp	r5, r3
 80065ca:	d91f      	bls.n	800660c <_dtoa_r+0x2a4>
 80065cc:	6041      	str	r1, [r0, #4]
 80065ce:	4658      	mov	r0, fp
 80065d0:	f000 fd8e 	bl	80070f0 <_Balloc>
 80065d4:	4682      	mov	sl, r0
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d13c      	bne.n	8006654 <_dtoa_r+0x2ec>
 80065da:	4b1b      	ldr	r3, [pc, #108]	@ (8006648 <_dtoa_r+0x2e0>)
 80065dc:	4602      	mov	r2, r0
 80065de:	f240 11af 	movw	r1, #431	@ 0x1af
 80065e2:	e6d8      	b.n	8006396 <_dtoa_r+0x2e>
 80065e4:	2301      	movs	r3, #1
 80065e6:	e7e0      	b.n	80065aa <_dtoa_r+0x242>
 80065e8:	2401      	movs	r4, #1
 80065ea:	2300      	movs	r3, #0
 80065ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80065ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80065f0:	f04f 33ff 	mov.w	r3, #4294967295
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	9307      	str	r3, [sp, #28]
 80065f8:	2200      	movs	r2, #0
 80065fa:	2312      	movs	r3, #18
 80065fc:	e7d0      	b.n	80065a0 <_dtoa_r+0x238>
 80065fe:	2301      	movs	r3, #1
 8006600:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006602:	e7f5      	b.n	80065f0 <_dtoa_r+0x288>
 8006604:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	9307      	str	r3, [sp, #28]
 800660a:	e7d7      	b.n	80065bc <_dtoa_r+0x254>
 800660c:	3101      	adds	r1, #1
 800660e:	0052      	lsls	r2, r2, #1
 8006610:	e7d8      	b.n	80065c4 <_dtoa_r+0x25c>
 8006612:	bf00      	nop
 8006614:	f3af 8000 	nop.w
 8006618:	636f4361 	.word	0x636f4361
 800661c:	3fd287a7 	.word	0x3fd287a7
 8006620:	8b60c8b3 	.word	0x8b60c8b3
 8006624:	3fc68a28 	.word	0x3fc68a28
 8006628:	509f79fb 	.word	0x509f79fb
 800662c:	3fd34413 	.word	0x3fd34413
 8006630:	080080ad 	.word	0x080080ad
 8006634:	080080c4 	.word	0x080080c4
 8006638:	7ff00000 	.word	0x7ff00000
 800663c:	0800807d 	.word	0x0800807d
 8006640:	3ff80000 	.word	0x3ff80000
 8006644:	080081c0 	.word	0x080081c0
 8006648:	0800811c 	.word	0x0800811c
 800664c:	080080a9 	.word	0x080080a9
 8006650:	0800807c 	.word	0x0800807c
 8006654:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006658:	6018      	str	r0, [r3, #0]
 800665a:	9b07      	ldr	r3, [sp, #28]
 800665c:	2b0e      	cmp	r3, #14
 800665e:	f200 80a4 	bhi.w	80067aa <_dtoa_r+0x442>
 8006662:	2c00      	cmp	r4, #0
 8006664:	f000 80a1 	beq.w	80067aa <_dtoa_r+0x442>
 8006668:	2f00      	cmp	r7, #0
 800666a:	dd33      	ble.n	80066d4 <_dtoa_r+0x36c>
 800666c:	4bad      	ldr	r3, [pc, #692]	@ (8006924 <_dtoa_r+0x5bc>)
 800666e:	f007 020f 	and.w	r2, r7, #15
 8006672:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006676:	ed93 7b00 	vldr	d7, [r3]
 800667a:	05f8      	lsls	r0, r7, #23
 800667c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006680:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006684:	d516      	bpl.n	80066b4 <_dtoa_r+0x34c>
 8006686:	4ba8      	ldr	r3, [pc, #672]	@ (8006928 <_dtoa_r+0x5c0>)
 8006688:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800668c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006690:	f7fa fa34 	bl	8000afc <__aeabi_ddiv>
 8006694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006698:	f004 040f 	and.w	r4, r4, #15
 800669c:	2603      	movs	r6, #3
 800669e:	4da2      	ldr	r5, [pc, #648]	@ (8006928 <_dtoa_r+0x5c0>)
 80066a0:	b954      	cbnz	r4, 80066b8 <_dtoa_r+0x350>
 80066a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066aa:	f7fa fa27 	bl	8000afc <__aeabi_ddiv>
 80066ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066b2:	e028      	b.n	8006706 <_dtoa_r+0x39e>
 80066b4:	2602      	movs	r6, #2
 80066b6:	e7f2      	b.n	800669e <_dtoa_r+0x336>
 80066b8:	07e1      	lsls	r1, r4, #31
 80066ba:	d508      	bpl.n	80066ce <_dtoa_r+0x366>
 80066bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066c4:	f7fa f8f0 	bl	80008a8 <__aeabi_dmul>
 80066c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066cc:	3601      	adds	r6, #1
 80066ce:	1064      	asrs	r4, r4, #1
 80066d0:	3508      	adds	r5, #8
 80066d2:	e7e5      	b.n	80066a0 <_dtoa_r+0x338>
 80066d4:	f000 80d2 	beq.w	800687c <_dtoa_r+0x514>
 80066d8:	427c      	negs	r4, r7
 80066da:	4b92      	ldr	r3, [pc, #584]	@ (8006924 <_dtoa_r+0x5bc>)
 80066dc:	4d92      	ldr	r5, [pc, #584]	@ (8006928 <_dtoa_r+0x5c0>)
 80066de:	f004 020f 	and.w	r2, r4, #15
 80066e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066ee:	f7fa f8db 	bl	80008a8 <__aeabi_dmul>
 80066f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066f6:	1124      	asrs	r4, r4, #4
 80066f8:	2300      	movs	r3, #0
 80066fa:	2602      	movs	r6, #2
 80066fc:	2c00      	cmp	r4, #0
 80066fe:	f040 80b2 	bne.w	8006866 <_dtoa_r+0x4fe>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1d3      	bne.n	80066ae <_dtoa_r+0x346>
 8006706:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006708:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 80b7 	beq.w	8006880 <_dtoa_r+0x518>
 8006712:	4b86      	ldr	r3, [pc, #536]	@ (800692c <_dtoa_r+0x5c4>)
 8006714:	2200      	movs	r2, #0
 8006716:	4620      	mov	r0, r4
 8006718:	4629      	mov	r1, r5
 800671a:	f7fa fb37 	bl	8000d8c <__aeabi_dcmplt>
 800671e:	2800      	cmp	r0, #0
 8006720:	f000 80ae 	beq.w	8006880 <_dtoa_r+0x518>
 8006724:	9b07      	ldr	r3, [sp, #28]
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 80aa 	beq.w	8006880 <_dtoa_r+0x518>
 800672c:	9b00      	ldr	r3, [sp, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	dd37      	ble.n	80067a2 <_dtoa_r+0x43a>
 8006732:	1e7b      	subs	r3, r7, #1
 8006734:	9304      	str	r3, [sp, #16]
 8006736:	4620      	mov	r0, r4
 8006738:	4b7d      	ldr	r3, [pc, #500]	@ (8006930 <_dtoa_r+0x5c8>)
 800673a:	2200      	movs	r2, #0
 800673c:	4629      	mov	r1, r5
 800673e:	f7fa f8b3 	bl	80008a8 <__aeabi_dmul>
 8006742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006746:	9c00      	ldr	r4, [sp, #0]
 8006748:	3601      	adds	r6, #1
 800674a:	4630      	mov	r0, r6
 800674c:	f7fa f842 	bl	80007d4 <__aeabi_i2d>
 8006750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006754:	f7fa f8a8 	bl	80008a8 <__aeabi_dmul>
 8006758:	4b76      	ldr	r3, [pc, #472]	@ (8006934 <_dtoa_r+0x5cc>)
 800675a:	2200      	movs	r2, #0
 800675c:	f7f9 feee 	bl	800053c <__adddf3>
 8006760:	4605      	mov	r5, r0
 8006762:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006766:	2c00      	cmp	r4, #0
 8006768:	f040 808d 	bne.w	8006886 <_dtoa_r+0x51e>
 800676c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006770:	4b71      	ldr	r3, [pc, #452]	@ (8006938 <_dtoa_r+0x5d0>)
 8006772:	2200      	movs	r2, #0
 8006774:	f7f9 fee0 	bl	8000538 <__aeabi_dsub>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006780:	462a      	mov	r2, r5
 8006782:	4633      	mov	r3, r6
 8006784:	f7fa fb20 	bl	8000dc8 <__aeabi_dcmpgt>
 8006788:	2800      	cmp	r0, #0
 800678a:	f040 828b 	bne.w	8006ca4 <_dtoa_r+0x93c>
 800678e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006792:	462a      	mov	r2, r5
 8006794:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006798:	f7fa faf8 	bl	8000d8c <__aeabi_dcmplt>
 800679c:	2800      	cmp	r0, #0
 800679e:	f040 8128 	bne.w	80069f2 <_dtoa_r+0x68a>
 80067a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80067a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80067aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f2c0 815a 	blt.w	8006a66 <_dtoa_r+0x6fe>
 80067b2:	2f0e      	cmp	r7, #14
 80067b4:	f300 8157 	bgt.w	8006a66 <_dtoa_r+0x6fe>
 80067b8:	4b5a      	ldr	r3, [pc, #360]	@ (8006924 <_dtoa_r+0x5bc>)
 80067ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80067be:	ed93 7b00 	vldr	d7, [r3]
 80067c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	ed8d 7b00 	vstr	d7, [sp]
 80067ca:	da03      	bge.n	80067d4 <_dtoa_r+0x46c>
 80067cc:	9b07      	ldr	r3, [sp, #28]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f340 8101 	ble.w	80069d6 <_dtoa_r+0x66e>
 80067d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80067d8:	4656      	mov	r6, sl
 80067da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067de:	4620      	mov	r0, r4
 80067e0:	4629      	mov	r1, r5
 80067e2:	f7fa f98b 	bl	8000afc <__aeabi_ddiv>
 80067e6:	f7fa fb0f 	bl	8000e08 <__aeabi_d2iz>
 80067ea:	4680      	mov	r8, r0
 80067ec:	f7f9 fff2 	bl	80007d4 <__aeabi_i2d>
 80067f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067f4:	f7fa f858 	bl	80008a8 <__aeabi_dmul>
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	4620      	mov	r0, r4
 80067fe:	4629      	mov	r1, r5
 8006800:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006804:	f7f9 fe98 	bl	8000538 <__aeabi_dsub>
 8006808:	f806 4b01 	strb.w	r4, [r6], #1
 800680c:	9d07      	ldr	r5, [sp, #28]
 800680e:	eba6 040a 	sub.w	r4, r6, sl
 8006812:	42a5      	cmp	r5, r4
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	f040 8117 	bne.w	8006a4a <_dtoa_r+0x6e2>
 800681c:	f7f9 fe8e 	bl	800053c <__adddf3>
 8006820:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006824:	4604      	mov	r4, r0
 8006826:	460d      	mov	r5, r1
 8006828:	f7fa face 	bl	8000dc8 <__aeabi_dcmpgt>
 800682c:	2800      	cmp	r0, #0
 800682e:	f040 80f9 	bne.w	8006a24 <_dtoa_r+0x6bc>
 8006832:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006836:	4620      	mov	r0, r4
 8006838:	4629      	mov	r1, r5
 800683a:	f7fa fa9d 	bl	8000d78 <__aeabi_dcmpeq>
 800683e:	b118      	cbz	r0, 8006848 <_dtoa_r+0x4e0>
 8006840:	f018 0f01 	tst.w	r8, #1
 8006844:	f040 80ee 	bne.w	8006a24 <_dtoa_r+0x6bc>
 8006848:	4649      	mov	r1, r9
 800684a:	4658      	mov	r0, fp
 800684c:	f000 fc90 	bl	8007170 <_Bfree>
 8006850:	2300      	movs	r3, #0
 8006852:	7033      	strb	r3, [r6, #0]
 8006854:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006856:	3701      	adds	r7, #1
 8006858:	601f      	str	r7, [r3, #0]
 800685a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 831d 	beq.w	8006e9c <_dtoa_r+0xb34>
 8006862:	601e      	str	r6, [r3, #0]
 8006864:	e31a      	b.n	8006e9c <_dtoa_r+0xb34>
 8006866:	07e2      	lsls	r2, r4, #31
 8006868:	d505      	bpl.n	8006876 <_dtoa_r+0x50e>
 800686a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800686e:	f7fa f81b 	bl	80008a8 <__aeabi_dmul>
 8006872:	3601      	adds	r6, #1
 8006874:	2301      	movs	r3, #1
 8006876:	1064      	asrs	r4, r4, #1
 8006878:	3508      	adds	r5, #8
 800687a:	e73f      	b.n	80066fc <_dtoa_r+0x394>
 800687c:	2602      	movs	r6, #2
 800687e:	e742      	b.n	8006706 <_dtoa_r+0x39e>
 8006880:	9c07      	ldr	r4, [sp, #28]
 8006882:	9704      	str	r7, [sp, #16]
 8006884:	e761      	b.n	800674a <_dtoa_r+0x3e2>
 8006886:	4b27      	ldr	r3, [pc, #156]	@ (8006924 <_dtoa_r+0x5bc>)
 8006888:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800688a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800688e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006892:	4454      	add	r4, sl
 8006894:	2900      	cmp	r1, #0
 8006896:	d053      	beq.n	8006940 <_dtoa_r+0x5d8>
 8006898:	4928      	ldr	r1, [pc, #160]	@ (800693c <_dtoa_r+0x5d4>)
 800689a:	2000      	movs	r0, #0
 800689c:	f7fa f92e 	bl	8000afc <__aeabi_ddiv>
 80068a0:	4633      	mov	r3, r6
 80068a2:	462a      	mov	r2, r5
 80068a4:	f7f9 fe48 	bl	8000538 <__aeabi_dsub>
 80068a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80068ac:	4656      	mov	r6, sl
 80068ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068b2:	f7fa faa9 	bl	8000e08 <__aeabi_d2iz>
 80068b6:	4605      	mov	r5, r0
 80068b8:	f7f9 ff8c 	bl	80007d4 <__aeabi_i2d>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068c4:	f7f9 fe38 	bl	8000538 <__aeabi_dsub>
 80068c8:	3530      	adds	r5, #48	@ 0x30
 80068ca:	4602      	mov	r2, r0
 80068cc:	460b      	mov	r3, r1
 80068ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80068d2:	f806 5b01 	strb.w	r5, [r6], #1
 80068d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80068da:	f7fa fa57 	bl	8000d8c <__aeabi_dcmplt>
 80068de:	2800      	cmp	r0, #0
 80068e0:	d171      	bne.n	80069c6 <_dtoa_r+0x65e>
 80068e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068e6:	4911      	ldr	r1, [pc, #68]	@ (800692c <_dtoa_r+0x5c4>)
 80068e8:	2000      	movs	r0, #0
 80068ea:	f7f9 fe25 	bl	8000538 <__aeabi_dsub>
 80068ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80068f2:	f7fa fa4b 	bl	8000d8c <__aeabi_dcmplt>
 80068f6:	2800      	cmp	r0, #0
 80068f8:	f040 8095 	bne.w	8006a26 <_dtoa_r+0x6be>
 80068fc:	42a6      	cmp	r6, r4
 80068fe:	f43f af50 	beq.w	80067a2 <_dtoa_r+0x43a>
 8006902:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006906:	4b0a      	ldr	r3, [pc, #40]	@ (8006930 <_dtoa_r+0x5c8>)
 8006908:	2200      	movs	r2, #0
 800690a:	f7f9 ffcd 	bl	80008a8 <__aeabi_dmul>
 800690e:	4b08      	ldr	r3, [pc, #32]	@ (8006930 <_dtoa_r+0x5c8>)
 8006910:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006914:	2200      	movs	r2, #0
 8006916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800691a:	f7f9 ffc5 	bl	80008a8 <__aeabi_dmul>
 800691e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006922:	e7c4      	b.n	80068ae <_dtoa_r+0x546>
 8006924:	080081c0 	.word	0x080081c0
 8006928:	08008198 	.word	0x08008198
 800692c:	3ff00000 	.word	0x3ff00000
 8006930:	40240000 	.word	0x40240000
 8006934:	401c0000 	.word	0x401c0000
 8006938:	40140000 	.word	0x40140000
 800693c:	3fe00000 	.word	0x3fe00000
 8006940:	4631      	mov	r1, r6
 8006942:	4628      	mov	r0, r5
 8006944:	f7f9 ffb0 	bl	80008a8 <__aeabi_dmul>
 8006948:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800694c:	9415      	str	r4, [sp, #84]	@ 0x54
 800694e:	4656      	mov	r6, sl
 8006950:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006954:	f7fa fa58 	bl	8000e08 <__aeabi_d2iz>
 8006958:	4605      	mov	r5, r0
 800695a:	f7f9 ff3b 	bl	80007d4 <__aeabi_i2d>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006966:	f7f9 fde7 	bl	8000538 <__aeabi_dsub>
 800696a:	3530      	adds	r5, #48	@ 0x30
 800696c:	f806 5b01 	strb.w	r5, [r6], #1
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	42a6      	cmp	r6, r4
 8006976:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800697a:	f04f 0200 	mov.w	r2, #0
 800697e:	d124      	bne.n	80069ca <_dtoa_r+0x662>
 8006980:	4bac      	ldr	r3, [pc, #688]	@ (8006c34 <_dtoa_r+0x8cc>)
 8006982:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006986:	f7f9 fdd9 	bl	800053c <__adddf3>
 800698a:	4602      	mov	r2, r0
 800698c:	460b      	mov	r3, r1
 800698e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006992:	f7fa fa19 	bl	8000dc8 <__aeabi_dcmpgt>
 8006996:	2800      	cmp	r0, #0
 8006998:	d145      	bne.n	8006a26 <_dtoa_r+0x6be>
 800699a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800699e:	49a5      	ldr	r1, [pc, #660]	@ (8006c34 <_dtoa_r+0x8cc>)
 80069a0:	2000      	movs	r0, #0
 80069a2:	f7f9 fdc9 	bl	8000538 <__aeabi_dsub>
 80069a6:	4602      	mov	r2, r0
 80069a8:	460b      	mov	r3, r1
 80069aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069ae:	f7fa f9ed 	bl	8000d8c <__aeabi_dcmplt>
 80069b2:	2800      	cmp	r0, #0
 80069b4:	f43f aef5 	beq.w	80067a2 <_dtoa_r+0x43a>
 80069b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80069ba:	1e73      	subs	r3, r6, #1
 80069bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80069be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80069c2:	2b30      	cmp	r3, #48	@ 0x30
 80069c4:	d0f8      	beq.n	80069b8 <_dtoa_r+0x650>
 80069c6:	9f04      	ldr	r7, [sp, #16]
 80069c8:	e73e      	b.n	8006848 <_dtoa_r+0x4e0>
 80069ca:	4b9b      	ldr	r3, [pc, #620]	@ (8006c38 <_dtoa_r+0x8d0>)
 80069cc:	f7f9 ff6c 	bl	80008a8 <__aeabi_dmul>
 80069d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069d4:	e7bc      	b.n	8006950 <_dtoa_r+0x5e8>
 80069d6:	d10c      	bne.n	80069f2 <_dtoa_r+0x68a>
 80069d8:	4b98      	ldr	r3, [pc, #608]	@ (8006c3c <_dtoa_r+0x8d4>)
 80069da:	2200      	movs	r2, #0
 80069dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069e0:	f7f9 ff62 	bl	80008a8 <__aeabi_dmul>
 80069e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069e8:	f7fa f9e4 	bl	8000db4 <__aeabi_dcmpge>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	f000 8157 	beq.w	8006ca0 <_dtoa_r+0x938>
 80069f2:	2400      	movs	r4, #0
 80069f4:	4625      	mov	r5, r4
 80069f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069f8:	43db      	mvns	r3, r3
 80069fa:	9304      	str	r3, [sp, #16]
 80069fc:	4656      	mov	r6, sl
 80069fe:	2700      	movs	r7, #0
 8006a00:	4621      	mov	r1, r4
 8006a02:	4658      	mov	r0, fp
 8006a04:	f000 fbb4 	bl	8007170 <_Bfree>
 8006a08:	2d00      	cmp	r5, #0
 8006a0a:	d0dc      	beq.n	80069c6 <_dtoa_r+0x65e>
 8006a0c:	b12f      	cbz	r7, 8006a1a <_dtoa_r+0x6b2>
 8006a0e:	42af      	cmp	r7, r5
 8006a10:	d003      	beq.n	8006a1a <_dtoa_r+0x6b2>
 8006a12:	4639      	mov	r1, r7
 8006a14:	4658      	mov	r0, fp
 8006a16:	f000 fbab 	bl	8007170 <_Bfree>
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	4658      	mov	r0, fp
 8006a1e:	f000 fba7 	bl	8007170 <_Bfree>
 8006a22:	e7d0      	b.n	80069c6 <_dtoa_r+0x65e>
 8006a24:	9704      	str	r7, [sp, #16]
 8006a26:	4633      	mov	r3, r6
 8006a28:	461e      	mov	r6, r3
 8006a2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a2e:	2a39      	cmp	r2, #57	@ 0x39
 8006a30:	d107      	bne.n	8006a42 <_dtoa_r+0x6da>
 8006a32:	459a      	cmp	sl, r3
 8006a34:	d1f8      	bne.n	8006a28 <_dtoa_r+0x6c0>
 8006a36:	9a04      	ldr	r2, [sp, #16]
 8006a38:	3201      	adds	r2, #1
 8006a3a:	9204      	str	r2, [sp, #16]
 8006a3c:	2230      	movs	r2, #48	@ 0x30
 8006a3e:	f88a 2000 	strb.w	r2, [sl]
 8006a42:	781a      	ldrb	r2, [r3, #0]
 8006a44:	3201      	adds	r2, #1
 8006a46:	701a      	strb	r2, [r3, #0]
 8006a48:	e7bd      	b.n	80069c6 <_dtoa_r+0x65e>
 8006a4a:	4b7b      	ldr	r3, [pc, #492]	@ (8006c38 <_dtoa_r+0x8d0>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f7f9 ff2b 	bl	80008a8 <__aeabi_dmul>
 8006a52:	2200      	movs	r2, #0
 8006a54:	2300      	movs	r3, #0
 8006a56:	4604      	mov	r4, r0
 8006a58:	460d      	mov	r5, r1
 8006a5a:	f7fa f98d 	bl	8000d78 <__aeabi_dcmpeq>
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	f43f aebb 	beq.w	80067da <_dtoa_r+0x472>
 8006a64:	e6f0      	b.n	8006848 <_dtoa_r+0x4e0>
 8006a66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006a68:	2a00      	cmp	r2, #0
 8006a6a:	f000 80db 	beq.w	8006c24 <_dtoa_r+0x8bc>
 8006a6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a70:	2a01      	cmp	r2, #1
 8006a72:	f300 80bf 	bgt.w	8006bf4 <_dtoa_r+0x88c>
 8006a76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006a78:	2a00      	cmp	r2, #0
 8006a7a:	f000 80b7 	beq.w	8006bec <_dtoa_r+0x884>
 8006a7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006a82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006a84:	4646      	mov	r6, r8
 8006a86:	9a08      	ldr	r2, [sp, #32]
 8006a88:	2101      	movs	r1, #1
 8006a8a:	441a      	add	r2, r3
 8006a8c:	4658      	mov	r0, fp
 8006a8e:	4498      	add	r8, r3
 8006a90:	9208      	str	r2, [sp, #32]
 8006a92:	f000 fc21 	bl	80072d8 <__i2b>
 8006a96:	4605      	mov	r5, r0
 8006a98:	b15e      	cbz	r6, 8006ab2 <_dtoa_r+0x74a>
 8006a9a:	9b08      	ldr	r3, [sp, #32]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	dd08      	ble.n	8006ab2 <_dtoa_r+0x74a>
 8006aa0:	42b3      	cmp	r3, r6
 8006aa2:	9a08      	ldr	r2, [sp, #32]
 8006aa4:	bfa8      	it	ge
 8006aa6:	4633      	movge	r3, r6
 8006aa8:	eba8 0803 	sub.w	r8, r8, r3
 8006aac:	1af6      	subs	r6, r6, r3
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	9308      	str	r3, [sp, #32]
 8006ab2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ab4:	b1f3      	cbz	r3, 8006af4 <_dtoa_r+0x78c>
 8006ab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 80b7 	beq.w	8006c2c <_dtoa_r+0x8c4>
 8006abe:	b18c      	cbz	r4, 8006ae4 <_dtoa_r+0x77c>
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	4622      	mov	r2, r4
 8006ac4:	4658      	mov	r0, fp
 8006ac6:	f000 fcc7 	bl	8007458 <__pow5mult>
 8006aca:	464a      	mov	r2, r9
 8006acc:	4601      	mov	r1, r0
 8006ace:	4605      	mov	r5, r0
 8006ad0:	4658      	mov	r0, fp
 8006ad2:	f000 fc17 	bl	8007304 <__multiply>
 8006ad6:	4649      	mov	r1, r9
 8006ad8:	9004      	str	r0, [sp, #16]
 8006ada:	4658      	mov	r0, fp
 8006adc:	f000 fb48 	bl	8007170 <_Bfree>
 8006ae0:	9b04      	ldr	r3, [sp, #16]
 8006ae2:	4699      	mov	r9, r3
 8006ae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ae6:	1b1a      	subs	r2, r3, r4
 8006ae8:	d004      	beq.n	8006af4 <_dtoa_r+0x78c>
 8006aea:	4649      	mov	r1, r9
 8006aec:	4658      	mov	r0, fp
 8006aee:	f000 fcb3 	bl	8007458 <__pow5mult>
 8006af2:	4681      	mov	r9, r0
 8006af4:	2101      	movs	r1, #1
 8006af6:	4658      	mov	r0, fp
 8006af8:	f000 fbee 	bl	80072d8 <__i2b>
 8006afc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006afe:	4604      	mov	r4, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 81cf 	beq.w	8006ea4 <_dtoa_r+0xb3c>
 8006b06:	461a      	mov	r2, r3
 8006b08:	4601      	mov	r1, r0
 8006b0a:	4658      	mov	r0, fp
 8006b0c:	f000 fca4 	bl	8007458 <__pow5mult>
 8006b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	4604      	mov	r4, r0
 8006b16:	f300 8095 	bgt.w	8006c44 <_dtoa_r+0x8dc>
 8006b1a:	9b02      	ldr	r3, [sp, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f040 8087 	bne.w	8006c30 <_dtoa_r+0x8c8>
 8006b22:	9b03      	ldr	r3, [sp, #12]
 8006b24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f040 8089 	bne.w	8006c40 <_dtoa_r+0x8d8>
 8006b2e:	9b03      	ldr	r3, [sp, #12]
 8006b30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b34:	0d1b      	lsrs	r3, r3, #20
 8006b36:	051b      	lsls	r3, r3, #20
 8006b38:	b12b      	cbz	r3, 8006b46 <_dtoa_r+0x7de>
 8006b3a:	9b08      	ldr	r3, [sp, #32]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	9308      	str	r3, [sp, #32]
 8006b40:	f108 0801 	add.w	r8, r8, #1
 8006b44:	2301      	movs	r3, #1
 8006b46:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 81b0 	beq.w	8006eb0 <_dtoa_r+0xb48>
 8006b50:	6923      	ldr	r3, [r4, #16]
 8006b52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b56:	6918      	ldr	r0, [r3, #16]
 8006b58:	f000 fb72 	bl	8007240 <__hi0bits>
 8006b5c:	f1c0 0020 	rsb	r0, r0, #32
 8006b60:	9b08      	ldr	r3, [sp, #32]
 8006b62:	4418      	add	r0, r3
 8006b64:	f010 001f 	ands.w	r0, r0, #31
 8006b68:	d077      	beq.n	8006c5a <_dtoa_r+0x8f2>
 8006b6a:	f1c0 0320 	rsb	r3, r0, #32
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	dd6b      	ble.n	8006c4a <_dtoa_r+0x8e2>
 8006b72:	9b08      	ldr	r3, [sp, #32]
 8006b74:	f1c0 001c 	rsb	r0, r0, #28
 8006b78:	4403      	add	r3, r0
 8006b7a:	4480      	add	r8, r0
 8006b7c:	4406      	add	r6, r0
 8006b7e:	9308      	str	r3, [sp, #32]
 8006b80:	f1b8 0f00 	cmp.w	r8, #0
 8006b84:	dd05      	ble.n	8006b92 <_dtoa_r+0x82a>
 8006b86:	4649      	mov	r1, r9
 8006b88:	4642      	mov	r2, r8
 8006b8a:	4658      	mov	r0, fp
 8006b8c:	f000 fcbe 	bl	800750c <__lshift>
 8006b90:	4681      	mov	r9, r0
 8006b92:	9b08      	ldr	r3, [sp, #32]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	dd05      	ble.n	8006ba4 <_dtoa_r+0x83c>
 8006b98:	4621      	mov	r1, r4
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	4658      	mov	r0, fp
 8006b9e:	f000 fcb5 	bl	800750c <__lshift>
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d059      	beq.n	8006c5e <_dtoa_r+0x8f6>
 8006baa:	4621      	mov	r1, r4
 8006bac:	4648      	mov	r0, r9
 8006bae:	f000 fd19 	bl	80075e4 <__mcmp>
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	da53      	bge.n	8006c5e <_dtoa_r+0x8f6>
 8006bb6:	1e7b      	subs	r3, r7, #1
 8006bb8:	9304      	str	r3, [sp, #16]
 8006bba:	4649      	mov	r1, r9
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	220a      	movs	r2, #10
 8006bc0:	4658      	mov	r0, fp
 8006bc2:	f000 faf7 	bl	80071b4 <__multadd>
 8006bc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bc8:	4681      	mov	r9, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f000 8172 	beq.w	8006eb4 <_dtoa_r+0xb4c>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	4629      	mov	r1, r5
 8006bd4:	220a      	movs	r2, #10
 8006bd6:	4658      	mov	r0, fp
 8006bd8:	f000 faec 	bl	80071b4 <__multadd>
 8006bdc:	9b00      	ldr	r3, [sp, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	4605      	mov	r5, r0
 8006be2:	dc67      	bgt.n	8006cb4 <_dtoa_r+0x94c>
 8006be4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	dc41      	bgt.n	8006c6e <_dtoa_r+0x906>
 8006bea:	e063      	b.n	8006cb4 <_dtoa_r+0x94c>
 8006bec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006bee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006bf2:	e746      	b.n	8006a82 <_dtoa_r+0x71a>
 8006bf4:	9b07      	ldr	r3, [sp, #28]
 8006bf6:	1e5c      	subs	r4, r3, #1
 8006bf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bfa:	42a3      	cmp	r3, r4
 8006bfc:	bfbf      	itttt	lt
 8006bfe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006c00:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006c02:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006c04:	1ae3      	sublt	r3, r4, r3
 8006c06:	bfb4      	ite	lt
 8006c08:	18d2      	addlt	r2, r2, r3
 8006c0a:	1b1c      	subge	r4, r3, r4
 8006c0c:	9b07      	ldr	r3, [sp, #28]
 8006c0e:	bfbc      	itt	lt
 8006c10:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006c12:	2400      	movlt	r4, #0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	bfb5      	itete	lt
 8006c18:	eba8 0603 	sublt.w	r6, r8, r3
 8006c1c:	9b07      	ldrge	r3, [sp, #28]
 8006c1e:	2300      	movlt	r3, #0
 8006c20:	4646      	movge	r6, r8
 8006c22:	e730      	b.n	8006a86 <_dtoa_r+0x71e>
 8006c24:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c26:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006c28:	4646      	mov	r6, r8
 8006c2a:	e735      	b.n	8006a98 <_dtoa_r+0x730>
 8006c2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c2e:	e75c      	b.n	8006aea <_dtoa_r+0x782>
 8006c30:	2300      	movs	r3, #0
 8006c32:	e788      	b.n	8006b46 <_dtoa_r+0x7de>
 8006c34:	3fe00000 	.word	0x3fe00000
 8006c38:	40240000 	.word	0x40240000
 8006c3c:	40140000 	.word	0x40140000
 8006c40:	9b02      	ldr	r3, [sp, #8]
 8006c42:	e780      	b.n	8006b46 <_dtoa_r+0x7de>
 8006c44:	2300      	movs	r3, #0
 8006c46:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c48:	e782      	b.n	8006b50 <_dtoa_r+0x7e8>
 8006c4a:	d099      	beq.n	8006b80 <_dtoa_r+0x818>
 8006c4c:	9a08      	ldr	r2, [sp, #32]
 8006c4e:	331c      	adds	r3, #28
 8006c50:	441a      	add	r2, r3
 8006c52:	4498      	add	r8, r3
 8006c54:	441e      	add	r6, r3
 8006c56:	9208      	str	r2, [sp, #32]
 8006c58:	e792      	b.n	8006b80 <_dtoa_r+0x818>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	e7f6      	b.n	8006c4c <_dtoa_r+0x8e4>
 8006c5e:	9b07      	ldr	r3, [sp, #28]
 8006c60:	9704      	str	r7, [sp, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	dc20      	bgt.n	8006ca8 <_dtoa_r+0x940>
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	dd1e      	ble.n	8006cac <_dtoa_r+0x944>
 8006c6e:	9b00      	ldr	r3, [sp, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f47f aec0 	bne.w	80069f6 <_dtoa_r+0x68e>
 8006c76:	4621      	mov	r1, r4
 8006c78:	2205      	movs	r2, #5
 8006c7a:	4658      	mov	r0, fp
 8006c7c:	f000 fa9a 	bl	80071b4 <__multadd>
 8006c80:	4601      	mov	r1, r0
 8006c82:	4604      	mov	r4, r0
 8006c84:	4648      	mov	r0, r9
 8006c86:	f000 fcad 	bl	80075e4 <__mcmp>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	f77f aeb3 	ble.w	80069f6 <_dtoa_r+0x68e>
 8006c90:	4656      	mov	r6, sl
 8006c92:	2331      	movs	r3, #49	@ 0x31
 8006c94:	f806 3b01 	strb.w	r3, [r6], #1
 8006c98:	9b04      	ldr	r3, [sp, #16]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	9304      	str	r3, [sp, #16]
 8006c9e:	e6ae      	b.n	80069fe <_dtoa_r+0x696>
 8006ca0:	9c07      	ldr	r4, [sp, #28]
 8006ca2:	9704      	str	r7, [sp, #16]
 8006ca4:	4625      	mov	r5, r4
 8006ca6:	e7f3      	b.n	8006c90 <_dtoa_r+0x928>
 8006ca8:	9b07      	ldr	r3, [sp, #28]
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 8104 	beq.w	8006ebc <_dtoa_r+0xb54>
 8006cb4:	2e00      	cmp	r6, #0
 8006cb6:	dd05      	ble.n	8006cc4 <_dtoa_r+0x95c>
 8006cb8:	4629      	mov	r1, r5
 8006cba:	4632      	mov	r2, r6
 8006cbc:	4658      	mov	r0, fp
 8006cbe:	f000 fc25 	bl	800750c <__lshift>
 8006cc2:	4605      	mov	r5, r0
 8006cc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d05a      	beq.n	8006d80 <_dtoa_r+0xa18>
 8006cca:	6869      	ldr	r1, [r5, #4]
 8006ccc:	4658      	mov	r0, fp
 8006cce:	f000 fa0f 	bl	80070f0 <_Balloc>
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	b928      	cbnz	r0, 8006ce2 <_dtoa_r+0x97a>
 8006cd6:	4b84      	ldr	r3, [pc, #528]	@ (8006ee8 <_dtoa_r+0xb80>)
 8006cd8:	4602      	mov	r2, r0
 8006cda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006cde:	f7ff bb5a 	b.w	8006396 <_dtoa_r+0x2e>
 8006ce2:	692a      	ldr	r2, [r5, #16]
 8006ce4:	3202      	adds	r2, #2
 8006ce6:	0092      	lsls	r2, r2, #2
 8006ce8:	f105 010c 	add.w	r1, r5, #12
 8006cec:	300c      	adds	r0, #12
 8006cee:	f001 f813 	bl	8007d18 <memcpy>
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	4631      	mov	r1, r6
 8006cf6:	4658      	mov	r0, fp
 8006cf8:	f000 fc08 	bl	800750c <__lshift>
 8006cfc:	f10a 0301 	add.w	r3, sl, #1
 8006d00:	9307      	str	r3, [sp, #28]
 8006d02:	9b00      	ldr	r3, [sp, #0]
 8006d04:	4453      	add	r3, sl
 8006d06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d08:	9b02      	ldr	r3, [sp, #8]
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	462f      	mov	r7, r5
 8006d10:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d12:	4605      	mov	r5, r0
 8006d14:	9b07      	ldr	r3, [sp, #28]
 8006d16:	4621      	mov	r1, r4
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	4648      	mov	r0, r9
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	f7ff fa9a 	bl	8006256 <quorem>
 8006d22:	4639      	mov	r1, r7
 8006d24:	9002      	str	r0, [sp, #8]
 8006d26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006d2a:	4648      	mov	r0, r9
 8006d2c:	f000 fc5a 	bl	80075e4 <__mcmp>
 8006d30:	462a      	mov	r2, r5
 8006d32:	9008      	str	r0, [sp, #32]
 8006d34:	4621      	mov	r1, r4
 8006d36:	4658      	mov	r0, fp
 8006d38:	f000 fc70 	bl	800761c <__mdiff>
 8006d3c:	68c2      	ldr	r2, [r0, #12]
 8006d3e:	4606      	mov	r6, r0
 8006d40:	bb02      	cbnz	r2, 8006d84 <_dtoa_r+0xa1c>
 8006d42:	4601      	mov	r1, r0
 8006d44:	4648      	mov	r0, r9
 8006d46:	f000 fc4d 	bl	80075e4 <__mcmp>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	4631      	mov	r1, r6
 8006d4e:	4658      	mov	r0, fp
 8006d50:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d52:	f000 fa0d 	bl	8007170 <_Bfree>
 8006d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d5a:	9e07      	ldr	r6, [sp, #28]
 8006d5c:	ea43 0102 	orr.w	r1, r3, r2
 8006d60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d62:	4319      	orrs	r1, r3
 8006d64:	d110      	bne.n	8006d88 <_dtoa_r+0xa20>
 8006d66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006d6a:	d029      	beq.n	8006dc0 <_dtoa_r+0xa58>
 8006d6c:	9b08      	ldr	r3, [sp, #32]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	dd02      	ble.n	8006d78 <_dtoa_r+0xa10>
 8006d72:	9b02      	ldr	r3, [sp, #8]
 8006d74:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006d78:	9b00      	ldr	r3, [sp, #0]
 8006d7a:	f883 8000 	strb.w	r8, [r3]
 8006d7e:	e63f      	b.n	8006a00 <_dtoa_r+0x698>
 8006d80:	4628      	mov	r0, r5
 8006d82:	e7bb      	b.n	8006cfc <_dtoa_r+0x994>
 8006d84:	2201      	movs	r2, #1
 8006d86:	e7e1      	b.n	8006d4c <_dtoa_r+0x9e4>
 8006d88:	9b08      	ldr	r3, [sp, #32]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	db04      	blt.n	8006d98 <_dtoa_r+0xa30>
 8006d8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d90:	430b      	orrs	r3, r1
 8006d92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006d94:	430b      	orrs	r3, r1
 8006d96:	d120      	bne.n	8006dda <_dtoa_r+0xa72>
 8006d98:	2a00      	cmp	r2, #0
 8006d9a:	dded      	ble.n	8006d78 <_dtoa_r+0xa10>
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	2201      	movs	r2, #1
 8006da0:	4658      	mov	r0, fp
 8006da2:	f000 fbb3 	bl	800750c <__lshift>
 8006da6:	4621      	mov	r1, r4
 8006da8:	4681      	mov	r9, r0
 8006daa:	f000 fc1b 	bl	80075e4 <__mcmp>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	dc03      	bgt.n	8006dba <_dtoa_r+0xa52>
 8006db2:	d1e1      	bne.n	8006d78 <_dtoa_r+0xa10>
 8006db4:	f018 0f01 	tst.w	r8, #1
 8006db8:	d0de      	beq.n	8006d78 <_dtoa_r+0xa10>
 8006dba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006dbe:	d1d8      	bne.n	8006d72 <_dtoa_r+0xa0a>
 8006dc0:	9a00      	ldr	r2, [sp, #0]
 8006dc2:	2339      	movs	r3, #57	@ 0x39
 8006dc4:	7013      	strb	r3, [r2, #0]
 8006dc6:	4633      	mov	r3, r6
 8006dc8:	461e      	mov	r6, r3
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006dd0:	2a39      	cmp	r2, #57	@ 0x39
 8006dd2:	d052      	beq.n	8006e7a <_dtoa_r+0xb12>
 8006dd4:	3201      	adds	r2, #1
 8006dd6:	701a      	strb	r2, [r3, #0]
 8006dd8:	e612      	b.n	8006a00 <_dtoa_r+0x698>
 8006dda:	2a00      	cmp	r2, #0
 8006ddc:	dd07      	ble.n	8006dee <_dtoa_r+0xa86>
 8006dde:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006de2:	d0ed      	beq.n	8006dc0 <_dtoa_r+0xa58>
 8006de4:	9a00      	ldr	r2, [sp, #0]
 8006de6:	f108 0301 	add.w	r3, r8, #1
 8006dea:	7013      	strb	r3, [r2, #0]
 8006dec:	e608      	b.n	8006a00 <_dtoa_r+0x698>
 8006dee:	9b07      	ldr	r3, [sp, #28]
 8006df0:	9a07      	ldr	r2, [sp, #28]
 8006df2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006df6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d028      	beq.n	8006e4e <_dtoa_r+0xae6>
 8006dfc:	4649      	mov	r1, r9
 8006dfe:	2300      	movs	r3, #0
 8006e00:	220a      	movs	r2, #10
 8006e02:	4658      	mov	r0, fp
 8006e04:	f000 f9d6 	bl	80071b4 <__multadd>
 8006e08:	42af      	cmp	r7, r5
 8006e0a:	4681      	mov	r9, r0
 8006e0c:	f04f 0300 	mov.w	r3, #0
 8006e10:	f04f 020a 	mov.w	r2, #10
 8006e14:	4639      	mov	r1, r7
 8006e16:	4658      	mov	r0, fp
 8006e18:	d107      	bne.n	8006e2a <_dtoa_r+0xac2>
 8006e1a:	f000 f9cb 	bl	80071b4 <__multadd>
 8006e1e:	4607      	mov	r7, r0
 8006e20:	4605      	mov	r5, r0
 8006e22:	9b07      	ldr	r3, [sp, #28]
 8006e24:	3301      	adds	r3, #1
 8006e26:	9307      	str	r3, [sp, #28]
 8006e28:	e774      	b.n	8006d14 <_dtoa_r+0x9ac>
 8006e2a:	f000 f9c3 	bl	80071b4 <__multadd>
 8006e2e:	4629      	mov	r1, r5
 8006e30:	4607      	mov	r7, r0
 8006e32:	2300      	movs	r3, #0
 8006e34:	220a      	movs	r2, #10
 8006e36:	4658      	mov	r0, fp
 8006e38:	f000 f9bc 	bl	80071b4 <__multadd>
 8006e3c:	4605      	mov	r5, r0
 8006e3e:	e7f0      	b.n	8006e22 <_dtoa_r+0xaba>
 8006e40:	9b00      	ldr	r3, [sp, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	bfcc      	ite	gt
 8006e46:	461e      	movgt	r6, r3
 8006e48:	2601      	movle	r6, #1
 8006e4a:	4456      	add	r6, sl
 8006e4c:	2700      	movs	r7, #0
 8006e4e:	4649      	mov	r1, r9
 8006e50:	2201      	movs	r2, #1
 8006e52:	4658      	mov	r0, fp
 8006e54:	f000 fb5a 	bl	800750c <__lshift>
 8006e58:	4621      	mov	r1, r4
 8006e5a:	4681      	mov	r9, r0
 8006e5c:	f000 fbc2 	bl	80075e4 <__mcmp>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	dcb0      	bgt.n	8006dc6 <_dtoa_r+0xa5e>
 8006e64:	d102      	bne.n	8006e6c <_dtoa_r+0xb04>
 8006e66:	f018 0f01 	tst.w	r8, #1
 8006e6a:	d1ac      	bne.n	8006dc6 <_dtoa_r+0xa5e>
 8006e6c:	4633      	mov	r3, r6
 8006e6e:	461e      	mov	r6, r3
 8006e70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e74:	2a30      	cmp	r2, #48	@ 0x30
 8006e76:	d0fa      	beq.n	8006e6e <_dtoa_r+0xb06>
 8006e78:	e5c2      	b.n	8006a00 <_dtoa_r+0x698>
 8006e7a:	459a      	cmp	sl, r3
 8006e7c:	d1a4      	bne.n	8006dc8 <_dtoa_r+0xa60>
 8006e7e:	9b04      	ldr	r3, [sp, #16]
 8006e80:	3301      	adds	r3, #1
 8006e82:	9304      	str	r3, [sp, #16]
 8006e84:	2331      	movs	r3, #49	@ 0x31
 8006e86:	f88a 3000 	strb.w	r3, [sl]
 8006e8a:	e5b9      	b.n	8006a00 <_dtoa_r+0x698>
 8006e8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e8e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006eec <_dtoa_r+0xb84>
 8006e92:	b11b      	cbz	r3, 8006e9c <_dtoa_r+0xb34>
 8006e94:	f10a 0308 	add.w	r3, sl, #8
 8006e98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	4650      	mov	r0, sl
 8006e9e:	b019      	add	sp, #100	@ 0x64
 8006ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	f77f ae37 	ble.w	8006b1a <_dtoa_r+0x7b2>
 8006eac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006eae:	930a      	str	r3, [sp, #40]	@ 0x28
 8006eb0:	2001      	movs	r0, #1
 8006eb2:	e655      	b.n	8006b60 <_dtoa_r+0x7f8>
 8006eb4:	9b00      	ldr	r3, [sp, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f77f aed6 	ble.w	8006c68 <_dtoa_r+0x900>
 8006ebc:	4656      	mov	r6, sl
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	4648      	mov	r0, r9
 8006ec2:	f7ff f9c8 	bl	8006256 <quorem>
 8006ec6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006eca:	f806 8b01 	strb.w	r8, [r6], #1
 8006ece:	9b00      	ldr	r3, [sp, #0]
 8006ed0:	eba6 020a 	sub.w	r2, r6, sl
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	ddb3      	ble.n	8006e40 <_dtoa_r+0xad8>
 8006ed8:	4649      	mov	r1, r9
 8006eda:	2300      	movs	r3, #0
 8006edc:	220a      	movs	r2, #10
 8006ede:	4658      	mov	r0, fp
 8006ee0:	f000 f968 	bl	80071b4 <__multadd>
 8006ee4:	4681      	mov	r9, r0
 8006ee6:	e7ea      	b.n	8006ebe <_dtoa_r+0xb56>
 8006ee8:	0800811c 	.word	0x0800811c
 8006eec:	080080a0 	.word	0x080080a0

08006ef0 <_free_r>:
 8006ef0:	b538      	push	{r3, r4, r5, lr}
 8006ef2:	4605      	mov	r5, r0
 8006ef4:	2900      	cmp	r1, #0
 8006ef6:	d041      	beq.n	8006f7c <_free_r+0x8c>
 8006ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006efc:	1f0c      	subs	r4, r1, #4
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	bfb8      	it	lt
 8006f02:	18e4      	addlt	r4, r4, r3
 8006f04:	f000 f8e8 	bl	80070d8 <__malloc_lock>
 8006f08:	4a1d      	ldr	r2, [pc, #116]	@ (8006f80 <_free_r+0x90>)
 8006f0a:	6813      	ldr	r3, [r2, #0]
 8006f0c:	b933      	cbnz	r3, 8006f1c <_free_r+0x2c>
 8006f0e:	6063      	str	r3, [r4, #4]
 8006f10:	6014      	str	r4, [r2, #0]
 8006f12:	4628      	mov	r0, r5
 8006f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f18:	f000 b8e4 	b.w	80070e4 <__malloc_unlock>
 8006f1c:	42a3      	cmp	r3, r4
 8006f1e:	d908      	bls.n	8006f32 <_free_r+0x42>
 8006f20:	6820      	ldr	r0, [r4, #0]
 8006f22:	1821      	adds	r1, r4, r0
 8006f24:	428b      	cmp	r3, r1
 8006f26:	bf01      	itttt	eq
 8006f28:	6819      	ldreq	r1, [r3, #0]
 8006f2a:	685b      	ldreq	r3, [r3, #4]
 8006f2c:	1809      	addeq	r1, r1, r0
 8006f2e:	6021      	streq	r1, [r4, #0]
 8006f30:	e7ed      	b.n	8006f0e <_free_r+0x1e>
 8006f32:	461a      	mov	r2, r3
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	b10b      	cbz	r3, 8006f3c <_free_r+0x4c>
 8006f38:	42a3      	cmp	r3, r4
 8006f3a:	d9fa      	bls.n	8006f32 <_free_r+0x42>
 8006f3c:	6811      	ldr	r1, [r2, #0]
 8006f3e:	1850      	adds	r0, r2, r1
 8006f40:	42a0      	cmp	r0, r4
 8006f42:	d10b      	bne.n	8006f5c <_free_r+0x6c>
 8006f44:	6820      	ldr	r0, [r4, #0]
 8006f46:	4401      	add	r1, r0
 8006f48:	1850      	adds	r0, r2, r1
 8006f4a:	4283      	cmp	r3, r0
 8006f4c:	6011      	str	r1, [r2, #0]
 8006f4e:	d1e0      	bne.n	8006f12 <_free_r+0x22>
 8006f50:	6818      	ldr	r0, [r3, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	6053      	str	r3, [r2, #4]
 8006f56:	4408      	add	r0, r1
 8006f58:	6010      	str	r0, [r2, #0]
 8006f5a:	e7da      	b.n	8006f12 <_free_r+0x22>
 8006f5c:	d902      	bls.n	8006f64 <_free_r+0x74>
 8006f5e:	230c      	movs	r3, #12
 8006f60:	602b      	str	r3, [r5, #0]
 8006f62:	e7d6      	b.n	8006f12 <_free_r+0x22>
 8006f64:	6820      	ldr	r0, [r4, #0]
 8006f66:	1821      	adds	r1, r4, r0
 8006f68:	428b      	cmp	r3, r1
 8006f6a:	bf04      	itt	eq
 8006f6c:	6819      	ldreq	r1, [r3, #0]
 8006f6e:	685b      	ldreq	r3, [r3, #4]
 8006f70:	6063      	str	r3, [r4, #4]
 8006f72:	bf04      	itt	eq
 8006f74:	1809      	addeq	r1, r1, r0
 8006f76:	6021      	streq	r1, [r4, #0]
 8006f78:	6054      	str	r4, [r2, #4]
 8006f7a:	e7ca      	b.n	8006f12 <_free_r+0x22>
 8006f7c:	bd38      	pop	{r3, r4, r5, pc}
 8006f7e:	bf00      	nop
 8006f80:	20000be8 	.word	0x20000be8

08006f84 <malloc>:
 8006f84:	4b02      	ldr	r3, [pc, #8]	@ (8006f90 <malloc+0xc>)
 8006f86:	4601      	mov	r1, r0
 8006f88:	6818      	ldr	r0, [r3, #0]
 8006f8a:	f000 b825 	b.w	8006fd8 <_malloc_r>
 8006f8e:	bf00      	nop
 8006f90:	2000001c 	.word	0x2000001c

08006f94 <sbrk_aligned>:
 8006f94:	b570      	push	{r4, r5, r6, lr}
 8006f96:	4e0f      	ldr	r6, [pc, #60]	@ (8006fd4 <sbrk_aligned+0x40>)
 8006f98:	460c      	mov	r4, r1
 8006f9a:	6831      	ldr	r1, [r6, #0]
 8006f9c:	4605      	mov	r5, r0
 8006f9e:	b911      	cbnz	r1, 8006fa6 <sbrk_aligned+0x12>
 8006fa0:	f000 feaa 	bl	8007cf8 <_sbrk_r>
 8006fa4:	6030      	str	r0, [r6, #0]
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	4628      	mov	r0, r5
 8006faa:	f000 fea5 	bl	8007cf8 <_sbrk_r>
 8006fae:	1c43      	adds	r3, r0, #1
 8006fb0:	d103      	bne.n	8006fba <sbrk_aligned+0x26>
 8006fb2:	f04f 34ff 	mov.w	r4, #4294967295
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	bd70      	pop	{r4, r5, r6, pc}
 8006fba:	1cc4      	adds	r4, r0, #3
 8006fbc:	f024 0403 	bic.w	r4, r4, #3
 8006fc0:	42a0      	cmp	r0, r4
 8006fc2:	d0f8      	beq.n	8006fb6 <sbrk_aligned+0x22>
 8006fc4:	1a21      	subs	r1, r4, r0
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	f000 fe96 	bl	8007cf8 <_sbrk_r>
 8006fcc:	3001      	adds	r0, #1
 8006fce:	d1f2      	bne.n	8006fb6 <sbrk_aligned+0x22>
 8006fd0:	e7ef      	b.n	8006fb2 <sbrk_aligned+0x1e>
 8006fd2:	bf00      	nop
 8006fd4:	20000be4 	.word	0x20000be4

08006fd8 <_malloc_r>:
 8006fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fdc:	1ccd      	adds	r5, r1, #3
 8006fde:	f025 0503 	bic.w	r5, r5, #3
 8006fe2:	3508      	adds	r5, #8
 8006fe4:	2d0c      	cmp	r5, #12
 8006fe6:	bf38      	it	cc
 8006fe8:	250c      	movcc	r5, #12
 8006fea:	2d00      	cmp	r5, #0
 8006fec:	4606      	mov	r6, r0
 8006fee:	db01      	blt.n	8006ff4 <_malloc_r+0x1c>
 8006ff0:	42a9      	cmp	r1, r5
 8006ff2:	d904      	bls.n	8006ffe <_malloc_r+0x26>
 8006ff4:	230c      	movs	r3, #12
 8006ff6:	6033      	str	r3, [r6, #0]
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ffe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80070d4 <_malloc_r+0xfc>
 8007002:	f000 f869 	bl	80070d8 <__malloc_lock>
 8007006:	f8d8 3000 	ldr.w	r3, [r8]
 800700a:	461c      	mov	r4, r3
 800700c:	bb44      	cbnz	r4, 8007060 <_malloc_r+0x88>
 800700e:	4629      	mov	r1, r5
 8007010:	4630      	mov	r0, r6
 8007012:	f7ff ffbf 	bl	8006f94 <sbrk_aligned>
 8007016:	1c43      	adds	r3, r0, #1
 8007018:	4604      	mov	r4, r0
 800701a:	d158      	bne.n	80070ce <_malloc_r+0xf6>
 800701c:	f8d8 4000 	ldr.w	r4, [r8]
 8007020:	4627      	mov	r7, r4
 8007022:	2f00      	cmp	r7, #0
 8007024:	d143      	bne.n	80070ae <_malloc_r+0xd6>
 8007026:	2c00      	cmp	r4, #0
 8007028:	d04b      	beq.n	80070c2 <_malloc_r+0xea>
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	4639      	mov	r1, r7
 800702e:	4630      	mov	r0, r6
 8007030:	eb04 0903 	add.w	r9, r4, r3
 8007034:	f000 fe60 	bl	8007cf8 <_sbrk_r>
 8007038:	4581      	cmp	r9, r0
 800703a:	d142      	bne.n	80070c2 <_malloc_r+0xea>
 800703c:	6821      	ldr	r1, [r4, #0]
 800703e:	1a6d      	subs	r5, r5, r1
 8007040:	4629      	mov	r1, r5
 8007042:	4630      	mov	r0, r6
 8007044:	f7ff ffa6 	bl	8006f94 <sbrk_aligned>
 8007048:	3001      	adds	r0, #1
 800704a:	d03a      	beq.n	80070c2 <_malloc_r+0xea>
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	442b      	add	r3, r5
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	f8d8 3000 	ldr.w	r3, [r8]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	bb62      	cbnz	r2, 80070b4 <_malloc_r+0xdc>
 800705a:	f8c8 7000 	str.w	r7, [r8]
 800705e:	e00f      	b.n	8007080 <_malloc_r+0xa8>
 8007060:	6822      	ldr	r2, [r4, #0]
 8007062:	1b52      	subs	r2, r2, r5
 8007064:	d420      	bmi.n	80070a8 <_malloc_r+0xd0>
 8007066:	2a0b      	cmp	r2, #11
 8007068:	d917      	bls.n	800709a <_malloc_r+0xc2>
 800706a:	1961      	adds	r1, r4, r5
 800706c:	42a3      	cmp	r3, r4
 800706e:	6025      	str	r5, [r4, #0]
 8007070:	bf18      	it	ne
 8007072:	6059      	strne	r1, [r3, #4]
 8007074:	6863      	ldr	r3, [r4, #4]
 8007076:	bf08      	it	eq
 8007078:	f8c8 1000 	streq.w	r1, [r8]
 800707c:	5162      	str	r2, [r4, r5]
 800707e:	604b      	str	r3, [r1, #4]
 8007080:	4630      	mov	r0, r6
 8007082:	f000 f82f 	bl	80070e4 <__malloc_unlock>
 8007086:	f104 000b 	add.w	r0, r4, #11
 800708a:	1d23      	adds	r3, r4, #4
 800708c:	f020 0007 	bic.w	r0, r0, #7
 8007090:	1ac2      	subs	r2, r0, r3
 8007092:	bf1c      	itt	ne
 8007094:	1a1b      	subne	r3, r3, r0
 8007096:	50a3      	strne	r3, [r4, r2]
 8007098:	e7af      	b.n	8006ffa <_malloc_r+0x22>
 800709a:	6862      	ldr	r2, [r4, #4]
 800709c:	42a3      	cmp	r3, r4
 800709e:	bf0c      	ite	eq
 80070a0:	f8c8 2000 	streq.w	r2, [r8]
 80070a4:	605a      	strne	r2, [r3, #4]
 80070a6:	e7eb      	b.n	8007080 <_malloc_r+0xa8>
 80070a8:	4623      	mov	r3, r4
 80070aa:	6864      	ldr	r4, [r4, #4]
 80070ac:	e7ae      	b.n	800700c <_malloc_r+0x34>
 80070ae:	463c      	mov	r4, r7
 80070b0:	687f      	ldr	r7, [r7, #4]
 80070b2:	e7b6      	b.n	8007022 <_malloc_r+0x4a>
 80070b4:	461a      	mov	r2, r3
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	42a3      	cmp	r3, r4
 80070ba:	d1fb      	bne.n	80070b4 <_malloc_r+0xdc>
 80070bc:	2300      	movs	r3, #0
 80070be:	6053      	str	r3, [r2, #4]
 80070c0:	e7de      	b.n	8007080 <_malloc_r+0xa8>
 80070c2:	230c      	movs	r3, #12
 80070c4:	6033      	str	r3, [r6, #0]
 80070c6:	4630      	mov	r0, r6
 80070c8:	f000 f80c 	bl	80070e4 <__malloc_unlock>
 80070cc:	e794      	b.n	8006ff8 <_malloc_r+0x20>
 80070ce:	6005      	str	r5, [r0, #0]
 80070d0:	e7d6      	b.n	8007080 <_malloc_r+0xa8>
 80070d2:	bf00      	nop
 80070d4:	20000be8 	.word	0x20000be8

080070d8 <__malloc_lock>:
 80070d8:	4801      	ldr	r0, [pc, #4]	@ (80070e0 <__malloc_lock+0x8>)
 80070da:	f7ff b8ba 	b.w	8006252 <__retarget_lock_acquire_recursive>
 80070de:	bf00      	nop
 80070e0:	20000be0 	.word	0x20000be0

080070e4 <__malloc_unlock>:
 80070e4:	4801      	ldr	r0, [pc, #4]	@ (80070ec <__malloc_unlock+0x8>)
 80070e6:	f7ff b8b5 	b.w	8006254 <__retarget_lock_release_recursive>
 80070ea:	bf00      	nop
 80070ec:	20000be0 	.word	0x20000be0

080070f0 <_Balloc>:
 80070f0:	b570      	push	{r4, r5, r6, lr}
 80070f2:	69c6      	ldr	r6, [r0, #28]
 80070f4:	4604      	mov	r4, r0
 80070f6:	460d      	mov	r5, r1
 80070f8:	b976      	cbnz	r6, 8007118 <_Balloc+0x28>
 80070fa:	2010      	movs	r0, #16
 80070fc:	f7ff ff42 	bl	8006f84 <malloc>
 8007100:	4602      	mov	r2, r0
 8007102:	61e0      	str	r0, [r4, #28]
 8007104:	b920      	cbnz	r0, 8007110 <_Balloc+0x20>
 8007106:	4b18      	ldr	r3, [pc, #96]	@ (8007168 <_Balloc+0x78>)
 8007108:	4818      	ldr	r0, [pc, #96]	@ (800716c <_Balloc+0x7c>)
 800710a:	216b      	movs	r1, #107	@ 0x6b
 800710c:	f000 fe12 	bl	8007d34 <__assert_func>
 8007110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007114:	6006      	str	r6, [r0, #0]
 8007116:	60c6      	str	r6, [r0, #12]
 8007118:	69e6      	ldr	r6, [r4, #28]
 800711a:	68f3      	ldr	r3, [r6, #12]
 800711c:	b183      	cbz	r3, 8007140 <_Balloc+0x50>
 800711e:	69e3      	ldr	r3, [r4, #28]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007126:	b9b8      	cbnz	r0, 8007158 <_Balloc+0x68>
 8007128:	2101      	movs	r1, #1
 800712a:	fa01 f605 	lsl.w	r6, r1, r5
 800712e:	1d72      	adds	r2, r6, #5
 8007130:	0092      	lsls	r2, r2, #2
 8007132:	4620      	mov	r0, r4
 8007134:	f000 fe1c 	bl	8007d70 <_calloc_r>
 8007138:	b160      	cbz	r0, 8007154 <_Balloc+0x64>
 800713a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800713e:	e00e      	b.n	800715e <_Balloc+0x6e>
 8007140:	2221      	movs	r2, #33	@ 0x21
 8007142:	2104      	movs	r1, #4
 8007144:	4620      	mov	r0, r4
 8007146:	f000 fe13 	bl	8007d70 <_calloc_r>
 800714a:	69e3      	ldr	r3, [r4, #28]
 800714c:	60f0      	str	r0, [r6, #12]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e4      	bne.n	800711e <_Balloc+0x2e>
 8007154:	2000      	movs	r0, #0
 8007156:	bd70      	pop	{r4, r5, r6, pc}
 8007158:	6802      	ldr	r2, [r0, #0]
 800715a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800715e:	2300      	movs	r3, #0
 8007160:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007164:	e7f7      	b.n	8007156 <_Balloc+0x66>
 8007166:	bf00      	nop
 8007168:	080080ad 	.word	0x080080ad
 800716c:	0800812d 	.word	0x0800812d

08007170 <_Bfree>:
 8007170:	b570      	push	{r4, r5, r6, lr}
 8007172:	69c6      	ldr	r6, [r0, #28]
 8007174:	4605      	mov	r5, r0
 8007176:	460c      	mov	r4, r1
 8007178:	b976      	cbnz	r6, 8007198 <_Bfree+0x28>
 800717a:	2010      	movs	r0, #16
 800717c:	f7ff ff02 	bl	8006f84 <malloc>
 8007180:	4602      	mov	r2, r0
 8007182:	61e8      	str	r0, [r5, #28]
 8007184:	b920      	cbnz	r0, 8007190 <_Bfree+0x20>
 8007186:	4b09      	ldr	r3, [pc, #36]	@ (80071ac <_Bfree+0x3c>)
 8007188:	4809      	ldr	r0, [pc, #36]	@ (80071b0 <_Bfree+0x40>)
 800718a:	218f      	movs	r1, #143	@ 0x8f
 800718c:	f000 fdd2 	bl	8007d34 <__assert_func>
 8007190:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007194:	6006      	str	r6, [r0, #0]
 8007196:	60c6      	str	r6, [r0, #12]
 8007198:	b13c      	cbz	r4, 80071aa <_Bfree+0x3a>
 800719a:	69eb      	ldr	r3, [r5, #28]
 800719c:	6862      	ldr	r2, [r4, #4]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071a4:	6021      	str	r1, [r4, #0]
 80071a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071aa:	bd70      	pop	{r4, r5, r6, pc}
 80071ac:	080080ad 	.word	0x080080ad
 80071b0:	0800812d 	.word	0x0800812d

080071b4 <__multadd>:
 80071b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b8:	690d      	ldr	r5, [r1, #16]
 80071ba:	4607      	mov	r7, r0
 80071bc:	460c      	mov	r4, r1
 80071be:	461e      	mov	r6, r3
 80071c0:	f101 0c14 	add.w	ip, r1, #20
 80071c4:	2000      	movs	r0, #0
 80071c6:	f8dc 3000 	ldr.w	r3, [ip]
 80071ca:	b299      	uxth	r1, r3
 80071cc:	fb02 6101 	mla	r1, r2, r1, r6
 80071d0:	0c1e      	lsrs	r6, r3, #16
 80071d2:	0c0b      	lsrs	r3, r1, #16
 80071d4:	fb02 3306 	mla	r3, r2, r6, r3
 80071d8:	b289      	uxth	r1, r1
 80071da:	3001      	adds	r0, #1
 80071dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071e0:	4285      	cmp	r5, r0
 80071e2:	f84c 1b04 	str.w	r1, [ip], #4
 80071e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071ea:	dcec      	bgt.n	80071c6 <__multadd+0x12>
 80071ec:	b30e      	cbz	r6, 8007232 <__multadd+0x7e>
 80071ee:	68a3      	ldr	r3, [r4, #8]
 80071f0:	42ab      	cmp	r3, r5
 80071f2:	dc19      	bgt.n	8007228 <__multadd+0x74>
 80071f4:	6861      	ldr	r1, [r4, #4]
 80071f6:	4638      	mov	r0, r7
 80071f8:	3101      	adds	r1, #1
 80071fa:	f7ff ff79 	bl	80070f0 <_Balloc>
 80071fe:	4680      	mov	r8, r0
 8007200:	b928      	cbnz	r0, 800720e <__multadd+0x5a>
 8007202:	4602      	mov	r2, r0
 8007204:	4b0c      	ldr	r3, [pc, #48]	@ (8007238 <__multadd+0x84>)
 8007206:	480d      	ldr	r0, [pc, #52]	@ (800723c <__multadd+0x88>)
 8007208:	21ba      	movs	r1, #186	@ 0xba
 800720a:	f000 fd93 	bl	8007d34 <__assert_func>
 800720e:	6922      	ldr	r2, [r4, #16]
 8007210:	3202      	adds	r2, #2
 8007212:	f104 010c 	add.w	r1, r4, #12
 8007216:	0092      	lsls	r2, r2, #2
 8007218:	300c      	adds	r0, #12
 800721a:	f000 fd7d 	bl	8007d18 <memcpy>
 800721e:	4621      	mov	r1, r4
 8007220:	4638      	mov	r0, r7
 8007222:	f7ff ffa5 	bl	8007170 <_Bfree>
 8007226:	4644      	mov	r4, r8
 8007228:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800722c:	3501      	adds	r5, #1
 800722e:	615e      	str	r6, [r3, #20]
 8007230:	6125      	str	r5, [r4, #16]
 8007232:	4620      	mov	r0, r4
 8007234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007238:	0800811c 	.word	0x0800811c
 800723c:	0800812d 	.word	0x0800812d

08007240 <__hi0bits>:
 8007240:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007244:	4603      	mov	r3, r0
 8007246:	bf36      	itet	cc
 8007248:	0403      	lslcc	r3, r0, #16
 800724a:	2000      	movcs	r0, #0
 800724c:	2010      	movcc	r0, #16
 800724e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007252:	bf3c      	itt	cc
 8007254:	021b      	lslcc	r3, r3, #8
 8007256:	3008      	addcc	r0, #8
 8007258:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800725c:	bf3c      	itt	cc
 800725e:	011b      	lslcc	r3, r3, #4
 8007260:	3004      	addcc	r0, #4
 8007262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007266:	bf3c      	itt	cc
 8007268:	009b      	lslcc	r3, r3, #2
 800726a:	3002      	addcc	r0, #2
 800726c:	2b00      	cmp	r3, #0
 800726e:	db05      	blt.n	800727c <__hi0bits+0x3c>
 8007270:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007274:	f100 0001 	add.w	r0, r0, #1
 8007278:	bf08      	it	eq
 800727a:	2020      	moveq	r0, #32
 800727c:	4770      	bx	lr

0800727e <__lo0bits>:
 800727e:	6803      	ldr	r3, [r0, #0]
 8007280:	4602      	mov	r2, r0
 8007282:	f013 0007 	ands.w	r0, r3, #7
 8007286:	d00b      	beq.n	80072a0 <__lo0bits+0x22>
 8007288:	07d9      	lsls	r1, r3, #31
 800728a:	d421      	bmi.n	80072d0 <__lo0bits+0x52>
 800728c:	0798      	lsls	r0, r3, #30
 800728e:	bf49      	itett	mi
 8007290:	085b      	lsrmi	r3, r3, #1
 8007292:	089b      	lsrpl	r3, r3, #2
 8007294:	2001      	movmi	r0, #1
 8007296:	6013      	strmi	r3, [r2, #0]
 8007298:	bf5c      	itt	pl
 800729a:	6013      	strpl	r3, [r2, #0]
 800729c:	2002      	movpl	r0, #2
 800729e:	4770      	bx	lr
 80072a0:	b299      	uxth	r1, r3
 80072a2:	b909      	cbnz	r1, 80072a8 <__lo0bits+0x2a>
 80072a4:	0c1b      	lsrs	r3, r3, #16
 80072a6:	2010      	movs	r0, #16
 80072a8:	b2d9      	uxtb	r1, r3
 80072aa:	b909      	cbnz	r1, 80072b0 <__lo0bits+0x32>
 80072ac:	3008      	adds	r0, #8
 80072ae:	0a1b      	lsrs	r3, r3, #8
 80072b0:	0719      	lsls	r1, r3, #28
 80072b2:	bf04      	itt	eq
 80072b4:	091b      	lsreq	r3, r3, #4
 80072b6:	3004      	addeq	r0, #4
 80072b8:	0799      	lsls	r1, r3, #30
 80072ba:	bf04      	itt	eq
 80072bc:	089b      	lsreq	r3, r3, #2
 80072be:	3002      	addeq	r0, #2
 80072c0:	07d9      	lsls	r1, r3, #31
 80072c2:	d403      	bmi.n	80072cc <__lo0bits+0x4e>
 80072c4:	085b      	lsrs	r3, r3, #1
 80072c6:	f100 0001 	add.w	r0, r0, #1
 80072ca:	d003      	beq.n	80072d4 <__lo0bits+0x56>
 80072cc:	6013      	str	r3, [r2, #0]
 80072ce:	4770      	bx	lr
 80072d0:	2000      	movs	r0, #0
 80072d2:	4770      	bx	lr
 80072d4:	2020      	movs	r0, #32
 80072d6:	4770      	bx	lr

080072d8 <__i2b>:
 80072d8:	b510      	push	{r4, lr}
 80072da:	460c      	mov	r4, r1
 80072dc:	2101      	movs	r1, #1
 80072de:	f7ff ff07 	bl	80070f0 <_Balloc>
 80072e2:	4602      	mov	r2, r0
 80072e4:	b928      	cbnz	r0, 80072f2 <__i2b+0x1a>
 80072e6:	4b05      	ldr	r3, [pc, #20]	@ (80072fc <__i2b+0x24>)
 80072e8:	4805      	ldr	r0, [pc, #20]	@ (8007300 <__i2b+0x28>)
 80072ea:	f240 1145 	movw	r1, #325	@ 0x145
 80072ee:	f000 fd21 	bl	8007d34 <__assert_func>
 80072f2:	2301      	movs	r3, #1
 80072f4:	6144      	str	r4, [r0, #20]
 80072f6:	6103      	str	r3, [r0, #16]
 80072f8:	bd10      	pop	{r4, pc}
 80072fa:	bf00      	nop
 80072fc:	0800811c 	.word	0x0800811c
 8007300:	0800812d 	.word	0x0800812d

08007304 <__multiply>:
 8007304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007308:	4614      	mov	r4, r2
 800730a:	690a      	ldr	r2, [r1, #16]
 800730c:	6923      	ldr	r3, [r4, #16]
 800730e:	429a      	cmp	r2, r3
 8007310:	bfa8      	it	ge
 8007312:	4623      	movge	r3, r4
 8007314:	460f      	mov	r7, r1
 8007316:	bfa4      	itt	ge
 8007318:	460c      	movge	r4, r1
 800731a:	461f      	movge	r7, r3
 800731c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007320:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007324:	68a3      	ldr	r3, [r4, #8]
 8007326:	6861      	ldr	r1, [r4, #4]
 8007328:	eb0a 0609 	add.w	r6, sl, r9
 800732c:	42b3      	cmp	r3, r6
 800732e:	b085      	sub	sp, #20
 8007330:	bfb8      	it	lt
 8007332:	3101      	addlt	r1, #1
 8007334:	f7ff fedc 	bl	80070f0 <_Balloc>
 8007338:	b930      	cbnz	r0, 8007348 <__multiply+0x44>
 800733a:	4602      	mov	r2, r0
 800733c:	4b44      	ldr	r3, [pc, #272]	@ (8007450 <__multiply+0x14c>)
 800733e:	4845      	ldr	r0, [pc, #276]	@ (8007454 <__multiply+0x150>)
 8007340:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007344:	f000 fcf6 	bl	8007d34 <__assert_func>
 8007348:	f100 0514 	add.w	r5, r0, #20
 800734c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007350:	462b      	mov	r3, r5
 8007352:	2200      	movs	r2, #0
 8007354:	4543      	cmp	r3, r8
 8007356:	d321      	bcc.n	800739c <__multiply+0x98>
 8007358:	f107 0114 	add.w	r1, r7, #20
 800735c:	f104 0214 	add.w	r2, r4, #20
 8007360:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007364:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007368:	9302      	str	r3, [sp, #8]
 800736a:	1b13      	subs	r3, r2, r4
 800736c:	3b15      	subs	r3, #21
 800736e:	f023 0303 	bic.w	r3, r3, #3
 8007372:	3304      	adds	r3, #4
 8007374:	f104 0715 	add.w	r7, r4, #21
 8007378:	42ba      	cmp	r2, r7
 800737a:	bf38      	it	cc
 800737c:	2304      	movcc	r3, #4
 800737e:	9301      	str	r3, [sp, #4]
 8007380:	9b02      	ldr	r3, [sp, #8]
 8007382:	9103      	str	r1, [sp, #12]
 8007384:	428b      	cmp	r3, r1
 8007386:	d80c      	bhi.n	80073a2 <__multiply+0x9e>
 8007388:	2e00      	cmp	r6, #0
 800738a:	dd03      	ble.n	8007394 <__multiply+0x90>
 800738c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007390:	2b00      	cmp	r3, #0
 8007392:	d05b      	beq.n	800744c <__multiply+0x148>
 8007394:	6106      	str	r6, [r0, #16]
 8007396:	b005      	add	sp, #20
 8007398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800739c:	f843 2b04 	str.w	r2, [r3], #4
 80073a0:	e7d8      	b.n	8007354 <__multiply+0x50>
 80073a2:	f8b1 a000 	ldrh.w	sl, [r1]
 80073a6:	f1ba 0f00 	cmp.w	sl, #0
 80073aa:	d024      	beq.n	80073f6 <__multiply+0xf2>
 80073ac:	f104 0e14 	add.w	lr, r4, #20
 80073b0:	46a9      	mov	r9, r5
 80073b2:	f04f 0c00 	mov.w	ip, #0
 80073b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80073ba:	f8d9 3000 	ldr.w	r3, [r9]
 80073be:	fa1f fb87 	uxth.w	fp, r7
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	fb0a 330b 	mla	r3, sl, fp, r3
 80073c8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80073cc:	f8d9 7000 	ldr.w	r7, [r9]
 80073d0:	4463      	add	r3, ip
 80073d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80073d6:	fb0a c70b 	mla	r7, sl, fp, ip
 80073da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80073de:	b29b      	uxth	r3, r3
 80073e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80073e4:	4572      	cmp	r2, lr
 80073e6:	f849 3b04 	str.w	r3, [r9], #4
 80073ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80073ee:	d8e2      	bhi.n	80073b6 <__multiply+0xb2>
 80073f0:	9b01      	ldr	r3, [sp, #4]
 80073f2:	f845 c003 	str.w	ip, [r5, r3]
 80073f6:	9b03      	ldr	r3, [sp, #12]
 80073f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80073fc:	3104      	adds	r1, #4
 80073fe:	f1b9 0f00 	cmp.w	r9, #0
 8007402:	d021      	beq.n	8007448 <__multiply+0x144>
 8007404:	682b      	ldr	r3, [r5, #0]
 8007406:	f104 0c14 	add.w	ip, r4, #20
 800740a:	46ae      	mov	lr, r5
 800740c:	f04f 0a00 	mov.w	sl, #0
 8007410:	f8bc b000 	ldrh.w	fp, [ip]
 8007414:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007418:	fb09 770b 	mla	r7, r9, fp, r7
 800741c:	4457      	add	r7, sl
 800741e:	b29b      	uxth	r3, r3
 8007420:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007424:	f84e 3b04 	str.w	r3, [lr], #4
 8007428:	f85c 3b04 	ldr.w	r3, [ip], #4
 800742c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007430:	f8be 3000 	ldrh.w	r3, [lr]
 8007434:	fb09 330a 	mla	r3, r9, sl, r3
 8007438:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800743c:	4562      	cmp	r2, ip
 800743e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007442:	d8e5      	bhi.n	8007410 <__multiply+0x10c>
 8007444:	9f01      	ldr	r7, [sp, #4]
 8007446:	51eb      	str	r3, [r5, r7]
 8007448:	3504      	adds	r5, #4
 800744a:	e799      	b.n	8007380 <__multiply+0x7c>
 800744c:	3e01      	subs	r6, #1
 800744e:	e79b      	b.n	8007388 <__multiply+0x84>
 8007450:	0800811c 	.word	0x0800811c
 8007454:	0800812d 	.word	0x0800812d

08007458 <__pow5mult>:
 8007458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800745c:	4615      	mov	r5, r2
 800745e:	f012 0203 	ands.w	r2, r2, #3
 8007462:	4607      	mov	r7, r0
 8007464:	460e      	mov	r6, r1
 8007466:	d007      	beq.n	8007478 <__pow5mult+0x20>
 8007468:	4c25      	ldr	r4, [pc, #148]	@ (8007500 <__pow5mult+0xa8>)
 800746a:	3a01      	subs	r2, #1
 800746c:	2300      	movs	r3, #0
 800746e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007472:	f7ff fe9f 	bl	80071b4 <__multadd>
 8007476:	4606      	mov	r6, r0
 8007478:	10ad      	asrs	r5, r5, #2
 800747a:	d03d      	beq.n	80074f8 <__pow5mult+0xa0>
 800747c:	69fc      	ldr	r4, [r7, #28]
 800747e:	b97c      	cbnz	r4, 80074a0 <__pow5mult+0x48>
 8007480:	2010      	movs	r0, #16
 8007482:	f7ff fd7f 	bl	8006f84 <malloc>
 8007486:	4602      	mov	r2, r0
 8007488:	61f8      	str	r0, [r7, #28]
 800748a:	b928      	cbnz	r0, 8007498 <__pow5mult+0x40>
 800748c:	4b1d      	ldr	r3, [pc, #116]	@ (8007504 <__pow5mult+0xac>)
 800748e:	481e      	ldr	r0, [pc, #120]	@ (8007508 <__pow5mult+0xb0>)
 8007490:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007494:	f000 fc4e 	bl	8007d34 <__assert_func>
 8007498:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800749c:	6004      	str	r4, [r0, #0]
 800749e:	60c4      	str	r4, [r0, #12]
 80074a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80074a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074a8:	b94c      	cbnz	r4, 80074be <__pow5mult+0x66>
 80074aa:	f240 2171 	movw	r1, #625	@ 0x271
 80074ae:	4638      	mov	r0, r7
 80074b0:	f7ff ff12 	bl	80072d8 <__i2b>
 80074b4:	2300      	movs	r3, #0
 80074b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80074ba:	4604      	mov	r4, r0
 80074bc:	6003      	str	r3, [r0, #0]
 80074be:	f04f 0900 	mov.w	r9, #0
 80074c2:	07eb      	lsls	r3, r5, #31
 80074c4:	d50a      	bpl.n	80074dc <__pow5mult+0x84>
 80074c6:	4631      	mov	r1, r6
 80074c8:	4622      	mov	r2, r4
 80074ca:	4638      	mov	r0, r7
 80074cc:	f7ff ff1a 	bl	8007304 <__multiply>
 80074d0:	4631      	mov	r1, r6
 80074d2:	4680      	mov	r8, r0
 80074d4:	4638      	mov	r0, r7
 80074d6:	f7ff fe4b 	bl	8007170 <_Bfree>
 80074da:	4646      	mov	r6, r8
 80074dc:	106d      	asrs	r5, r5, #1
 80074de:	d00b      	beq.n	80074f8 <__pow5mult+0xa0>
 80074e0:	6820      	ldr	r0, [r4, #0]
 80074e2:	b938      	cbnz	r0, 80074f4 <__pow5mult+0x9c>
 80074e4:	4622      	mov	r2, r4
 80074e6:	4621      	mov	r1, r4
 80074e8:	4638      	mov	r0, r7
 80074ea:	f7ff ff0b 	bl	8007304 <__multiply>
 80074ee:	6020      	str	r0, [r4, #0]
 80074f0:	f8c0 9000 	str.w	r9, [r0]
 80074f4:	4604      	mov	r4, r0
 80074f6:	e7e4      	b.n	80074c2 <__pow5mult+0x6a>
 80074f8:	4630      	mov	r0, r6
 80074fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074fe:	bf00      	nop
 8007500:	08008188 	.word	0x08008188
 8007504:	080080ad 	.word	0x080080ad
 8007508:	0800812d 	.word	0x0800812d

0800750c <__lshift>:
 800750c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007510:	460c      	mov	r4, r1
 8007512:	6849      	ldr	r1, [r1, #4]
 8007514:	6923      	ldr	r3, [r4, #16]
 8007516:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800751a:	68a3      	ldr	r3, [r4, #8]
 800751c:	4607      	mov	r7, r0
 800751e:	4691      	mov	r9, r2
 8007520:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007524:	f108 0601 	add.w	r6, r8, #1
 8007528:	42b3      	cmp	r3, r6
 800752a:	db0b      	blt.n	8007544 <__lshift+0x38>
 800752c:	4638      	mov	r0, r7
 800752e:	f7ff fddf 	bl	80070f0 <_Balloc>
 8007532:	4605      	mov	r5, r0
 8007534:	b948      	cbnz	r0, 800754a <__lshift+0x3e>
 8007536:	4602      	mov	r2, r0
 8007538:	4b28      	ldr	r3, [pc, #160]	@ (80075dc <__lshift+0xd0>)
 800753a:	4829      	ldr	r0, [pc, #164]	@ (80075e0 <__lshift+0xd4>)
 800753c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007540:	f000 fbf8 	bl	8007d34 <__assert_func>
 8007544:	3101      	adds	r1, #1
 8007546:	005b      	lsls	r3, r3, #1
 8007548:	e7ee      	b.n	8007528 <__lshift+0x1c>
 800754a:	2300      	movs	r3, #0
 800754c:	f100 0114 	add.w	r1, r0, #20
 8007550:	f100 0210 	add.w	r2, r0, #16
 8007554:	4618      	mov	r0, r3
 8007556:	4553      	cmp	r3, sl
 8007558:	db33      	blt.n	80075c2 <__lshift+0xb6>
 800755a:	6920      	ldr	r0, [r4, #16]
 800755c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007560:	f104 0314 	add.w	r3, r4, #20
 8007564:	f019 091f 	ands.w	r9, r9, #31
 8007568:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800756c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007570:	d02b      	beq.n	80075ca <__lshift+0xbe>
 8007572:	f1c9 0e20 	rsb	lr, r9, #32
 8007576:	468a      	mov	sl, r1
 8007578:	2200      	movs	r2, #0
 800757a:	6818      	ldr	r0, [r3, #0]
 800757c:	fa00 f009 	lsl.w	r0, r0, r9
 8007580:	4310      	orrs	r0, r2
 8007582:	f84a 0b04 	str.w	r0, [sl], #4
 8007586:	f853 2b04 	ldr.w	r2, [r3], #4
 800758a:	459c      	cmp	ip, r3
 800758c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007590:	d8f3      	bhi.n	800757a <__lshift+0x6e>
 8007592:	ebac 0304 	sub.w	r3, ip, r4
 8007596:	3b15      	subs	r3, #21
 8007598:	f023 0303 	bic.w	r3, r3, #3
 800759c:	3304      	adds	r3, #4
 800759e:	f104 0015 	add.w	r0, r4, #21
 80075a2:	4584      	cmp	ip, r0
 80075a4:	bf38      	it	cc
 80075a6:	2304      	movcc	r3, #4
 80075a8:	50ca      	str	r2, [r1, r3]
 80075aa:	b10a      	cbz	r2, 80075b0 <__lshift+0xa4>
 80075ac:	f108 0602 	add.w	r6, r8, #2
 80075b0:	3e01      	subs	r6, #1
 80075b2:	4638      	mov	r0, r7
 80075b4:	612e      	str	r6, [r5, #16]
 80075b6:	4621      	mov	r1, r4
 80075b8:	f7ff fdda 	bl	8007170 <_Bfree>
 80075bc:	4628      	mov	r0, r5
 80075be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80075c6:	3301      	adds	r3, #1
 80075c8:	e7c5      	b.n	8007556 <__lshift+0x4a>
 80075ca:	3904      	subs	r1, #4
 80075cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80075d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80075d4:	459c      	cmp	ip, r3
 80075d6:	d8f9      	bhi.n	80075cc <__lshift+0xc0>
 80075d8:	e7ea      	b.n	80075b0 <__lshift+0xa4>
 80075da:	bf00      	nop
 80075dc:	0800811c 	.word	0x0800811c
 80075e0:	0800812d 	.word	0x0800812d

080075e4 <__mcmp>:
 80075e4:	690a      	ldr	r2, [r1, #16]
 80075e6:	4603      	mov	r3, r0
 80075e8:	6900      	ldr	r0, [r0, #16]
 80075ea:	1a80      	subs	r0, r0, r2
 80075ec:	b530      	push	{r4, r5, lr}
 80075ee:	d10e      	bne.n	800760e <__mcmp+0x2a>
 80075f0:	3314      	adds	r3, #20
 80075f2:	3114      	adds	r1, #20
 80075f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80075f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80075fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007600:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007604:	4295      	cmp	r5, r2
 8007606:	d003      	beq.n	8007610 <__mcmp+0x2c>
 8007608:	d205      	bcs.n	8007616 <__mcmp+0x32>
 800760a:	f04f 30ff 	mov.w	r0, #4294967295
 800760e:	bd30      	pop	{r4, r5, pc}
 8007610:	42a3      	cmp	r3, r4
 8007612:	d3f3      	bcc.n	80075fc <__mcmp+0x18>
 8007614:	e7fb      	b.n	800760e <__mcmp+0x2a>
 8007616:	2001      	movs	r0, #1
 8007618:	e7f9      	b.n	800760e <__mcmp+0x2a>
	...

0800761c <__mdiff>:
 800761c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007620:	4689      	mov	r9, r1
 8007622:	4606      	mov	r6, r0
 8007624:	4611      	mov	r1, r2
 8007626:	4648      	mov	r0, r9
 8007628:	4614      	mov	r4, r2
 800762a:	f7ff ffdb 	bl	80075e4 <__mcmp>
 800762e:	1e05      	subs	r5, r0, #0
 8007630:	d112      	bne.n	8007658 <__mdiff+0x3c>
 8007632:	4629      	mov	r1, r5
 8007634:	4630      	mov	r0, r6
 8007636:	f7ff fd5b 	bl	80070f0 <_Balloc>
 800763a:	4602      	mov	r2, r0
 800763c:	b928      	cbnz	r0, 800764a <__mdiff+0x2e>
 800763e:	4b3f      	ldr	r3, [pc, #252]	@ (800773c <__mdiff+0x120>)
 8007640:	f240 2137 	movw	r1, #567	@ 0x237
 8007644:	483e      	ldr	r0, [pc, #248]	@ (8007740 <__mdiff+0x124>)
 8007646:	f000 fb75 	bl	8007d34 <__assert_func>
 800764a:	2301      	movs	r3, #1
 800764c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007650:	4610      	mov	r0, r2
 8007652:	b003      	add	sp, #12
 8007654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007658:	bfbc      	itt	lt
 800765a:	464b      	movlt	r3, r9
 800765c:	46a1      	movlt	r9, r4
 800765e:	4630      	mov	r0, r6
 8007660:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007664:	bfba      	itte	lt
 8007666:	461c      	movlt	r4, r3
 8007668:	2501      	movlt	r5, #1
 800766a:	2500      	movge	r5, #0
 800766c:	f7ff fd40 	bl	80070f0 <_Balloc>
 8007670:	4602      	mov	r2, r0
 8007672:	b918      	cbnz	r0, 800767c <__mdiff+0x60>
 8007674:	4b31      	ldr	r3, [pc, #196]	@ (800773c <__mdiff+0x120>)
 8007676:	f240 2145 	movw	r1, #581	@ 0x245
 800767a:	e7e3      	b.n	8007644 <__mdiff+0x28>
 800767c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007680:	6926      	ldr	r6, [r4, #16]
 8007682:	60c5      	str	r5, [r0, #12]
 8007684:	f109 0310 	add.w	r3, r9, #16
 8007688:	f109 0514 	add.w	r5, r9, #20
 800768c:	f104 0e14 	add.w	lr, r4, #20
 8007690:	f100 0b14 	add.w	fp, r0, #20
 8007694:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007698:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	46d9      	mov	r9, fp
 80076a0:	f04f 0c00 	mov.w	ip, #0
 80076a4:	9b01      	ldr	r3, [sp, #4]
 80076a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80076aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80076ae:	9301      	str	r3, [sp, #4]
 80076b0:	fa1f f38a 	uxth.w	r3, sl
 80076b4:	4619      	mov	r1, r3
 80076b6:	b283      	uxth	r3, r0
 80076b8:	1acb      	subs	r3, r1, r3
 80076ba:	0c00      	lsrs	r0, r0, #16
 80076bc:	4463      	add	r3, ip
 80076be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80076c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80076cc:	4576      	cmp	r6, lr
 80076ce:	f849 3b04 	str.w	r3, [r9], #4
 80076d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80076d6:	d8e5      	bhi.n	80076a4 <__mdiff+0x88>
 80076d8:	1b33      	subs	r3, r6, r4
 80076da:	3b15      	subs	r3, #21
 80076dc:	f023 0303 	bic.w	r3, r3, #3
 80076e0:	3415      	adds	r4, #21
 80076e2:	3304      	adds	r3, #4
 80076e4:	42a6      	cmp	r6, r4
 80076e6:	bf38      	it	cc
 80076e8:	2304      	movcc	r3, #4
 80076ea:	441d      	add	r5, r3
 80076ec:	445b      	add	r3, fp
 80076ee:	461e      	mov	r6, r3
 80076f0:	462c      	mov	r4, r5
 80076f2:	4544      	cmp	r4, r8
 80076f4:	d30e      	bcc.n	8007714 <__mdiff+0xf8>
 80076f6:	f108 0103 	add.w	r1, r8, #3
 80076fa:	1b49      	subs	r1, r1, r5
 80076fc:	f021 0103 	bic.w	r1, r1, #3
 8007700:	3d03      	subs	r5, #3
 8007702:	45a8      	cmp	r8, r5
 8007704:	bf38      	it	cc
 8007706:	2100      	movcc	r1, #0
 8007708:	440b      	add	r3, r1
 800770a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800770e:	b191      	cbz	r1, 8007736 <__mdiff+0x11a>
 8007710:	6117      	str	r7, [r2, #16]
 8007712:	e79d      	b.n	8007650 <__mdiff+0x34>
 8007714:	f854 1b04 	ldr.w	r1, [r4], #4
 8007718:	46e6      	mov	lr, ip
 800771a:	0c08      	lsrs	r0, r1, #16
 800771c:	fa1c fc81 	uxtah	ip, ip, r1
 8007720:	4471      	add	r1, lr
 8007722:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007726:	b289      	uxth	r1, r1
 8007728:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800772c:	f846 1b04 	str.w	r1, [r6], #4
 8007730:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007734:	e7dd      	b.n	80076f2 <__mdiff+0xd6>
 8007736:	3f01      	subs	r7, #1
 8007738:	e7e7      	b.n	800770a <__mdiff+0xee>
 800773a:	bf00      	nop
 800773c:	0800811c 	.word	0x0800811c
 8007740:	0800812d 	.word	0x0800812d

08007744 <__d2b>:
 8007744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007748:	460f      	mov	r7, r1
 800774a:	2101      	movs	r1, #1
 800774c:	ec59 8b10 	vmov	r8, r9, d0
 8007750:	4616      	mov	r6, r2
 8007752:	f7ff fccd 	bl	80070f0 <_Balloc>
 8007756:	4604      	mov	r4, r0
 8007758:	b930      	cbnz	r0, 8007768 <__d2b+0x24>
 800775a:	4602      	mov	r2, r0
 800775c:	4b23      	ldr	r3, [pc, #140]	@ (80077ec <__d2b+0xa8>)
 800775e:	4824      	ldr	r0, [pc, #144]	@ (80077f0 <__d2b+0xac>)
 8007760:	f240 310f 	movw	r1, #783	@ 0x30f
 8007764:	f000 fae6 	bl	8007d34 <__assert_func>
 8007768:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800776c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007770:	b10d      	cbz	r5, 8007776 <__d2b+0x32>
 8007772:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007776:	9301      	str	r3, [sp, #4]
 8007778:	f1b8 0300 	subs.w	r3, r8, #0
 800777c:	d023      	beq.n	80077c6 <__d2b+0x82>
 800777e:	4668      	mov	r0, sp
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	f7ff fd7c 	bl	800727e <__lo0bits>
 8007786:	e9dd 1200 	ldrd	r1, r2, [sp]
 800778a:	b1d0      	cbz	r0, 80077c2 <__d2b+0x7e>
 800778c:	f1c0 0320 	rsb	r3, r0, #32
 8007790:	fa02 f303 	lsl.w	r3, r2, r3
 8007794:	430b      	orrs	r3, r1
 8007796:	40c2      	lsrs	r2, r0
 8007798:	6163      	str	r3, [r4, #20]
 800779a:	9201      	str	r2, [sp, #4]
 800779c:	9b01      	ldr	r3, [sp, #4]
 800779e:	61a3      	str	r3, [r4, #24]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	bf0c      	ite	eq
 80077a4:	2201      	moveq	r2, #1
 80077a6:	2202      	movne	r2, #2
 80077a8:	6122      	str	r2, [r4, #16]
 80077aa:	b1a5      	cbz	r5, 80077d6 <__d2b+0x92>
 80077ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80077b0:	4405      	add	r5, r0
 80077b2:	603d      	str	r5, [r7, #0]
 80077b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80077b8:	6030      	str	r0, [r6, #0]
 80077ba:	4620      	mov	r0, r4
 80077bc:	b003      	add	sp, #12
 80077be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077c2:	6161      	str	r1, [r4, #20]
 80077c4:	e7ea      	b.n	800779c <__d2b+0x58>
 80077c6:	a801      	add	r0, sp, #4
 80077c8:	f7ff fd59 	bl	800727e <__lo0bits>
 80077cc:	9b01      	ldr	r3, [sp, #4]
 80077ce:	6163      	str	r3, [r4, #20]
 80077d0:	3020      	adds	r0, #32
 80077d2:	2201      	movs	r2, #1
 80077d4:	e7e8      	b.n	80077a8 <__d2b+0x64>
 80077d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80077de:	6038      	str	r0, [r7, #0]
 80077e0:	6918      	ldr	r0, [r3, #16]
 80077e2:	f7ff fd2d 	bl	8007240 <__hi0bits>
 80077e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077ea:	e7e5      	b.n	80077b8 <__d2b+0x74>
 80077ec:	0800811c 	.word	0x0800811c
 80077f0:	0800812d 	.word	0x0800812d

080077f4 <__sfputc_r>:
 80077f4:	6893      	ldr	r3, [r2, #8]
 80077f6:	3b01      	subs	r3, #1
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	b410      	push	{r4}
 80077fc:	6093      	str	r3, [r2, #8]
 80077fe:	da08      	bge.n	8007812 <__sfputc_r+0x1e>
 8007800:	6994      	ldr	r4, [r2, #24]
 8007802:	42a3      	cmp	r3, r4
 8007804:	db01      	blt.n	800780a <__sfputc_r+0x16>
 8007806:	290a      	cmp	r1, #10
 8007808:	d103      	bne.n	8007812 <__sfputc_r+0x1e>
 800780a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800780e:	f000 b9df 	b.w	8007bd0 <__swbuf_r>
 8007812:	6813      	ldr	r3, [r2, #0]
 8007814:	1c58      	adds	r0, r3, #1
 8007816:	6010      	str	r0, [r2, #0]
 8007818:	7019      	strb	r1, [r3, #0]
 800781a:	4608      	mov	r0, r1
 800781c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007820:	4770      	bx	lr

08007822 <__sfputs_r>:
 8007822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007824:	4606      	mov	r6, r0
 8007826:	460f      	mov	r7, r1
 8007828:	4614      	mov	r4, r2
 800782a:	18d5      	adds	r5, r2, r3
 800782c:	42ac      	cmp	r4, r5
 800782e:	d101      	bne.n	8007834 <__sfputs_r+0x12>
 8007830:	2000      	movs	r0, #0
 8007832:	e007      	b.n	8007844 <__sfputs_r+0x22>
 8007834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007838:	463a      	mov	r2, r7
 800783a:	4630      	mov	r0, r6
 800783c:	f7ff ffda 	bl	80077f4 <__sfputc_r>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d1f3      	bne.n	800782c <__sfputs_r+0xa>
 8007844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007848 <_vfiprintf_r>:
 8007848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784c:	460d      	mov	r5, r1
 800784e:	b09d      	sub	sp, #116	@ 0x74
 8007850:	4614      	mov	r4, r2
 8007852:	4698      	mov	r8, r3
 8007854:	4606      	mov	r6, r0
 8007856:	b118      	cbz	r0, 8007860 <_vfiprintf_r+0x18>
 8007858:	6a03      	ldr	r3, [r0, #32]
 800785a:	b90b      	cbnz	r3, 8007860 <_vfiprintf_r+0x18>
 800785c:	f7fe fbf0 	bl	8006040 <__sinit>
 8007860:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007862:	07d9      	lsls	r1, r3, #31
 8007864:	d405      	bmi.n	8007872 <_vfiprintf_r+0x2a>
 8007866:	89ab      	ldrh	r3, [r5, #12]
 8007868:	059a      	lsls	r2, r3, #22
 800786a:	d402      	bmi.n	8007872 <_vfiprintf_r+0x2a>
 800786c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800786e:	f7fe fcf0 	bl	8006252 <__retarget_lock_acquire_recursive>
 8007872:	89ab      	ldrh	r3, [r5, #12]
 8007874:	071b      	lsls	r3, r3, #28
 8007876:	d501      	bpl.n	800787c <_vfiprintf_r+0x34>
 8007878:	692b      	ldr	r3, [r5, #16]
 800787a:	b99b      	cbnz	r3, 80078a4 <_vfiprintf_r+0x5c>
 800787c:	4629      	mov	r1, r5
 800787e:	4630      	mov	r0, r6
 8007880:	f000 f9e4 	bl	8007c4c <__swsetup_r>
 8007884:	b170      	cbz	r0, 80078a4 <_vfiprintf_r+0x5c>
 8007886:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007888:	07dc      	lsls	r4, r3, #31
 800788a:	d504      	bpl.n	8007896 <_vfiprintf_r+0x4e>
 800788c:	f04f 30ff 	mov.w	r0, #4294967295
 8007890:	b01d      	add	sp, #116	@ 0x74
 8007892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007896:	89ab      	ldrh	r3, [r5, #12]
 8007898:	0598      	lsls	r0, r3, #22
 800789a:	d4f7      	bmi.n	800788c <_vfiprintf_r+0x44>
 800789c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800789e:	f7fe fcd9 	bl	8006254 <__retarget_lock_release_recursive>
 80078a2:	e7f3      	b.n	800788c <_vfiprintf_r+0x44>
 80078a4:	2300      	movs	r3, #0
 80078a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80078a8:	2320      	movs	r3, #32
 80078aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80078b2:	2330      	movs	r3, #48	@ 0x30
 80078b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007a64 <_vfiprintf_r+0x21c>
 80078b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078bc:	f04f 0901 	mov.w	r9, #1
 80078c0:	4623      	mov	r3, r4
 80078c2:	469a      	mov	sl, r3
 80078c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078c8:	b10a      	cbz	r2, 80078ce <_vfiprintf_r+0x86>
 80078ca:	2a25      	cmp	r2, #37	@ 0x25
 80078cc:	d1f9      	bne.n	80078c2 <_vfiprintf_r+0x7a>
 80078ce:	ebba 0b04 	subs.w	fp, sl, r4
 80078d2:	d00b      	beq.n	80078ec <_vfiprintf_r+0xa4>
 80078d4:	465b      	mov	r3, fp
 80078d6:	4622      	mov	r2, r4
 80078d8:	4629      	mov	r1, r5
 80078da:	4630      	mov	r0, r6
 80078dc:	f7ff ffa1 	bl	8007822 <__sfputs_r>
 80078e0:	3001      	adds	r0, #1
 80078e2:	f000 80a7 	beq.w	8007a34 <_vfiprintf_r+0x1ec>
 80078e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078e8:	445a      	add	r2, fp
 80078ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80078ec:	f89a 3000 	ldrb.w	r3, [sl]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 809f 	beq.w	8007a34 <_vfiprintf_r+0x1ec>
 80078f6:	2300      	movs	r3, #0
 80078f8:	f04f 32ff 	mov.w	r2, #4294967295
 80078fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007900:	f10a 0a01 	add.w	sl, sl, #1
 8007904:	9304      	str	r3, [sp, #16]
 8007906:	9307      	str	r3, [sp, #28]
 8007908:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800790c:	931a      	str	r3, [sp, #104]	@ 0x68
 800790e:	4654      	mov	r4, sl
 8007910:	2205      	movs	r2, #5
 8007912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007916:	4853      	ldr	r0, [pc, #332]	@ (8007a64 <_vfiprintf_r+0x21c>)
 8007918:	f7f8 fdb2 	bl	8000480 <memchr>
 800791c:	9a04      	ldr	r2, [sp, #16]
 800791e:	b9d8      	cbnz	r0, 8007958 <_vfiprintf_r+0x110>
 8007920:	06d1      	lsls	r1, r2, #27
 8007922:	bf44      	itt	mi
 8007924:	2320      	movmi	r3, #32
 8007926:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800792a:	0713      	lsls	r3, r2, #28
 800792c:	bf44      	itt	mi
 800792e:	232b      	movmi	r3, #43	@ 0x2b
 8007930:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007934:	f89a 3000 	ldrb.w	r3, [sl]
 8007938:	2b2a      	cmp	r3, #42	@ 0x2a
 800793a:	d015      	beq.n	8007968 <_vfiprintf_r+0x120>
 800793c:	9a07      	ldr	r2, [sp, #28]
 800793e:	4654      	mov	r4, sl
 8007940:	2000      	movs	r0, #0
 8007942:	f04f 0c0a 	mov.w	ip, #10
 8007946:	4621      	mov	r1, r4
 8007948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800794c:	3b30      	subs	r3, #48	@ 0x30
 800794e:	2b09      	cmp	r3, #9
 8007950:	d94b      	bls.n	80079ea <_vfiprintf_r+0x1a2>
 8007952:	b1b0      	cbz	r0, 8007982 <_vfiprintf_r+0x13a>
 8007954:	9207      	str	r2, [sp, #28]
 8007956:	e014      	b.n	8007982 <_vfiprintf_r+0x13a>
 8007958:	eba0 0308 	sub.w	r3, r0, r8
 800795c:	fa09 f303 	lsl.w	r3, r9, r3
 8007960:	4313      	orrs	r3, r2
 8007962:	9304      	str	r3, [sp, #16]
 8007964:	46a2      	mov	sl, r4
 8007966:	e7d2      	b.n	800790e <_vfiprintf_r+0xc6>
 8007968:	9b03      	ldr	r3, [sp, #12]
 800796a:	1d19      	adds	r1, r3, #4
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	9103      	str	r1, [sp, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	bfbb      	ittet	lt
 8007974:	425b      	neglt	r3, r3
 8007976:	f042 0202 	orrlt.w	r2, r2, #2
 800797a:	9307      	strge	r3, [sp, #28]
 800797c:	9307      	strlt	r3, [sp, #28]
 800797e:	bfb8      	it	lt
 8007980:	9204      	strlt	r2, [sp, #16]
 8007982:	7823      	ldrb	r3, [r4, #0]
 8007984:	2b2e      	cmp	r3, #46	@ 0x2e
 8007986:	d10a      	bne.n	800799e <_vfiprintf_r+0x156>
 8007988:	7863      	ldrb	r3, [r4, #1]
 800798a:	2b2a      	cmp	r3, #42	@ 0x2a
 800798c:	d132      	bne.n	80079f4 <_vfiprintf_r+0x1ac>
 800798e:	9b03      	ldr	r3, [sp, #12]
 8007990:	1d1a      	adds	r2, r3, #4
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	9203      	str	r2, [sp, #12]
 8007996:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800799a:	3402      	adds	r4, #2
 800799c:	9305      	str	r3, [sp, #20]
 800799e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007a74 <_vfiprintf_r+0x22c>
 80079a2:	7821      	ldrb	r1, [r4, #0]
 80079a4:	2203      	movs	r2, #3
 80079a6:	4650      	mov	r0, sl
 80079a8:	f7f8 fd6a 	bl	8000480 <memchr>
 80079ac:	b138      	cbz	r0, 80079be <_vfiprintf_r+0x176>
 80079ae:	9b04      	ldr	r3, [sp, #16]
 80079b0:	eba0 000a 	sub.w	r0, r0, sl
 80079b4:	2240      	movs	r2, #64	@ 0x40
 80079b6:	4082      	lsls	r2, r0
 80079b8:	4313      	orrs	r3, r2
 80079ba:	3401      	adds	r4, #1
 80079bc:	9304      	str	r3, [sp, #16]
 80079be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079c2:	4829      	ldr	r0, [pc, #164]	@ (8007a68 <_vfiprintf_r+0x220>)
 80079c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80079c8:	2206      	movs	r2, #6
 80079ca:	f7f8 fd59 	bl	8000480 <memchr>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d03f      	beq.n	8007a52 <_vfiprintf_r+0x20a>
 80079d2:	4b26      	ldr	r3, [pc, #152]	@ (8007a6c <_vfiprintf_r+0x224>)
 80079d4:	bb1b      	cbnz	r3, 8007a1e <_vfiprintf_r+0x1d6>
 80079d6:	9b03      	ldr	r3, [sp, #12]
 80079d8:	3307      	adds	r3, #7
 80079da:	f023 0307 	bic.w	r3, r3, #7
 80079de:	3308      	adds	r3, #8
 80079e0:	9303      	str	r3, [sp, #12]
 80079e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079e4:	443b      	add	r3, r7
 80079e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80079e8:	e76a      	b.n	80078c0 <_vfiprintf_r+0x78>
 80079ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80079ee:	460c      	mov	r4, r1
 80079f0:	2001      	movs	r0, #1
 80079f2:	e7a8      	b.n	8007946 <_vfiprintf_r+0xfe>
 80079f4:	2300      	movs	r3, #0
 80079f6:	3401      	adds	r4, #1
 80079f8:	9305      	str	r3, [sp, #20]
 80079fa:	4619      	mov	r1, r3
 80079fc:	f04f 0c0a 	mov.w	ip, #10
 8007a00:	4620      	mov	r0, r4
 8007a02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a06:	3a30      	subs	r2, #48	@ 0x30
 8007a08:	2a09      	cmp	r2, #9
 8007a0a:	d903      	bls.n	8007a14 <_vfiprintf_r+0x1cc>
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d0c6      	beq.n	800799e <_vfiprintf_r+0x156>
 8007a10:	9105      	str	r1, [sp, #20]
 8007a12:	e7c4      	b.n	800799e <_vfiprintf_r+0x156>
 8007a14:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a18:	4604      	mov	r4, r0
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e7f0      	b.n	8007a00 <_vfiprintf_r+0x1b8>
 8007a1e:	ab03      	add	r3, sp, #12
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	462a      	mov	r2, r5
 8007a24:	4b12      	ldr	r3, [pc, #72]	@ (8007a70 <_vfiprintf_r+0x228>)
 8007a26:	a904      	add	r1, sp, #16
 8007a28:	4630      	mov	r0, r6
 8007a2a:	f7fd fec5 	bl	80057b8 <_printf_float>
 8007a2e:	4607      	mov	r7, r0
 8007a30:	1c78      	adds	r0, r7, #1
 8007a32:	d1d6      	bne.n	80079e2 <_vfiprintf_r+0x19a>
 8007a34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a36:	07d9      	lsls	r1, r3, #31
 8007a38:	d405      	bmi.n	8007a46 <_vfiprintf_r+0x1fe>
 8007a3a:	89ab      	ldrh	r3, [r5, #12]
 8007a3c:	059a      	lsls	r2, r3, #22
 8007a3e:	d402      	bmi.n	8007a46 <_vfiprintf_r+0x1fe>
 8007a40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a42:	f7fe fc07 	bl	8006254 <__retarget_lock_release_recursive>
 8007a46:	89ab      	ldrh	r3, [r5, #12]
 8007a48:	065b      	lsls	r3, r3, #25
 8007a4a:	f53f af1f 	bmi.w	800788c <_vfiprintf_r+0x44>
 8007a4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a50:	e71e      	b.n	8007890 <_vfiprintf_r+0x48>
 8007a52:	ab03      	add	r3, sp, #12
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	462a      	mov	r2, r5
 8007a58:	4b05      	ldr	r3, [pc, #20]	@ (8007a70 <_vfiprintf_r+0x228>)
 8007a5a:	a904      	add	r1, sp, #16
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	f7fe f943 	bl	8005ce8 <_printf_i>
 8007a62:	e7e4      	b.n	8007a2e <_vfiprintf_r+0x1e6>
 8007a64:	08008288 	.word	0x08008288
 8007a68:	08008292 	.word	0x08008292
 8007a6c:	080057b9 	.word	0x080057b9
 8007a70:	08007823 	.word	0x08007823
 8007a74:	0800828e 	.word	0x0800828e

08007a78 <__sflush_r>:
 8007a78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a80:	0716      	lsls	r6, r2, #28
 8007a82:	4605      	mov	r5, r0
 8007a84:	460c      	mov	r4, r1
 8007a86:	d454      	bmi.n	8007b32 <__sflush_r+0xba>
 8007a88:	684b      	ldr	r3, [r1, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	dc02      	bgt.n	8007a94 <__sflush_r+0x1c>
 8007a8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	dd48      	ble.n	8007b26 <__sflush_r+0xae>
 8007a94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a96:	2e00      	cmp	r6, #0
 8007a98:	d045      	beq.n	8007b26 <__sflush_r+0xae>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007aa0:	682f      	ldr	r7, [r5, #0]
 8007aa2:	6a21      	ldr	r1, [r4, #32]
 8007aa4:	602b      	str	r3, [r5, #0]
 8007aa6:	d030      	beq.n	8007b0a <__sflush_r+0x92>
 8007aa8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	0759      	lsls	r1, r3, #29
 8007aae:	d505      	bpl.n	8007abc <__sflush_r+0x44>
 8007ab0:	6863      	ldr	r3, [r4, #4]
 8007ab2:	1ad2      	subs	r2, r2, r3
 8007ab4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007ab6:	b10b      	cbz	r3, 8007abc <__sflush_r+0x44>
 8007ab8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007aba:	1ad2      	subs	r2, r2, r3
 8007abc:	2300      	movs	r3, #0
 8007abe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ac0:	6a21      	ldr	r1, [r4, #32]
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	47b0      	blx	r6
 8007ac6:	1c43      	adds	r3, r0, #1
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	d106      	bne.n	8007ada <__sflush_r+0x62>
 8007acc:	6829      	ldr	r1, [r5, #0]
 8007ace:	291d      	cmp	r1, #29
 8007ad0:	d82b      	bhi.n	8007b2a <__sflush_r+0xb2>
 8007ad2:	4a2a      	ldr	r2, [pc, #168]	@ (8007b7c <__sflush_r+0x104>)
 8007ad4:	410a      	asrs	r2, r1
 8007ad6:	07d6      	lsls	r6, r2, #31
 8007ad8:	d427      	bmi.n	8007b2a <__sflush_r+0xb2>
 8007ada:	2200      	movs	r2, #0
 8007adc:	6062      	str	r2, [r4, #4]
 8007ade:	04d9      	lsls	r1, r3, #19
 8007ae0:	6922      	ldr	r2, [r4, #16]
 8007ae2:	6022      	str	r2, [r4, #0]
 8007ae4:	d504      	bpl.n	8007af0 <__sflush_r+0x78>
 8007ae6:	1c42      	adds	r2, r0, #1
 8007ae8:	d101      	bne.n	8007aee <__sflush_r+0x76>
 8007aea:	682b      	ldr	r3, [r5, #0]
 8007aec:	b903      	cbnz	r3, 8007af0 <__sflush_r+0x78>
 8007aee:	6560      	str	r0, [r4, #84]	@ 0x54
 8007af0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007af2:	602f      	str	r7, [r5, #0]
 8007af4:	b1b9      	cbz	r1, 8007b26 <__sflush_r+0xae>
 8007af6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007afa:	4299      	cmp	r1, r3
 8007afc:	d002      	beq.n	8007b04 <__sflush_r+0x8c>
 8007afe:	4628      	mov	r0, r5
 8007b00:	f7ff f9f6 	bl	8006ef0 <_free_r>
 8007b04:	2300      	movs	r3, #0
 8007b06:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b08:	e00d      	b.n	8007b26 <__sflush_r+0xae>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	47b0      	blx	r6
 8007b10:	4602      	mov	r2, r0
 8007b12:	1c50      	adds	r0, r2, #1
 8007b14:	d1c9      	bne.n	8007aaa <__sflush_r+0x32>
 8007b16:	682b      	ldr	r3, [r5, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d0c6      	beq.n	8007aaa <__sflush_r+0x32>
 8007b1c:	2b1d      	cmp	r3, #29
 8007b1e:	d001      	beq.n	8007b24 <__sflush_r+0xac>
 8007b20:	2b16      	cmp	r3, #22
 8007b22:	d11e      	bne.n	8007b62 <__sflush_r+0xea>
 8007b24:	602f      	str	r7, [r5, #0]
 8007b26:	2000      	movs	r0, #0
 8007b28:	e022      	b.n	8007b70 <__sflush_r+0xf8>
 8007b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b2e:	b21b      	sxth	r3, r3
 8007b30:	e01b      	b.n	8007b6a <__sflush_r+0xf2>
 8007b32:	690f      	ldr	r7, [r1, #16]
 8007b34:	2f00      	cmp	r7, #0
 8007b36:	d0f6      	beq.n	8007b26 <__sflush_r+0xae>
 8007b38:	0793      	lsls	r3, r2, #30
 8007b3a:	680e      	ldr	r6, [r1, #0]
 8007b3c:	bf08      	it	eq
 8007b3e:	694b      	ldreq	r3, [r1, #20]
 8007b40:	600f      	str	r7, [r1, #0]
 8007b42:	bf18      	it	ne
 8007b44:	2300      	movne	r3, #0
 8007b46:	eba6 0807 	sub.w	r8, r6, r7
 8007b4a:	608b      	str	r3, [r1, #8]
 8007b4c:	f1b8 0f00 	cmp.w	r8, #0
 8007b50:	dde9      	ble.n	8007b26 <__sflush_r+0xae>
 8007b52:	6a21      	ldr	r1, [r4, #32]
 8007b54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b56:	4643      	mov	r3, r8
 8007b58:	463a      	mov	r2, r7
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	47b0      	blx	r6
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	dc08      	bgt.n	8007b74 <__sflush_r+0xfc>
 8007b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b6a:	81a3      	strh	r3, [r4, #12]
 8007b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b74:	4407      	add	r7, r0
 8007b76:	eba8 0800 	sub.w	r8, r8, r0
 8007b7a:	e7e7      	b.n	8007b4c <__sflush_r+0xd4>
 8007b7c:	dfbffffe 	.word	0xdfbffffe

08007b80 <_fflush_r>:
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	690b      	ldr	r3, [r1, #16]
 8007b84:	4605      	mov	r5, r0
 8007b86:	460c      	mov	r4, r1
 8007b88:	b913      	cbnz	r3, 8007b90 <_fflush_r+0x10>
 8007b8a:	2500      	movs	r5, #0
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	bd38      	pop	{r3, r4, r5, pc}
 8007b90:	b118      	cbz	r0, 8007b9a <_fflush_r+0x1a>
 8007b92:	6a03      	ldr	r3, [r0, #32]
 8007b94:	b90b      	cbnz	r3, 8007b9a <_fflush_r+0x1a>
 8007b96:	f7fe fa53 	bl	8006040 <__sinit>
 8007b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d0f3      	beq.n	8007b8a <_fflush_r+0xa>
 8007ba2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ba4:	07d0      	lsls	r0, r2, #31
 8007ba6:	d404      	bmi.n	8007bb2 <_fflush_r+0x32>
 8007ba8:	0599      	lsls	r1, r3, #22
 8007baa:	d402      	bmi.n	8007bb2 <_fflush_r+0x32>
 8007bac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bae:	f7fe fb50 	bl	8006252 <__retarget_lock_acquire_recursive>
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	f7ff ff5f 	bl	8007a78 <__sflush_r>
 8007bba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bbc:	07da      	lsls	r2, r3, #31
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	d4e4      	bmi.n	8007b8c <_fflush_r+0xc>
 8007bc2:	89a3      	ldrh	r3, [r4, #12]
 8007bc4:	059b      	lsls	r3, r3, #22
 8007bc6:	d4e1      	bmi.n	8007b8c <_fflush_r+0xc>
 8007bc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bca:	f7fe fb43 	bl	8006254 <__retarget_lock_release_recursive>
 8007bce:	e7dd      	b.n	8007b8c <_fflush_r+0xc>

08007bd0 <__swbuf_r>:
 8007bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd2:	460e      	mov	r6, r1
 8007bd4:	4614      	mov	r4, r2
 8007bd6:	4605      	mov	r5, r0
 8007bd8:	b118      	cbz	r0, 8007be2 <__swbuf_r+0x12>
 8007bda:	6a03      	ldr	r3, [r0, #32]
 8007bdc:	b90b      	cbnz	r3, 8007be2 <__swbuf_r+0x12>
 8007bde:	f7fe fa2f 	bl	8006040 <__sinit>
 8007be2:	69a3      	ldr	r3, [r4, #24]
 8007be4:	60a3      	str	r3, [r4, #8]
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	071a      	lsls	r2, r3, #28
 8007bea:	d501      	bpl.n	8007bf0 <__swbuf_r+0x20>
 8007bec:	6923      	ldr	r3, [r4, #16]
 8007bee:	b943      	cbnz	r3, 8007c02 <__swbuf_r+0x32>
 8007bf0:	4621      	mov	r1, r4
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f000 f82a 	bl	8007c4c <__swsetup_r>
 8007bf8:	b118      	cbz	r0, 8007c02 <__swbuf_r+0x32>
 8007bfa:	f04f 37ff 	mov.w	r7, #4294967295
 8007bfe:	4638      	mov	r0, r7
 8007c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	6922      	ldr	r2, [r4, #16]
 8007c06:	1a98      	subs	r0, r3, r2
 8007c08:	6963      	ldr	r3, [r4, #20]
 8007c0a:	b2f6      	uxtb	r6, r6
 8007c0c:	4283      	cmp	r3, r0
 8007c0e:	4637      	mov	r7, r6
 8007c10:	dc05      	bgt.n	8007c1e <__swbuf_r+0x4e>
 8007c12:	4621      	mov	r1, r4
 8007c14:	4628      	mov	r0, r5
 8007c16:	f7ff ffb3 	bl	8007b80 <_fflush_r>
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	d1ed      	bne.n	8007bfa <__swbuf_r+0x2a>
 8007c1e:	68a3      	ldr	r3, [r4, #8]
 8007c20:	3b01      	subs	r3, #1
 8007c22:	60a3      	str	r3, [r4, #8]
 8007c24:	6823      	ldr	r3, [r4, #0]
 8007c26:	1c5a      	adds	r2, r3, #1
 8007c28:	6022      	str	r2, [r4, #0]
 8007c2a:	701e      	strb	r6, [r3, #0]
 8007c2c:	6962      	ldr	r2, [r4, #20]
 8007c2e:	1c43      	adds	r3, r0, #1
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d004      	beq.n	8007c3e <__swbuf_r+0x6e>
 8007c34:	89a3      	ldrh	r3, [r4, #12]
 8007c36:	07db      	lsls	r3, r3, #31
 8007c38:	d5e1      	bpl.n	8007bfe <__swbuf_r+0x2e>
 8007c3a:	2e0a      	cmp	r6, #10
 8007c3c:	d1df      	bne.n	8007bfe <__swbuf_r+0x2e>
 8007c3e:	4621      	mov	r1, r4
 8007c40:	4628      	mov	r0, r5
 8007c42:	f7ff ff9d 	bl	8007b80 <_fflush_r>
 8007c46:	2800      	cmp	r0, #0
 8007c48:	d0d9      	beq.n	8007bfe <__swbuf_r+0x2e>
 8007c4a:	e7d6      	b.n	8007bfa <__swbuf_r+0x2a>

08007c4c <__swsetup_r>:
 8007c4c:	b538      	push	{r3, r4, r5, lr}
 8007c4e:	4b29      	ldr	r3, [pc, #164]	@ (8007cf4 <__swsetup_r+0xa8>)
 8007c50:	4605      	mov	r5, r0
 8007c52:	6818      	ldr	r0, [r3, #0]
 8007c54:	460c      	mov	r4, r1
 8007c56:	b118      	cbz	r0, 8007c60 <__swsetup_r+0x14>
 8007c58:	6a03      	ldr	r3, [r0, #32]
 8007c5a:	b90b      	cbnz	r3, 8007c60 <__swsetup_r+0x14>
 8007c5c:	f7fe f9f0 	bl	8006040 <__sinit>
 8007c60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c64:	0719      	lsls	r1, r3, #28
 8007c66:	d422      	bmi.n	8007cae <__swsetup_r+0x62>
 8007c68:	06da      	lsls	r2, r3, #27
 8007c6a:	d407      	bmi.n	8007c7c <__swsetup_r+0x30>
 8007c6c:	2209      	movs	r2, #9
 8007c6e:	602a      	str	r2, [r5, #0]
 8007c70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c74:	81a3      	strh	r3, [r4, #12]
 8007c76:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7a:	e033      	b.n	8007ce4 <__swsetup_r+0x98>
 8007c7c:	0758      	lsls	r0, r3, #29
 8007c7e:	d512      	bpl.n	8007ca6 <__swsetup_r+0x5a>
 8007c80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c82:	b141      	cbz	r1, 8007c96 <__swsetup_r+0x4a>
 8007c84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c88:	4299      	cmp	r1, r3
 8007c8a:	d002      	beq.n	8007c92 <__swsetup_r+0x46>
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	f7ff f92f 	bl	8006ef0 <_free_r>
 8007c92:	2300      	movs	r3, #0
 8007c94:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c96:	89a3      	ldrh	r3, [r4, #12]
 8007c98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007c9c:	81a3      	strh	r3, [r4, #12]
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	6063      	str	r3, [r4, #4]
 8007ca2:	6923      	ldr	r3, [r4, #16]
 8007ca4:	6023      	str	r3, [r4, #0]
 8007ca6:	89a3      	ldrh	r3, [r4, #12]
 8007ca8:	f043 0308 	orr.w	r3, r3, #8
 8007cac:	81a3      	strh	r3, [r4, #12]
 8007cae:	6923      	ldr	r3, [r4, #16]
 8007cb0:	b94b      	cbnz	r3, 8007cc6 <__swsetup_r+0x7a>
 8007cb2:	89a3      	ldrh	r3, [r4, #12]
 8007cb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cbc:	d003      	beq.n	8007cc6 <__swsetup_r+0x7a>
 8007cbe:	4621      	mov	r1, r4
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	f000 f8c1 	bl	8007e48 <__smakebuf_r>
 8007cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cca:	f013 0201 	ands.w	r2, r3, #1
 8007cce:	d00a      	beq.n	8007ce6 <__swsetup_r+0x9a>
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	60a2      	str	r2, [r4, #8]
 8007cd4:	6962      	ldr	r2, [r4, #20]
 8007cd6:	4252      	negs	r2, r2
 8007cd8:	61a2      	str	r2, [r4, #24]
 8007cda:	6922      	ldr	r2, [r4, #16]
 8007cdc:	b942      	cbnz	r2, 8007cf0 <__swsetup_r+0xa4>
 8007cde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007ce2:	d1c5      	bne.n	8007c70 <__swsetup_r+0x24>
 8007ce4:	bd38      	pop	{r3, r4, r5, pc}
 8007ce6:	0799      	lsls	r1, r3, #30
 8007ce8:	bf58      	it	pl
 8007cea:	6962      	ldrpl	r2, [r4, #20]
 8007cec:	60a2      	str	r2, [r4, #8]
 8007cee:	e7f4      	b.n	8007cda <__swsetup_r+0x8e>
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	e7f7      	b.n	8007ce4 <__swsetup_r+0x98>
 8007cf4:	2000001c 	.word	0x2000001c

08007cf8 <_sbrk_r>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	4d06      	ldr	r5, [pc, #24]	@ (8007d14 <_sbrk_r+0x1c>)
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	4604      	mov	r4, r0
 8007d00:	4608      	mov	r0, r1
 8007d02:	602b      	str	r3, [r5, #0]
 8007d04:	f7f9 fc42 	bl	800158c <_sbrk>
 8007d08:	1c43      	adds	r3, r0, #1
 8007d0a:	d102      	bne.n	8007d12 <_sbrk_r+0x1a>
 8007d0c:	682b      	ldr	r3, [r5, #0]
 8007d0e:	b103      	cbz	r3, 8007d12 <_sbrk_r+0x1a>
 8007d10:	6023      	str	r3, [r4, #0]
 8007d12:	bd38      	pop	{r3, r4, r5, pc}
 8007d14:	20000bdc 	.word	0x20000bdc

08007d18 <memcpy>:
 8007d18:	440a      	add	r2, r1
 8007d1a:	4291      	cmp	r1, r2
 8007d1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d20:	d100      	bne.n	8007d24 <memcpy+0xc>
 8007d22:	4770      	bx	lr
 8007d24:	b510      	push	{r4, lr}
 8007d26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d2e:	4291      	cmp	r1, r2
 8007d30:	d1f9      	bne.n	8007d26 <memcpy+0xe>
 8007d32:	bd10      	pop	{r4, pc}

08007d34 <__assert_func>:
 8007d34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d36:	4614      	mov	r4, r2
 8007d38:	461a      	mov	r2, r3
 8007d3a:	4b09      	ldr	r3, [pc, #36]	@ (8007d60 <__assert_func+0x2c>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4605      	mov	r5, r0
 8007d40:	68d8      	ldr	r0, [r3, #12]
 8007d42:	b954      	cbnz	r4, 8007d5a <__assert_func+0x26>
 8007d44:	4b07      	ldr	r3, [pc, #28]	@ (8007d64 <__assert_func+0x30>)
 8007d46:	461c      	mov	r4, r3
 8007d48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d4c:	9100      	str	r1, [sp, #0]
 8007d4e:	462b      	mov	r3, r5
 8007d50:	4905      	ldr	r1, [pc, #20]	@ (8007d68 <__assert_func+0x34>)
 8007d52:	f000 f841 	bl	8007dd8 <fiprintf>
 8007d56:	f000 f8d5 	bl	8007f04 <abort>
 8007d5a:	4b04      	ldr	r3, [pc, #16]	@ (8007d6c <__assert_func+0x38>)
 8007d5c:	e7f4      	b.n	8007d48 <__assert_func+0x14>
 8007d5e:	bf00      	nop
 8007d60:	2000001c 	.word	0x2000001c
 8007d64:	080082de 	.word	0x080082de
 8007d68:	080082b0 	.word	0x080082b0
 8007d6c:	080082a3 	.word	0x080082a3

08007d70 <_calloc_r>:
 8007d70:	b570      	push	{r4, r5, r6, lr}
 8007d72:	fba1 5402 	umull	r5, r4, r1, r2
 8007d76:	b93c      	cbnz	r4, 8007d88 <_calloc_r+0x18>
 8007d78:	4629      	mov	r1, r5
 8007d7a:	f7ff f92d 	bl	8006fd8 <_malloc_r>
 8007d7e:	4606      	mov	r6, r0
 8007d80:	b928      	cbnz	r0, 8007d8e <_calloc_r+0x1e>
 8007d82:	2600      	movs	r6, #0
 8007d84:	4630      	mov	r0, r6
 8007d86:	bd70      	pop	{r4, r5, r6, pc}
 8007d88:	220c      	movs	r2, #12
 8007d8a:	6002      	str	r2, [r0, #0]
 8007d8c:	e7f9      	b.n	8007d82 <_calloc_r+0x12>
 8007d8e:	462a      	mov	r2, r5
 8007d90:	4621      	mov	r1, r4
 8007d92:	f7fe f9e0 	bl	8006156 <memset>
 8007d96:	e7f5      	b.n	8007d84 <_calloc_r+0x14>

08007d98 <__ascii_mbtowc>:
 8007d98:	b082      	sub	sp, #8
 8007d9a:	b901      	cbnz	r1, 8007d9e <__ascii_mbtowc+0x6>
 8007d9c:	a901      	add	r1, sp, #4
 8007d9e:	b142      	cbz	r2, 8007db2 <__ascii_mbtowc+0x1a>
 8007da0:	b14b      	cbz	r3, 8007db6 <__ascii_mbtowc+0x1e>
 8007da2:	7813      	ldrb	r3, [r2, #0]
 8007da4:	600b      	str	r3, [r1, #0]
 8007da6:	7812      	ldrb	r2, [r2, #0]
 8007da8:	1e10      	subs	r0, r2, #0
 8007daa:	bf18      	it	ne
 8007dac:	2001      	movne	r0, #1
 8007dae:	b002      	add	sp, #8
 8007db0:	4770      	bx	lr
 8007db2:	4610      	mov	r0, r2
 8007db4:	e7fb      	b.n	8007dae <__ascii_mbtowc+0x16>
 8007db6:	f06f 0001 	mvn.w	r0, #1
 8007dba:	e7f8      	b.n	8007dae <__ascii_mbtowc+0x16>

08007dbc <__ascii_wctomb>:
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	4608      	mov	r0, r1
 8007dc0:	b141      	cbz	r1, 8007dd4 <__ascii_wctomb+0x18>
 8007dc2:	2aff      	cmp	r2, #255	@ 0xff
 8007dc4:	d904      	bls.n	8007dd0 <__ascii_wctomb+0x14>
 8007dc6:	228a      	movs	r2, #138	@ 0x8a
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	f04f 30ff 	mov.w	r0, #4294967295
 8007dce:	4770      	bx	lr
 8007dd0:	700a      	strb	r2, [r1, #0]
 8007dd2:	2001      	movs	r0, #1
 8007dd4:	4770      	bx	lr
	...

08007dd8 <fiprintf>:
 8007dd8:	b40e      	push	{r1, r2, r3}
 8007dda:	b503      	push	{r0, r1, lr}
 8007ddc:	4601      	mov	r1, r0
 8007dde:	ab03      	add	r3, sp, #12
 8007de0:	4805      	ldr	r0, [pc, #20]	@ (8007df8 <fiprintf+0x20>)
 8007de2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007de6:	6800      	ldr	r0, [r0, #0]
 8007de8:	9301      	str	r3, [sp, #4]
 8007dea:	f7ff fd2d 	bl	8007848 <_vfiprintf_r>
 8007dee:	b002      	add	sp, #8
 8007df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007df4:	b003      	add	sp, #12
 8007df6:	4770      	bx	lr
 8007df8:	2000001c 	.word	0x2000001c

08007dfc <__swhatbuf_r>:
 8007dfc:	b570      	push	{r4, r5, r6, lr}
 8007dfe:	460c      	mov	r4, r1
 8007e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e04:	2900      	cmp	r1, #0
 8007e06:	b096      	sub	sp, #88	@ 0x58
 8007e08:	4615      	mov	r5, r2
 8007e0a:	461e      	mov	r6, r3
 8007e0c:	da0d      	bge.n	8007e2a <__swhatbuf_r+0x2e>
 8007e0e:	89a3      	ldrh	r3, [r4, #12]
 8007e10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e14:	f04f 0100 	mov.w	r1, #0
 8007e18:	bf14      	ite	ne
 8007e1a:	2340      	movne	r3, #64	@ 0x40
 8007e1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e20:	2000      	movs	r0, #0
 8007e22:	6031      	str	r1, [r6, #0]
 8007e24:	602b      	str	r3, [r5, #0]
 8007e26:	b016      	add	sp, #88	@ 0x58
 8007e28:	bd70      	pop	{r4, r5, r6, pc}
 8007e2a:	466a      	mov	r2, sp
 8007e2c:	f000 f848 	bl	8007ec0 <_fstat_r>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	dbec      	blt.n	8007e0e <__swhatbuf_r+0x12>
 8007e34:	9901      	ldr	r1, [sp, #4]
 8007e36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e3e:	4259      	negs	r1, r3
 8007e40:	4159      	adcs	r1, r3
 8007e42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e46:	e7eb      	b.n	8007e20 <__swhatbuf_r+0x24>

08007e48 <__smakebuf_r>:
 8007e48:	898b      	ldrh	r3, [r1, #12]
 8007e4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e4c:	079d      	lsls	r5, r3, #30
 8007e4e:	4606      	mov	r6, r0
 8007e50:	460c      	mov	r4, r1
 8007e52:	d507      	bpl.n	8007e64 <__smakebuf_r+0x1c>
 8007e54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e58:	6023      	str	r3, [r4, #0]
 8007e5a:	6123      	str	r3, [r4, #16]
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	6163      	str	r3, [r4, #20]
 8007e60:	b003      	add	sp, #12
 8007e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e64:	ab01      	add	r3, sp, #4
 8007e66:	466a      	mov	r2, sp
 8007e68:	f7ff ffc8 	bl	8007dfc <__swhatbuf_r>
 8007e6c:	9f00      	ldr	r7, [sp, #0]
 8007e6e:	4605      	mov	r5, r0
 8007e70:	4639      	mov	r1, r7
 8007e72:	4630      	mov	r0, r6
 8007e74:	f7ff f8b0 	bl	8006fd8 <_malloc_r>
 8007e78:	b948      	cbnz	r0, 8007e8e <__smakebuf_r+0x46>
 8007e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e7e:	059a      	lsls	r2, r3, #22
 8007e80:	d4ee      	bmi.n	8007e60 <__smakebuf_r+0x18>
 8007e82:	f023 0303 	bic.w	r3, r3, #3
 8007e86:	f043 0302 	orr.w	r3, r3, #2
 8007e8a:	81a3      	strh	r3, [r4, #12]
 8007e8c:	e7e2      	b.n	8007e54 <__smakebuf_r+0xc>
 8007e8e:	89a3      	ldrh	r3, [r4, #12]
 8007e90:	6020      	str	r0, [r4, #0]
 8007e92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e96:	81a3      	strh	r3, [r4, #12]
 8007e98:	9b01      	ldr	r3, [sp, #4]
 8007e9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007e9e:	b15b      	cbz	r3, 8007eb8 <__smakebuf_r+0x70>
 8007ea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	f000 f81d 	bl	8007ee4 <_isatty_r>
 8007eaa:	b128      	cbz	r0, 8007eb8 <__smakebuf_r+0x70>
 8007eac:	89a3      	ldrh	r3, [r4, #12]
 8007eae:	f023 0303 	bic.w	r3, r3, #3
 8007eb2:	f043 0301 	orr.w	r3, r3, #1
 8007eb6:	81a3      	strh	r3, [r4, #12]
 8007eb8:	89a3      	ldrh	r3, [r4, #12]
 8007eba:	431d      	orrs	r5, r3
 8007ebc:	81a5      	strh	r5, [r4, #12]
 8007ebe:	e7cf      	b.n	8007e60 <__smakebuf_r+0x18>

08007ec0 <_fstat_r>:
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	4d07      	ldr	r5, [pc, #28]	@ (8007ee0 <_fstat_r+0x20>)
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	4608      	mov	r0, r1
 8007eca:	4611      	mov	r1, r2
 8007ecc:	602b      	str	r3, [r5, #0]
 8007ece:	f7f9 fb35 	bl	800153c <_fstat>
 8007ed2:	1c43      	adds	r3, r0, #1
 8007ed4:	d102      	bne.n	8007edc <_fstat_r+0x1c>
 8007ed6:	682b      	ldr	r3, [r5, #0]
 8007ed8:	b103      	cbz	r3, 8007edc <_fstat_r+0x1c>
 8007eda:	6023      	str	r3, [r4, #0]
 8007edc:	bd38      	pop	{r3, r4, r5, pc}
 8007ede:	bf00      	nop
 8007ee0:	20000bdc 	.word	0x20000bdc

08007ee4 <_isatty_r>:
 8007ee4:	b538      	push	{r3, r4, r5, lr}
 8007ee6:	4d06      	ldr	r5, [pc, #24]	@ (8007f00 <_isatty_r+0x1c>)
 8007ee8:	2300      	movs	r3, #0
 8007eea:	4604      	mov	r4, r0
 8007eec:	4608      	mov	r0, r1
 8007eee:	602b      	str	r3, [r5, #0]
 8007ef0:	f7f9 fb34 	bl	800155c <_isatty>
 8007ef4:	1c43      	adds	r3, r0, #1
 8007ef6:	d102      	bne.n	8007efe <_isatty_r+0x1a>
 8007ef8:	682b      	ldr	r3, [r5, #0]
 8007efa:	b103      	cbz	r3, 8007efe <_isatty_r+0x1a>
 8007efc:	6023      	str	r3, [r4, #0]
 8007efe:	bd38      	pop	{r3, r4, r5, pc}
 8007f00:	20000bdc 	.word	0x20000bdc

08007f04 <abort>:
 8007f04:	b508      	push	{r3, lr}
 8007f06:	2006      	movs	r0, #6
 8007f08:	f000 f82c 	bl	8007f64 <raise>
 8007f0c:	2001      	movs	r0, #1
 8007f0e:	f7f9 fac5 	bl	800149c <_exit>

08007f12 <_raise_r>:
 8007f12:	291f      	cmp	r1, #31
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4605      	mov	r5, r0
 8007f18:	460c      	mov	r4, r1
 8007f1a:	d904      	bls.n	8007f26 <_raise_r+0x14>
 8007f1c:	2316      	movs	r3, #22
 8007f1e:	6003      	str	r3, [r0, #0]
 8007f20:	f04f 30ff 	mov.w	r0, #4294967295
 8007f24:	bd38      	pop	{r3, r4, r5, pc}
 8007f26:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007f28:	b112      	cbz	r2, 8007f30 <_raise_r+0x1e>
 8007f2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f2e:	b94b      	cbnz	r3, 8007f44 <_raise_r+0x32>
 8007f30:	4628      	mov	r0, r5
 8007f32:	f000 f831 	bl	8007f98 <_getpid_r>
 8007f36:	4622      	mov	r2, r4
 8007f38:	4601      	mov	r1, r0
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f40:	f000 b818 	b.w	8007f74 <_kill_r>
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d00a      	beq.n	8007f5e <_raise_r+0x4c>
 8007f48:	1c59      	adds	r1, r3, #1
 8007f4a:	d103      	bne.n	8007f54 <_raise_r+0x42>
 8007f4c:	2316      	movs	r3, #22
 8007f4e:	6003      	str	r3, [r0, #0]
 8007f50:	2001      	movs	r0, #1
 8007f52:	e7e7      	b.n	8007f24 <_raise_r+0x12>
 8007f54:	2100      	movs	r1, #0
 8007f56:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	4798      	blx	r3
 8007f5e:	2000      	movs	r0, #0
 8007f60:	e7e0      	b.n	8007f24 <_raise_r+0x12>
	...

08007f64 <raise>:
 8007f64:	4b02      	ldr	r3, [pc, #8]	@ (8007f70 <raise+0xc>)
 8007f66:	4601      	mov	r1, r0
 8007f68:	6818      	ldr	r0, [r3, #0]
 8007f6a:	f7ff bfd2 	b.w	8007f12 <_raise_r>
 8007f6e:	bf00      	nop
 8007f70:	2000001c 	.word	0x2000001c

08007f74 <_kill_r>:
 8007f74:	b538      	push	{r3, r4, r5, lr}
 8007f76:	4d07      	ldr	r5, [pc, #28]	@ (8007f94 <_kill_r+0x20>)
 8007f78:	2300      	movs	r3, #0
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	4608      	mov	r0, r1
 8007f7e:	4611      	mov	r1, r2
 8007f80:	602b      	str	r3, [r5, #0]
 8007f82:	f7f9 fa7b 	bl	800147c <_kill>
 8007f86:	1c43      	adds	r3, r0, #1
 8007f88:	d102      	bne.n	8007f90 <_kill_r+0x1c>
 8007f8a:	682b      	ldr	r3, [r5, #0]
 8007f8c:	b103      	cbz	r3, 8007f90 <_kill_r+0x1c>
 8007f8e:	6023      	str	r3, [r4, #0]
 8007f90:	bd38      	pop	{r3, r4, r5, pc}
 8007f92:	bf00      	nop
 8007f94:	20000bdc 	.word	0x20000bdc

08007f98 <_getpid_r>:
 8007f98:	f7f9 ba68 	b.w	800146c <_getpid>

08007f9c <_init>:
 8007f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9e:	bf00      	nop
 8007fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fa2:	bc08      	pop	{r3}
 8007fa4:	469e      	mov	lr, r3
 8007fa6:	4770      	bx	lr

08007fa8 <_fini>:
 8007fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007faa:	bf00      	nop
 8007fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fae:	bc08      	pop	{r3}
 8007fb0:	469e      	mov	lr, r3
 8007fb2:	4770      	bx	lr
